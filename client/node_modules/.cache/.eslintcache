[{"/home/umang/iHub/DFS_ReactViewer/client/src/index.js":"1","/home/umang/iHub/DFS_ReactViewer/client/src/App.js":"2","/home/umang/iHub/DFS_ReactViewer/client/src/Login.js":"3","/home/umang/iHub/DFS_ReactViewer/client/src/components/GetFiles.js":"4","/home/umang/iHub/DFS_ReactViewer/client/src/components/RenderFile.js":"5","/home/umang/iHub/DFS_ReactViewer/client/src/components/OpenSeadragonViewer.js":"6","/home/umang/iHub/DFS_ReactViewer/client/src/config.js":"7"},{"size":1822,"mtime":1688045156039,"results":"8","hashOfConfig":"9"},{"size":2119,"mtime":1688045841544,"results":"10","hashOfConfig":"9"},{"size":1628,"mtime":1688020793887,"results":"11","hashOfConfig":"9"},{"size":1285,"mtime":1688052180078,"results":"12","hashOfConfig":"9"},{"size":3504,"mtime":1688049373200,"results":"13","hashOfConfig":"9"},{"size":3079,"mtime":1688044599495,"results":"14","hashOfConfig":"9"},{"size":171,"mtime":1688051748661,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"20"},"1tda6ht",{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"20"},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31"},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35"},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"20"},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/umang/iHub/DFS_ReactViewer/client/src/index.js",["43","44"],[],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport Login from './Login';\nimport axios from 'axios';\nimport {BrowserRouter} from 'react-router-dom';\n\nconst LOGIN_URL = \"https://datafoundation.iiit.ac.in/api/login\";\nvar tokenId = localStorage.getItem(\"token\");\n\n\nfunction logoutUser () {\n  localStorage.clear();\n  const root = ReactDOM.createRoot(document.getElementById('root'));\n    root.render( <React.StrictMode>\n          <BrowserRouter basename= \"/hv\">\n            <Login checkUser={checkUser} />\n          </BrowserRouter>\n      </React.StrictMode>\n    );\n}\n\n\nasync function checkAuth(email) {\n  const GET_URL = \"https://datafoundation.iiit.ac.in/api/detokn?token=\"+tokenId;\n  try {\n    const response = await axios.get(GET_URL);\n    // ReactDOM.render(<App logout={logoutUser} />, document.getElementById(\"root\"));\n    const root = ReactDOM.createRoot(document.getElementById('root'));\n    root.render( <React.StrictMode>\n          <BrowserRouter basename= \"/hv\">\n            <App />\n          </BrowserRouter>\n      </React.StrictMode>\n    );\n\n  } catch (error) {\n    console.log(\"Incorrect token!!!\");\n    const root = ReactDOM.createRoot(document.getElementById('root'));\n    root.render( <React.StrictMode>\n          <BrowserRouter basename= \"/hv\">\n            <Login checkUser={checkUser} />\n          </BrowserRouter>\n      </React.StrictMode>\n    );\n  }\n}\n\n\nasync function checkUser(email, password) {\n  try {\n    const response = await axios.post(LOGIN_URL, { email, password });\n    localStorage.setItem(\"token\", response.data.data.token);\n    tokenId = localStorage.getItem(\"token\");\n    await checkAuth(email);\n    return true;\n  } catch (error) {\n    console.log(\"Incorrect Username or password!!!\");\n    return false;\n  }\n}\n\ncheckAuth();\n\n",[],"/home/umang/iHub/DFS_ReactViewer/client/src/App.js",["45"],[],"import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport axios from 'axios';\nimport GetFiles from './components/GetFiles';\nimport { config } from './config'; \n\n\nfunction App(props) {\n  const [currentFile,setCurrentFile] =useState({\n    count: 0,\n    name: \"\"\n  });\n  const [isUploaded,setIsUploaded] = useState(false);\n  \n  const email = localStorage.getItem(\"email\").toLowerCase();\n  let shortEmail ='';\n  for (let i = 0; i < email.length; i++) {\n    const charCode = email.charCodeAt(i);   \n    if ((charCode >= 48 && charCode <= 57) || (charCode >= 65 && charCode <= 90) || (charCode >= 97 && charCode <= 122)) {\n      shortEmail += email.charAt(i);\n    }\n  }\n  \n\n  function handleClick(){\n    props.logout();\n  }\n\n  function handleChange(e){\n    const file =  e.target.files[0];\n    setCurrentFile((prevValue)=>({\n      ...prevValue,\n      name : file\n    }))\n  };\n\n  \n  async function uploadFile(e) {\n    e.preventDefault();\n    const formData = new FormData();\n    formData.append('file', currentFile.name);\n    let bucketURL = config.BASE_URL+\"/objects/\" + shortEmail;\n    try {\n      console.log(\"Initiating upload\")\n      console.log(formData);\n      const response = await axios.post(bucketURL, formData);\n      console.log(response);\n      console.log(\"Upload complete\");\n      setIsUploaded(true);\n      setCurrentFile((prevValue) => ({\n        ...prevValue,\n        count: prevValue.count+1\n      }))\n      \n    } catch (error) {\n      console.log(error);\n    }\n\n  }\n   \n  \n  return (\n    <div className=\"App\">\n      <div className='main-btn'>\n        <div className=\"form-container\">\n          <form>\n            <input type=\"file\" id=\"fileInput\" onChange={handleChange} className=\"input-file\"/>\n            <button type=\"submit\" onClick={uploadFile} className=\"upload-button\">Upload</button>\n          </form>\n        </div>\n        <button id=\"logout-btn\" onClick={handleClick}>Logout</button>\n      </div>\n      <div className='get-files'>\n        <GetFiles fileObj={currentFile} uploadStatus={isUploaded} email={shortEmail}/>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n\n","/home/umang/iHub/DFS_ReactViewer/client/src/Login.js",[],[],"/home/umang/iHub/DFS_ReactViewer/client/src/components/GetFiles.js",["46"],[],"import React,{useState,useEffect} from \"react\";\nimport RenderFile from './RenderFile';\nimport './GetFiles.css'\nimport { config } from \"../config\";\nimport axios from \"axios\";\n\nfunction GetFiles(props){\n    const [backendData,setBackendData] = useState([]);\n    const isFirstRender = React.useRef(true);\n    useEffect(() => {\n        if(isFirstRender.current){\n            getFiles();\n            isFirstRender.current = false;\n            return;\n        }else{\n            const latest_file = props.fileObj.name.name;\n            setBackendData((preValue)=>\n                [...preValue,latest_file]\n            )\n        }\n    }, [props.fileObj.count]);\n\n    function getFiles() {\n        console.log(`${config.BASE_URL}/objects/${props.email}`);\n        axios.get(`${config.BASE_URL}/objects/${props.email}`)\n        .then(response => {\n          setBackendData(response.data.objects);\n          console.log(\"done\");\n        })\n        .catch(error => {\n          console.log(error);\n        });\n    }\n\n    return (\n        <div className=\"get-files-container\">\n            {backendData!== undefined ? <RenderFile currFile={props.fileObj.name.name} info ={backendData} uploadStatus= {props.uploadStatus} email={props.email}/> : null} \n        </div>\n    )\n}\n\nexport default GetFiles;","/home/umang/iHub/DFS_ReactViewer/client/src/components/RenderFile.js",["47","48","49","50"],[],"import React, { useEffect, useState } from \"react\";\nimport axios, { all } from 'axios';\nimport OpenSeadragonViewer from \"./OpenSeadragonViewer\";\nimport './RenderFile.css'\nimport BarLoader from \"react-spinners/BarLoader\";\nimport { config } from \"../config\";\n\nfunction RenderFile(props) {\n    const [viewerImage,setViewerImage] =useState();\n    const [imageName,setImageName] =useState();\n    const [allImages,setAllImages] = useState([]);\n    const isFirstRender = React.useRef(true);\n\n    useEffect(()=>{\n        console.log(\"Getting image links\")\n        if(isFirstRender.current){\n            getAllImageLinks();\n            console.log(allImages);\n            if (props.info.length > 0) {\n                isFirstRender.current = false;\n            }\n            return;\n        }else{\n            let imageObj = { imageName: props.currFile };\n            axios.get(config.BASE_URL+\"/getURL/\"+props.email, { params: imageObj })\n            .then((response) => response.data.image)\n            .then((image) => {\n                setAllImages((prevValue) => [...prevValue, image]);\n            })\n            .catch((error) => {\n                console.log(error);\n                return null;\n            });\n        }\n    },[props.info]);\n\n    async function getAllImageLinks() {\n        try {\n            const response = await Promise.all(\n                props.info.map((image) => {\n                    let imageObj = { imageName: image };\n                    return axios.get(config.BASE_URL+\"/getURL/\"+props.email, { params: imageObj })\n                        .then((response) => response.data.image)\n                        .catch((error) => {\n                            console.log(error);\n                            return null;\n                        });\n                })\n            );\n            setAllImages(response);\n        } catch (error) {\n            console.log(error);\n        }\n    }\n\n    function handleClick(e){\n        console.log(allImages);\n        let num = e.target.id;\n        setViewerImage(allImages[num]);\n        setImageName(props.info[num]);\n        console.log(allImages[num]);\n    }\n   \n    return(\n       <div className=\"render-file-container\">\n         <div className=\"button-container\">\n                {props.info.map((file, i) => {\n                    const buttonStyles = {\n                        margin: '10px',\n                        backgroundImage:allImages[i] ? `url(${allImages[i]})` : 'none',\n                        backgroundRepeat: 'no-repeat',\n                        backgroundSize: 'cover',\n                        color: '#333',\n                        objectFit: 'cover',\n                        cursor: 'pointer',\n                        whiteSpace: 'nowrap',\n                        height: '150px',\n                        width: '150px', \n                    };\n                    return (\n                        <div>\n                        <img onClick={handleClick} style={buttonStyles} key={i} id={i} />\n                        <p id=\"image-name\">{file}</p>\n                        </div> \n                    );\n                })}\n                {/* {console.log(props.uploadStatus)}\n                {!props.uploadStatus ? <BarLoader/> : null} */}\n            </div>\n            <div className=\"viewer-container\">\n                {viewerImage ? <OpenSeadragonViewer imageUrl={viewerImage} imageName={imageName} /> : <p>Select an image to view</p>}\n            </div> \n        </div>\n    )\n}\n\nexport default RenderFile;\n\n\n","/home/umang/iHub/DFS_ReactViewer/client/src/components/OpenSeadragonViewer.js",["51","52"],[],"import React, {useState,useEffect} from \"react\";\nimport OpenSeadragon from \"openseadragon\";\nimport './OpenSeadragon.css';\nimport GeoTIFF from \"geotiff\";\n\nfunction OpenSeadragonViewer(props) {\n  \n      useEffect(() => {\n        let viewer = OpenSeadragon({\n          id: 'openseadragon-viewer',\n          prefixUrl:'openseadragon-images/' ,\n          tileSources: [{\n            type: 'image',\n            url: props.imageUrl\n          }],\n          animationTime: 0.5,\n          blendTime: 0.1,\n          constrainDuringPan: true,\n          maxZoomPixelRatio: 2,\n          minZoomLevel: 1,\n          visibilityRatio: 1,\n          zoomPerScroll: 2,\n          showNavigator:  true,\n          crossOriginPolicy: \"Anonymous\"\n        });\n      //   setupImage(props.imageUrl);\n\n      //   function setupImage(tileSourceInput){\n      //     viewer.close();\n      //     let tiffTileSources = OpenSeadragon.GeoTIFFTileSource.getAllTileSources(tileSourceInput, {logLatency: true});\n      //     tiffTileSources.then(ts=>viewer.open(ts));\n      // }\n        return () => {\n          viewer && viewer.destroy();\n        };\n      }, [props.imageUrl]);\n    \n      \n      function takeSS(){\n        var current_view = document.getElementsByTagName(\"canvas\");\n        if (current_view){\n          console.log(current_view.length);\n          var my_view = current_view[0];\n          var img = my_view.toDataURL(\"image/png\");\n          const link = document.createElement('a')\n          link.href = img\n          link.download = props.imageName\n          document.body.appendChild(link)\n          link.click()\n          document.body.removeChild(link)\n        }\n      }\n\n    return ( \n      <div>\n        <button onClick={takeSS} id=\"print-view\" >Print View</button>\n        <div id=\"openseadragon-viewer\" ></div>\n      </div>\n    )\n}\n\nexport default OpenSeadragonViewer;\n\n\n\n// useEffect(() => {\n//   let viewer;\n  \n//   const loadGeoTIFF = async (tiffUrl) => {\n//     // const response = await fetch(tiffUrl);\n//     // const arrayBuffer = await response.arrayBuffer();\n//     // const tiff = await fromUrl(tiffUrl);\n//     const tiff = await fromUrl(props.imageUrl, { byteOrder: 1 });\n//     const image = await tiff.getImage();\n//     const width = image.getWidth();\n//     const height = image.getHeight();\n//     const tileSource = new OpenSeadragon.GeoTIFFTileSource(image, width, height);\n//     return tileSource;\n//   };\n\n//   const initializeViewer = async () => {\n//     const tileSource = await loadGeoTIFF(props.imageUrl);\n\n//     viewer = OpenSeadragon({\n//       id: \"openseadragon-viewer\",\n//       prefixUrl: \"openseadragon-images/\",\n//       tileSources: [tileSource],\n//       animationTime: 0.5,\n//       blendTime: 0.1,\n//       constrainDuringPan: true,\n//       maxZoomPixelRatio: 2,\n//       minZoomLevel: 1,\n//       visibilityRatio: 1,\n//       zoomPerScroll: 2,\n//       showNavigator: true,\n//       crossOriginPolicy: \"Anonymous\",\n//     });\n//   };\n\n//   initializeViewer();\n\n//   return () => {\n//     viewer && viewer.destroy();\n//   };\n// }, [props.imageUrl]);\n\n","/home/umang/iHub/DFS_ReactViewer/client/src/config.js",[],[],{"ruleId":"53","severity":1,"message":"54","line":13,"column":10,"nodeType":"55","messageId":"56","endLine":13,"endColumn":20},{"ruleId":"53","severity":1,"message":"57","line":28,"column":11,"nodeType":"55","messageId":"56","endLine":28,"endColumn":19},{"ruleId":"53","severity":1,"message":"58","line":1,"column":17,"nodeType":"55","messageId":"56","endLine":1,"endColumn":26},{"ruleId":"59","severity":1,"message":"60","line":21,"column":8,"nodeType":"61","endLine":21,"endColumn":29,"suggestions":"62"},{"ruleId":"53","severity":1,"message":"63","line":2,"column":17,"nodeType":"55","messageId":"56","endLine":2,"endColumn":20},{"ruleId":"53","severity":1,"message":"64","line":5,"column":8,"nodeType":"55","messageId":"56","endLine":5,"endColumn":17},{"ruleId":"59","severity":1,"message":"65","line":35,"column":7,"nodeType":"61","endLine":35,"endColumn":19,"suggestions":"66"},{"ruleId":"67","severity":1,"message":"68","line":82,"column":25,"nodeType":"69","endLine":82,"endColumn":90},{"ruleId":"53","severity":1,"message":"70","line":1,"column":16,"nodeType":"55","messageId":"56","endLine":1,"endColumn":24},{"ruleId":"53","severity":1,"message":"71","line":4,"column":8,"nodeType":"55","messageId":"56","endLine":4,"endColumn":15},"no-unused-vars","'logoutUser' is defined but never used.","Identifier","unusedVar","'response' is assigned a value but never used.","'useEffect' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'getFiles' and 'props.fileObj.name.name'. Either include them or remove the dependency array.","ArrayExpression",["72"],"'all' is defined but never used.","'BarLoader' is defined but never used.","React Hook useEffect has missing dependencies: 'allImages', 'getAllImageLinks', 'props.currFile', and 'props.email'. Either include them or remove the dependency array.",["73"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'useState' is defined but never used.","'GeoTIFF' is defined but never used.",{"desc":"74","fix":"75"},{"desc":"76","fix":"77"},"Update the dependencies array to be: [getFiles, props.fileObj.count, props.fileObj.name.name]",{"range":"78","text":"79"},"Update the dependencies array to be: [allImages, getAllImageLinks, props.currFile, props.email, props.info]",{"range":"80","text":"81"},[631,652],"[getFiles, props.fileObj.count, props.fileObj.name.name]",[1226,1238],"[allImages, getAllImageLinks, props.currFile, props.email, props.info]"]