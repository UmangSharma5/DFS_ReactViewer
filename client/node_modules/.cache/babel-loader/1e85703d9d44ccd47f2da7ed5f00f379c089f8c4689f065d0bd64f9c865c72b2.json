{"ast":null,"code":"import { convertToNumber, roundToFloat16Bits } from \"./_util/converter.mjs\";\nimport { NumberIsFinite } from \"./_util/primordials.mjs\";\n\n/**\n * returns the nearest half-precision float representation of a number\n *\n * @param {number} x\n * @returns {number}\n */\nexport function f16round(x) {\n  var number = +x;\n\n  // for optimization\n  if (!NumberIsFinite(number) || number === 0) {\n    return number;\n  }\n  var x16 = roundToFloat16Bits(number);\n  return convertToNumber(x16);\n}","map":{"version":3,"names":["convertToNumber","roundToFloat16Bits","NumberIsFinite","f16round","x","number","x16"],"sources":["/home/umang/iHub/DFS_ReactViewer/client/node_modules/@petamoriken/float16/src/f16round.mjs"],"sourcesContent":["import { convertToNumber, roundToFloat16Bits } from \"./_util/converter.mjs\";\nimport { NumberIsFinite } from \"./_util/primordials.mjs\";\n\n/**\n * returns the nearest half-precision float representation of a number\n *\n * @param {number} x\n * @returns {number}\n */\nexport function f16round(x) {\n  const number = +x;\n\n  // for optimization\n  if (!NumberIsFinite(number) || number === 0) {\n    return number;\n  }\n\n  const x16 = roundToFloat16Bits(number);\n  return convertToNumber(x16);\n}\n"],"mappings":"AAAA,SAASA,eAAe,EAAEC,kBAAkB,QAAQ,uBAAuB;AAC3E,SAASC,cAAc,QAAQ,yBAAyB;;AAExD;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,QAAQA,CAACC,CAAC,EAAE;EAC1B,IAAMC,MAAM,GAAG,CAACD,CAAC;;EAEjB;EACA,IAAI,CAACF,cAAc,CAACG,MAAM,CAAC,IAAIA,MAAM,KAAK,CAAC,EAAE;IAC3C,OAAOA,MAAM;EACf;EAEA,IAAMC,GAAG,GAAGL,kBAAkB,CAACI,MAAM,CAAC;EACtC,OAAOL,eAAe,CAACM,GAAG,CAAC;AAC7B"},"metadata":{},"sourceType":"module","externalDependencies":[]}