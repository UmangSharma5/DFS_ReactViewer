{"ast":null,"code":"var _jsxFileName = \"/home/umang/iHub/DFS_ReactViewer/client/src/components/OpenSeadragonViewer.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport OpenSeadragon from \"openseadragon\";\nimport './OpenSeadragon.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction OpenSeadragonViewer(props) {\n  _s();\n  useEffect(() => {\n    const viewer = OpenSeadragon({\n      id: 'openseadragon-viewer',\n      prefixUrl: 'openseadragon-images/',\n      tileSources: [{\n        type: 'image',\n        url: props.imageUrl,\n        buildPyramid: false\n      }],\n      animationTime: 0.5,\n      blendTime: 0.1,\n      constrainDuringPan: true,\n      maxZoomPixelRatio: 2,\n      minZoomLevel: 1,\n      visibilityRatio: 1,\n      zoomPerScroll: 2,\n      showNavigator: true,\n      crossOriginPolicy: \"Anonymous\"\n    });\n    setupImage(props.imageUrl, props.imageUrl);\n    function setupImage(tileSourceInput) {\n      let tilesourceName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n      viewer.close();\n      clearImageInfo();\n      document.getElementById('filename').textContent = tilesourceName;\n      let tiffTileSources = OpenSeadragon.GeoTIFFTileSource.getAllTileSources(tileSourceInput, {\n        logLatency: true\n      });\n      tiffTileSources.then(ts => viewer.open(ts));\n      tiffTileSources.then(tileSources => {\n        document.getElementById('filename').textContent += ' -- ' + tileSources.length + ' image' + (tileSources.length != 1 ? 's' : '') + ' found';\n        Promise.all(tileSources.map(t => t.promises.ready)).then(() => showTileSourcesInfo(tileSources));\n      }).catch(error => {\n        document.getElementById('filename').textContent += ': Error opening file. Is this a valid tiff? See console for details.';\n        console.error(error);\n      });\n    }\n    return () => {\n      viewer && viewer.destroy();\n    };\n  }, [props.imageUrl]);\n  function takeSS() {\n    var current_view = document.getElementsByTagName(\"canvas\");\n    if (current_view) {\n      console.log(current_view.length);\n      var my_view = current_view[0];\n      var img = my_view.toDataURL(\"image/png\");\n      const link = document.createElement('a');\n      link.href = img;\n      link.download = props.imageName;\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: takeSS,\n      id: \"print-view\",\n      children: \"Print View\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"openseadragon-viewer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 7\n  }, this);\n}\n_s(OpenSeadragonViewer, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = OpenSeadragonViewer;\nexport default OpenSeadragonViewer;\n\n// useEffect(() => {\n//   let viewer;\n\n//   const loadGeoTIFF = async (tiffUrl) => {\n//     // const response = await fetch(tiffUrl);\n//     // const arrayBuffer = await response.arrayBuffer();\n//     // const tiff = await fromUrl(tiffUrl);\n//     const tiff = await fromUrl(props.imageUrl, { byteOrder: 1 });\n//     const image = await tiff.getImage();\n//     const width = image.getWidth();\n//     const height = image.getHeight();\n//     const tileSource = new OpenSeadragon.GeoTIFFTileSource(image, width, height);\n//     return tileSource;\n//   };\n\n//   const initializeViewer = async () => {\n//     const tileSource = await loadGeoTIFF(props.imageUrl);\n\n//     viewer = OpenSeadragon({\n//       id: \"openseadragon-viewer\",\n//       prefixUrl: \"openseadragon-images/\",\n//       tileSources: [tileSource],\n//       animationTime: 0.5,\n//       blendTime: 0.1,\n//       constrainDuringPan: true,\n//       maxZoomPixelRatio: 2,\n//       minZoomLevel: 1,\n//       visibilityRatio: 1,\n//       zoomPerScroll: 2,\n//       showNavigator: true,\n//       crossOriginPolicy: \"Anonymous\",\n//     });\n//   };\n\n//   initializeViewer();\n\n//   return () => {\n//     viewer && viewer.destroy();\n//   };\n// }, [props.imageUrl]);\nvar _c;\n$RefreshReg$(_c, \"OpenSeadragonViewer\");","map":{"version":3,"names":["React","useState","useEffect","OpenSeadragon","jsxDEV","_jsxDEV","OpenSeadragonViewer","props","_s","viewer","id","prefixUrl","tileSources","type","url","imageUrl","buildPyramid","animationTime","blendTime","constrainDuringPan","maxZoomPixelRatio","minZoomLevel","visibilityRatio","zoomPerScroll","showNavigator","crossOriginPolicy","setupImage","tileSourceInput","tilesourceName","arguments","length","undefined","close","clearImageInfo","document","getElementById","textContent","tiffTileSources","GeoTIFFTileSource","getAllTileSources","logLatency","then","ts","open","Promise","all","map","t","promises","ready","showTileSourcesInfo","catch","error","console","destroy","takeSS","current_view","getElementsByTagName","log","my_view","img","toDataURL","link","createElement","href","download","imageName","body","appendChild","click","removeChild","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/umang/iHub/DFS_ReactViewer/client/src/components/OpenSeadragonViewer.js"],"sourcesContent":["import React, {useState,useEffect} from \"react\";\nimport OpenSeadragon from \"openseadragon\";\nimport './OpenSeadragon.css';\n\nfunction OpenSeadragonViewer(props) {\n  \n      useEffect(() => {\n        const viewer = OpenSeadragon({\n          id: 'openseadragon-viewer',\n          prefixUrl:'openseadragon-images/' ,\n          tileSources: [{\n            type: 'image',\n            url: props.imageUrl,\n            buildPyramid: false\n          }],\n          animationTime: 0.5,\n          blendTime: 0.1,\n          constrainDuringPan: true,\n          maxZoomPixelRatio: 2,\n          minZoomLevel: 1,\n          visibilityRatio: 1,\n          zoomPerScroll: 2,\n          showNavigator:  true,\n          crossOriginPolicy: \"Anonymous\"\n        });\n\n\n        setupImage(props.imageUrl,props.imageUrl);\n\n        function setupImage(tileSourceInput,tilesourceName=''){\n          viewer.close();\n          clearImageInfo();\n          document.getElementById('filename').textContent=tilesourceName;\n      \n          let tiffTileSources = OpenSeadragon.GeoTIFFTileSource.getAllTileSources(tileSourceInput, {logLatency: true});\n          tiffTileSources.then(ts=>viewer.open(ts));\n      \n          tiffTileSources.then(tileSources=>{\n              document.getElementById('filename').textContent += ' -- '+tileSources.length+' image'+(tileSources.length!=1?'s':'')+' found'\n              Promise.all(tileSources.map(t=>t.promises.ready)).then(()=>showTileSourcesInfo(tileSources));\n          }).catch(error=>{\n              document.getElementById('filename').textContent += ': Error opening file. Is this a valid tiff? See console for details.';\n              console.error(error);\n          });\n      \n      }\n    \n        return () => {\n          viewer && viewer.destroy();\n        };\n      }, [props.imageUrl]);\n    \n      \n      function takeSS(){\n        var current_view = document.getElementsByTagName(\"canvas\");\n        if (current_view){\n          console.log(current_view.length);\n          var my_view = current_view[0];\n          var img = my_view.toDataURL(\"image/png\");\n          const link = document.createElement('a')\n          link.href = img\n          link.download = props.imageName\n          document.body.appendChild(link)\n          link.click()\n          document.body.removeChild(link)\n        }\n      }\n\n    return ( \n      <div>\n        <button onClick={takeSS} id=\"print-view\" >Print View</button>\n        <div id=\"openseadragon-viewer\" ></div>\n      </div>\n    )\n}\n\nexport default OpenSeadragonViewer;\n\n\n\n// useEffect(() => {\n//   let viewer;\n  \n//   const loadGeoTIFF = async (tiffUrl) => {\n//     // const response = await fetch(tiffUrl);\n//     // const arrayBuffer = await response.arrayBuffer();\n//     // const tiff = await fromUrl(tiffUrl);\n//     const tiff = await fromUrl(props.imageUrl, { byteOrder: 1 });\n//     const image = await tiff.getImage();\n//     const width = image.getWidth();\n//     const height = image.getHeight();\n//     const tileSource = new OpenSeadragon.GeoTIFFTileSource(image, width, height);\n//     return tileSource;\n//   };\n\n//   const initializeViewer = async () => {\n//     const tileSource = await loadGeoTIFF(props.imageUrl);\n\n//     viewer = OpenSeadragon({\n//       id: \"openseadragon-viewer\",\n//       prefixUrl: \"openseadragon-images/\",\n//       tileSources: [tileSource],\n//       animationTime: 0.5,\n//       blendTime: 0.1,\n//       constrainDuringPan: true,\n//       maxZoomPixelRatio: 2,\n//       minZoomLevel: 1,\n//       visibilityRatio: 1,\n//       zoomPerScroll: 2,\n//       showNavigator: true,\n//       crossOriginPolicy: \"Anonymous\",\n//     });\n//   };\n\n//   initializeViewer();\n\n//   return () => {\n//     viewer && viewer.destroy();\n//   };\n// }, [props.imageUrl]);\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}