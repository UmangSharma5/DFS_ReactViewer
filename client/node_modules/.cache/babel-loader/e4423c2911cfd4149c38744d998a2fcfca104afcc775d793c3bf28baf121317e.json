{"ast":null,"code":"var _jsxFileName = \"/home/umang/iHub/DFS_ReactViewer/client/src/components/OpenSeadragonViewer.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport OpenSeadragon from \"openseadragon\";\nimport './OpenSeadragon.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction OpenSeadragonViewer(props) {\n  _s();\n  // useEffect(() => {\n  //   const viewer = OpenSeadragon({\n  //     id: 'openseadragon-viewer',\n  //     prefixUrl:'openseadragon-images/' ,\n  //     tileSources: [{\n  //       type: 'image',\n  //       url: props.imageUrl,\n  //       buildPyramid: false\n  //     }],\n  //     animationTime: 0.5,\n  //     blendTime: 0.1,\n  //     constrainDuringPan: true,\n  //     maxZoomPixelRatio: 2,\n  //     minZoomLevel: 1,\n  //     visibilityRatio: 1,\n  //     zoomPerScroll: 2,\n  //     showNavigator:  true,\n  //     crossOriginPolicy: \"Anonymous\"\n  //   });\n\n  //   return () => {\n  //     viewer && viewer.destroy();\n  //   };\n  // }, [props.imageUrl]);\n\n  useEffect(() => {\n    const convertToPNG = async () => {\n      try {\n        // Load the TIFF image\n        const tiff = await GeoTIFF.fromUrl(props.imageUrl);\n        const image = await tiff.getImage();\n\n        // Read the image data as a PNG\n        const pngData = await image.readAsArrayBuffer({\n          useWorkers: false\n        });\n        const pngUrl = URL.createObjectURL(new Blob([pngData], {\n          type: 'image/png'\n        }));\n\n        // Initialize OpenSeadragon viewer with the PNG image\n        const viewer = OpenSeadragon({\n          id: 'openseadragon-viewer',\n          prefixUrl: 'openseadragon-images/',\n          tileSources: [{\n            type: 'image',\n            url: pngUrl,\n            buildPyramid: false\n          }],\n          animationTime: 0.5,\n          blendTime: 0.1,\n          constrainDuringPan: true,\n          maxZoomPixelRatio: 2,\n          minZoomLevel: 1,\n          visibilityRatio: 1,\n          zoomPerScroll: 2,\n          showNavigator: true,\n          crossOriginPolicy: 'Anonymous'\n        });\n\n        // Cleanup function\n        return () => {\n          viewer && viewer.destroy();\n          URL.revokeObjectURL(pngUrl);\n        };\n      } catch (error) {\n        console.error('Failed to convert and load image:', error);\n      }\n    };\n    convertToPNG();\n  }, [props.imageUrl]);\n  function takeSS() {\n    var current_view = document.getElementsByTagName(\"canvas\");\n    if (current_view) {\n      console.log(current_view.length);\n      var my_view = current_view[0];\n      var img = my_view.toDataURL(\"image/png\");\n      const link = document.createElement('a');\n      link.href = img;\n      link.download = props.imageName;\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: takeSS,\n      id: \"print-view\",\n      children: \"Print View\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"openseadragon-viewer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 7\n  }, this);\n}\n_s(OpenSeadragonViewer, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = OpenSeadragonViewer;\nexport default OpenSeadragonViewer;\n\n// useEffect(() => {\n//   let viewer;\n\n//   const loadGeoTIFF = async (tiffUrl) => {\n//     // const response = await fetch(tiffUrl);\n//     // const arrayBuffer = await response.arrayBuffer();\n//     // const tiff = await fromUrl(tiffUrl);\n//     const tiff = await fromUrl(props.imageUrl, { byteOrder: 1 });\n//     const image = await tiff.getImage();\n//     const width = image.getWidth();\n//     const height = image.getHeight();\n//     const tileSource = new OpenSeadragon.GeoTIFFTileSource(image, width, height);\n//     return tileSource;\n//   };\n\n//   const initializeViewer = async () => {\n//     const tileSource = await loadGeoTIFF(props.imageUrl);\n\n//     viewer = OpenSeadragon({\n//       id: \"openseadragon-viewer\",\n//       prefixUrl: \"openseadragon-images/\",\n//       tileSources: [tileSource],\n//       animationTime: 0.5,\n//       blendTime: 0.1,\n//       constrainDuringPan: true,\n//       maxZoomPixelRatio: 2,\n//       minZoomLevel: 1,\n//       visibilityRatio: 1,\n//       zoomPerScroll: 2,\n//       showNavigator: true,\n//       crossOriginPolicy: \"Anonymous\",\n//     });\n//   };\n\n//   initializeViewer();\n\n//   return () => {\n//     viewer && viewer.destroy();\n//   };\n// }, [props.imageUrl]);\nvar _c;\n$RefreshReg$(_c, \"OpenSeadragonViewer\");","map":{"version":3,"names":["React","useState","useEffect","OpenSeadragon","jsxDEV","_jsxDEV","OpenSeadragonViewer","props","_s","convertToPNG","tiff","GeoTIFF","fromUrl","imageUrl","image","getImage","pngData","readAsArrayBuffer","useWorkers","pngUrl","URL","createObjectURL","Blob","type","viewer","id","prefixUrl","tileSources","url","buildPyramid","animationTime","blendTime","constrainDuringPan","maxZoomPixelRatio","minZoomLevel","visibilityRatio","zoomPerScroll","showNavigator","crossOriginPolicy","destroy","revokeObjectURL","error","console","takeSS","current_view","document","getElementsByTagName","log","length","my_view","img","toDataURL","link","createElement","href","download","imageName","body","appendChild","click","removeChild","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/umang/iHub/DFS_ReactViewer/client/src/components/OpenSeadragonViewer.js"],"sourcesContent":["import React, {useState,useEffect} from \"react\";\nimport OpenSeadragon from \"openseadragon\";\nimport './OpenSeadragon.css';\n\nfunction OpenSeadragonViewer(props) {\n  \n      // useEffect(() => {\n      //   const viewer = OpenSeadragon({\n      //     id: 'openseadragon-viewer',\n      //     prefixUrl:'openseadragon-images/' ,\n      //     tileSources: [{\n      //       type: 'image',\n      //       url: props.imageUrl,\n      //       buildPyramid: false\n      //     }],\n      //     animationTime: 0.5,\n      //     blendTime: 0.1,\n      //     constrainDuringPan: true,\n      //     maxZoomPixelRatio: 2,\n      //     minZoomLevel: 1,\n      //     visibilityRatio: 1,\n      //     zoomPerScroll: 2,\n      //     showNavigator:  true,\n      //     crossOriginPolicy: \"Anonymous\"\n      //   });\n    \n      //   return () => {\n      //     viewer && viewer.destroy();\n      //   };\n      // }, [props.imageUrl]);\n      \n      useEffect(() => {\n        const convertToPNG = async () => {\n          try {\n            // Load the TIFF image\n            const tiff = await GeoTIFF.fromUrl(props.imageUrl);\n            const image = await tiff.getImage();\n    \n            // Read the image data as a PNG\n            const pngData = await image.readAsArrayBuffer({ useWorkers: false });\n            const pngUrl = URL.createObjectURL(new Blob([pngData], { type: 'image/png' }));\n    \n            // Initialize OpenSeadragon viewer with the PNG image\n            const viewer = OpenSeadragon({\n              id: 'openseadragon-viewer',\n              prefixUrl: 'openseadragon-images/',\n              tileSources: [{\n                type: 'image',\n                url: pngUrl,\n                buildPyramid: false\n              }],\n              animationTime: 0.5,\n              blendTime: 0.1,\n              constrainDuringPan: true,\n              maxZoomPixelRatio: 2,\n              minZoomLevel: 1,\n              visibilityRatio: 1,\n              zoomPerScroll: 2,\n              showNavigator: true,\n              crossOriginPolicy: 'Anonymous'\n            });\n    \n            // Cleanup function\n            return () => {\n              viewer && viewer.destroy();\n              URL.revokeObjectURL(pngUrl);\n            };\n          } catch (error) {\n            console.error('Failed to convert and load image:', error);\n          }\n        };\n    \n        convertToPNG();\n      }, [props.imageUrl]);\n\n\n      \n      function takeSS(){\n        var current_view = document.getElementsByTagName(\"canvas\");\n        if (current_view){\n          console.log(current_view.length);\n          var my_view = current_view[0];\n          var img = my_view.toDataURL(\"image/png\");\n          const link = document.createElement('a')\n          link.href = img\n          link.download = props.imageName\n          document.body.appendChild(link)\n          link.click()\n          document.body.removeChild(link)\n        }\n      }\n\n    return ( \n      <div>\n        <button onClick={takeSS} id=\"print-view\" >Print View</button>\n        <div id=\"openseadragon-viewer\" ></div>\n      </div>\n    )\n}\n\nexport default OpenSeadragonViewer;\n\n\n\n// useEffect(() => {\n//   let viewer;\n  \n//   const loadGeoTIFF = async (tiffUrl) => {\n//     // const response = await fetch(tiffUrl);\n//     // const arrayBuffer = await response.arrayBuffer();\n//     // const tiff = await fromUrl(tiffUrl);\n//     const tiff = await fromUrl(props.imageUrl, { byteOrder: 1 });\n//     const image = await tiff.getImage();\n//     const width = image.getWidth();\n//     const height = image.getHeight();\n//     const tileSource = new OpenSeadragon.GeoTIFFTileSource(image, width, height);\n//     return tileSource;\n//   };\n\n//   const initializeViewer = async () => {\n//     const tileSource = await loadGeoTIFF(props.imageUrl);\n\n//     viewer = OpenSeadragon({\n//       id: \"openseadragon-viewer\",\n//       prefixUrl: \"openseadragon-images/\",\n//       tileSources: [tileSource],\n//       animationTime: 0.5,\n//       blendTime: 0.1,\n//       constrainDuringPan: true,\n//       maxZoomPixelRatio: 2,\n//       minZoomLevel: 1,\n//       visibilityRatio: 1,\n//       zoomPerScroll: 2,\n//       showNavigator: true,\n//       crossOriginPolicy: \"Anonymous\",\n//     });\n//   };\n\n//   initializeViewer();\n\n//   return () => {\n//     viewer && viewer.destroy();\n//   };\n// }, [props.imageUrl]);\n\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,QAAQ,EAACC,SAAS,QAAO,OAAO;AAC/C,OAAOC,aAAa,MAAM,eAAe;AACzC,OAAO,qBAAqB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7B,SAASC,mBAAmBA,CAACC,KAAK,EAAE;EAAAC,EAAA;EAE9B;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEAN,SAAS,CAAC,MAAM;IACd,MAAMO,YAAY,GAAG,MAAAA,CAAA,KAAY;MAC/B,IAAI;QACF;QACA,MAAMC,IAAI,GAAG,MAAMC,OAAO,CAACC,OAAO,CAACL,KAAK,CAACM,QAAQ,CAAC;QAClD,MAAMC,KAAK,GAAG,MAAMJ,IAAI,CAACK,QAAQ,CAAC,CAAC;;QAEnC;QACA,MAAMC,OAAO,GAAG,MAAMF,KAAK,CAACG,iBAAiB,CAAC;UAAEC,UAAU,EAAE;QAAM,CAAC,CAAC;QACpE,MAAMC,MAAM,GAAGC,GAAG,CAACC,eAAe,CAAC,IAAIC,IAAI,CAAC,CAACN,OAAO,CAAC,EAAE;UAAEO,IAAI,EAAE;QAAY,CAAC,CAAC,CAAC;;QAE9E;QACA,MAAMC,MAAM,GAAGrB,aAAa,CAAC;UAC3BsB,EAAE,EAAE,sBAAsB;UAC1BC,SAAS,EAAE,uBAAuB;UAClCC,WAAW,EAAE,CAAC;YACZJ,IAAI,EAAE,OAAO;YACbK,GAAG,EAAET,MAAM;YACXU,YAAY,EAAE;UAChB,CAAC,CAAC;UACFC,aAAa,EAAE,GAAG;UAClBC,SAAS,EAAE,GAAG;UACdC,kBAAkB,EAAE,IAAI;UACxBC,iBAAiB,EAAE,CAAC;UACpBC,YAAY,EAAE,CAAC;UACfC,eAAe,EAAE,CAAC;UAClBC,aAAa,EAAE,CAAC;UAChBC,aAAa,EAAE,IAAI;UACnBC,iBAAiB,EAAE;QACrB,CAAC,CAAC;;QAEF;QACA,OAAO,MAAM;UACXd,MAAM,IAAIA,MAAM,CAACe,OAAO,CAAC,CAAC;UAC1BnB,GAAG,CAACoB,eAAe,CAACrB,MAAM,CAAC;QAC7B,CAAC;MACH,CAAC,CAAC,OAAOsB,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;MAC3D;IACF,CAAC;IAEDhC,YAAY,CAAC,CAAC;EAChB,CAAC,EAAE,CAACF,KAAK,CAACM,QAAQ,CAAC,CAAC;EAIpB,SAAS8B,MAAMA,CAAA,EAAE;IACf,IAAIC,YAAY,GAAGC,QAAQ,CAACC,oBAAoB,CAAC,QAAQ,CAAC;IAC1D,IAAIF,YAAY,EAAC;MACfF,OAAO,CAACK,GAAG,CAACH,YAAY,CAACI,MAAM,CAAC;MAChC,IAAIC,OAAO,GAAGL,YAAY,CAAC,CAAC,CAAC;MAC7B,IAAIM,GAAG,GAAGD,OAAO,CAACE,SAAS,CAAC,WAAW,CAAC;MACxC,MAAMC,IAAI,GAAGP,QAAQ,CAACQ,aAAa,CAAC,GAAG,CAAC;MACxCD,IAAI,CAACE,IAAI,GAAGJ,GAAG;MACfE,IAAI,CAACG,QAAQ,GAAGhD,KAAK,CAACiD,SAAS;MAC/BX,QAAQ,CAACY,IAAI,CAACC,WAAW,CAACN,IAAI,CAAC;MAC/BA,IAAI,CAACO,KAAK,CAAC,CAAC;MACZd,QAAQ,CAACY,IAAI,CAACG,WAAW,CAACR,IAAI,CAAC;IACjC;EACF;EAEF,oBACE/C,OAAA;IAAAwD,QAAA,gBACExD,OAAA;MAAQyD,OAAO,EAAEnB,MAAO;MAAClB,EAAE,EAAC,YAAY;MAAAoC,QAAA,EAAE;IAAU;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAC7D7D,OAAA;MAAKoB,EAAE,EAAC;IAAsB;MAAAsC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAO,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACnC,CAAC;AAEZ;AAAC1D,EAAA,CA9FQF,mBAAmB;AAAA6D,EAAA,GAAnB7D,mBAAmB;AAgG5B,eAAeA,mBAAmB;;AAIlC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AAAA,IAAA6D,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}