{"ast":null,"code":"import _regeneratorRuntime from \"/home/umang/iHub/DFS_ReactViewer/client/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/home/umang/iHub/DFS_ReactViewer/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"/home/umang/iHub/DFS_ReactViewer/client/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/umang/iHub/DFS_ReactViewer/client/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/home/umang/iHub/DFS_ReactViewer/client/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/umang/iHub/DFS_ReactViewer/client/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { BaseSource } from './basesource.js';\nvar FileReaderSource = /*#__PURE__*/function (_BaseSource) {\n  _inherits(FileReaderSource, _BaseSource);\n  var _super = _createSuper(FileReaderSource);\n  function FileReaderSource(file) {\n    var _this;\n    _classCallCheck(this, FileReaderSource);\n    _this = _super.call(this);\n    _this.file = file;\n    return _this;\n  }\n  _createClass(FileReaderSource, [{\n    key: \"fetchSlice\",\n    value: function () {\n      var _fetchSlice = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(slice, signal) {\n        var _this2 = this;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              return _context.abrupt(\"return\", new Promise(function (resolve, reject) {\n                var blob = _this2.file.slice(slice.offset, slice.offset + slice.length);\n                var reader = new FileReader();\n                reader.onload = function (event) {\n                  return resolve(event.target.result);\n                };\n                reader.onerror = reject;\n                reader.onabort = reject;\n                reader.readAsArrayBuffer(blob);\n                if (signal) {\n                  signal.addEventListener('abort', function () {\n                    return reader.abort();\n                  });\n                }\n              }));\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }));\n      function fetchSlice(_x, _x2) {\n        return _fetchSlice.apply(this, arguments);\n      }\n      return fetchSlice;\n    }()\n  }]);\n  return FileReaderSource;\n}(BaseSource);\n/**\n * Create a new source from a given file/blob.\n * @param {Blob} file The file or blob to read from.\n * @returns The constructed source\n */\nexport function makeFileReaderSource(file) {\n  return new FileReaderSource(file);\n}","map":{"version":3,"names":["BaseSource","FileReaderSource","_BaseSource","_inherits","_super","_createSuper","file","_this","_classCallCheck","call","_createClass","key","value","_fetchSlice","_asyncToGenerator","_regeneratorRuntime","mark","_callee","slice","signal","_this2","wrap","_callee$","_context","prev","next","abrupt","Promise","resolve","reject","blob","offset","length","reader","FileReader","onload","event","target","result","onerror","onabort","readAsArrayBuffer","addEventListener","abort","stop","fetchSlice","_x","_x2","apply","arguments","makeFileReaderSource"],"sources":["/home/umang/iHub/DFS_ReactViewer/client/node_modules/geotiff/dist-module/source/filereader.js"],"sourcesContent":["import { BaseSource } from './basesource.js';\n\nclass FileReaderSource extends BaseSource {\n  constructor(file) {\n    super();\n    this.file = file;\n  }\n\n  async fetchSlice(slice, signal) {\n    return new Promise((resolve, reject) => {\n      const blob = this.file.slice(slice.offset, slice.offset + slice.length);\n      const reader = new FileReader();\n      reader.onload = (event) => resolve(event.target.result);\n      reader.onerror = reject;\n      reader.onabort = reject;\n      reader.readAsArrayBuffer(blob);\n\n      if (signal) {\n        signal.addEventListener('abort', () => reader.abort());\n      }\n    });\n  }\n}\n\n/**\n * Create a new source from a given file/blob.\n * @param {Blob} file The file or blob to read from.\n * @returns The constructed source\n */\nexport function makeFileReaderSource(file) {\n  return new FileReaderSource(file);\n}\n"],"mappings":";;;;;;AAAA,SAASA,UAAU,QAAQ,iBAAiB;AAAC,IAEvCC,gBAAgB,0BAAAC,WAAA;EAAAC,SAAA,CAAAF,gBAAA,EAAAC,WAAA;EAAA,IAAAE,MAAA,GAAAC,YAAA,CAAAJ,gBAAA;EACpB,SAAAA,iBAAYK,IAAI,EAAE;IAAA,IAAAC,KAAA;IAAAC,eAAA,OAAAP,gBAAA;IAChBM,KAAA,GAAAH,MAAA,CAAAK,IAAA;IACAF,KAAA,CAAKD,IAAI,GAAGA,IAAI;IAAC,OAAAC,KAAA;EACnB;EAACG,YAAA,CAAAT,gBAAA;IAAAU,GAAA;IAAAC,KAAA;MAAA,IAAAC,WAAA,GAAAC,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAED,SAAAC,QAAiBC,KAAK,EAAEC,MAAM;QAAA,IAAAC,MAAA;QAAA,OAAAL,mBAAA,GAAAM,IAAA,UAAAC,SAAAC,QAAA;UAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;YAAA;cAAA,OAAAF,QAAA,CAAAG,MAAA,WACrB,IAAIC,OAAO,CAAC,UAACC,OAAO,EAAEC,MAAM,EAAK;gBACtC,IAAMC,IAAI,GAAGV,MAAI,CAACd,IAAI,CAACY,KAAK,CAACA,KAAK,CAACa,MAAM,EAAEb,KAAK,CAACa,MAAM,GAAGb,KAAK,CAACc,MAAM,CAAC;gBACvE,IAAMC,MAAM,GAAG,IAAIC,UAAU,CAAC,CAAC;gBAC/BD,MAAM,CAACE,MAAM,GAAG,UAACC,KAAK;kBAAA,OAAKR,OAAO,CAACQ,KAAK,CAACC,MAAM,CAACC,MAAM,CAAC;gBAAA;gBACvDL,MAAM,CAACM,OAAO,GAAGV,MAAM;gBACvBI,MAAM,CAACO,OAAO,GAAGX,MAAM;gBACvBI,MAAM,CAACQ,iBAAiB,CAACX,IAAI,CAAC;gBAE9B,IAAIX,MAAM,EAAE;kBACVA,MAAM,CAACuB,gBAAgB,CAAC,OAAO,EAAE;oBAAA,OAAMT,MAAM,CAACU,KAAK,CAAC,CAAC;kBAAA,EAAC;gBACxD;cACF,CAAC,CAAC;YAAA;YAAA;cAAA,OAAApB,QAAA,CAAAqB,IAAA;UAAA;QAAA,GAAA3B,OAAA;MAAA,CACH;MAAA,SAAA4B,WAAAC,EAAA,EAAAC,GAAA;QAAA,OAAAlC,WAAA,CAAAmC,KAAA,OAAAC,SAAA;MAAA;MAAA,OAAAJ,UAAA;IAAA;EAAA;EAAA,OAAA5C,gBAAA;AAAA,EAnB4BD,UAAU;AAsBzC;AACA;AACA;AACA;AACA;AACA,OAAO,SAASkD,oBAAoBA,CAAC5C,IAAI,EAAE;EACzC,OAAO,IAAIL,gBAAgB,CAACK,IAAI,CAAC;AACnC"},"metadata":{},"sourceType":"module","externalDependencies":[]}