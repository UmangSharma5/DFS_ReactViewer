{"ast":null,"code":"var _jsxFileName = \"/home/umang/iHub/DFS_ReactViewer/client/src/components/OpenSeadragonViewer.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport OpenSeadragon from \"openseadragon\";\nimport './OpenSeadragon.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction OpenSeadragonViewer(props) {\n  _s();\n  // useEffect(() => {\n  //   const viewer = OpenSeadragon({\n  //     id: 'openseadragon-viewer',\n  //     prefixUrl:'openseadragon-images/' ,\n  //     tileSources: [{\n  //       type: 'image',\n  //       url: props.imageUrl,\n  //       buildPyramid: false\n  //     }],\n  //     animationTime: 0.5,\n  //     blendTime: 0.1,\n  //     constrainDuringPan: true,\n  //     maxZoomPixelRatio: 2,\n  //     minZoomLevel: 1,\n  //     visibilityRatio: 1,\n  //     zoomPerScroll: 2,\n  //     showNavigator:  true,\n  //     crossOriginPolicy: \"Anonymous\"\n  //   });\n\n  //   return () => {\n  //     viewer && viewer.destroy();\n  //   };\n  // }, [props.imageUrl]);   \n\n  useEffect(() => {\n    const loadGeoTIFF = async tiffUrl => {\n      const response = await fetch(tiffUrl);\n      const arrayBuffer = await response.arrayBuffer();\n      const tiff = await GeoTIFF.fromArrayBuffer(arrayBuffer);\n      const image = await tiff.getImage();\n      const width = image.getWidth();\n      const height = image.getHeight();\n      const tileSource = new OpenSeadragon.TiledImage({\n        tileSource: {\n          height,\n          width,\n          tileSize: 256,\n          getTileUrl: (level, x, y) => {\n            const tilePromise = image.readRasters({\n              window: [x, y, 1, 1]\n            });\n            return tilePromise.then(rasters => {\n              const canvas = document.createElement(\"canvas\");\n              canvas.width = 256;\n              canvas.height = 256;\n              const ctx = canvas.getContext(\"2d\");\n              ctx.drawImage(rasters[0], 0, 0, 256, 256);\n              return canvas.toDataURL(\"image/jpeg\");\n            });\n          }\n        }\n      });\n      return tileSource;\n    };\n    const initializeViewer = async () => {\n      const tileSource = await loadGeoTIFF(props.imageUrl);\n      const viewer = OpenSeadragon({\n        id: \"openseadragon-viewer\",\n        prefixUrl: \"openseadragon-images/\",\n        tileSources: [tileSource],\n        animationTime: 0.5,\n        blendTime: 0.1,\n        constrainDuringPan: true,\n        maxZoomPixelRatio: 2,\n        minZoomLevel: 1,\n        visibilityRatio: 1,\n        zoomPerScroll: 2,\n        showNavigator: true,\n        crossOriginPolicy: \"Anonymous\"\n      });\n    };\n    initializeViewer();\n    return () => {\n      viewer && viewer.destroy();\n    };\n  }, [props.imageUrl]);\n  function takeSS() {\n    var current_view = document.getElementsByTagName(\"canvas\");\n    if (current_view) {\n      console.log(current_view.length);\n      var my_view = current_view[0];\n      var img = my_view.toDataURL(\"image/png\");\n      const link = document.createElement('a');\n      link.href = img;\n      link.download = props.imageName;\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: takeSS,\n      id: \"print-view\",\n      children: \"Print View\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"openseadragon-viewer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 7\n  }, this);\n}\n_s(OpenSeadragonViewer, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = OpenSeadragonViewer;\nexport default OpenSeadragonViewer;\nvar _c;\n$RefreshReg$(_c, \"OpenSeadragonViewer\");","map":{"version":3,"names":["React","useState","useEffect","OpenSeadragon","jsxDEV","_jsxDEV","OpenSeadragonViewer","props","_s","loadGeoTIFF","tiffUrl","response","fetch","arrayBuffer","tiff","GeoTIFF","fromArrayBuffer","image","getImage","width","getWidth","height","getHeight","tileSource","TiledImage","tileSize","getTileUrl","level","x","y","tilePromise","readRasters","window","then","rasters","canvas","document","createElement","ctx","getContext","drawImage","toDataURL","initializeViewer","imageUrl","viewer","id","prefixUrl","tileSources","animationTime","blendTime","constrainDuringPan","maxZoomPixelRatio","minZoomLevel","visibilityRatio","zoomPerScroll","showNavigator","crossOriginPolicy","destroy","takeSS","current_view","getElementsByTagName","console","log","length","my_view","img","link","href","download","imageName","body","appendChild","click","removeChild","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/umang/iHub/DFS_ReactViewer/client/src/components/OpenSeadragonViewer.js"],"sourcesContent":["import React, {useState,useEffect} from \"react\";\nimport OpenSeadragon from \"openseadragon\";\nimport './OpenSeadragon.css'\n\nfunction OpenSeadragonViewer(props) {\n  \n      // useEffect(() => {\n      //   const viewer = OpenSeadragon({\n      //     id: 'openseadragon-viewer',\n      //     prefixUrl:'openseadragon-images/' ,\n      //     tileSources: [{\n      //       type: 'image',\n      //       url: props.imageUrl,\n      //       buildPyramid: false\n      //     }],\n      //     animationTime: 0.5,\n      //     blendTime: 0.1,\n      //     constrainDuringPan: true,\n      //     maxZoomPixelRatio: 2,\n      //     minZoomLevel: 1,\n      //     visibilityRatio: 1,\n      //     zoomPerScroll: 2,\n      //     showNavigator:  true,\n      //     crossOriginPolicy: \"Anonymous\"\n      //   });\n    \n      //   return () => {\n      //     viewer && viewer.destroy();\n      //   };\n      // }, [props.imageUrl]);   \n\n      useEffect(() => {\n        const loadGeoTIFF = async (tiffUrl) => {\n          const response = await fetch(tiffUrl);\n          const arrayBuffer = await response.arrayBuffer();\n          const tiff = await GeoTIFF.fromArrayBuffer(arrayBuffer);\n          const image = await tiff.getImage();\n          const width = image.getWidth();\n          const height = image.getHeight();\n          const tileSource = new OpenSeadragon.TiledImage({\n            tileSource: {\n              height,\n              width,\n              tileSize: 256,\n              getTileUrl: (level, x, y) => {\n                const tilePromise = image.readRasters({ window: [x, y, 1, 1] });\n                return tilePromise.then((rasters) => {\n                  const canvas = document.createElement(\"canvas\");\n                  canvas.width = 256;\n                  canvas.height = 256;\n                  const ctx = canvas.getContext(\"2d\");\n                  ctx.drawImage(rasters[0], 0, 0, 256, 256);\n                  return canvas.toDataURL(\"image/jpeg\");\n                });\n              },\n            },\n          });\n          return tileSource;\n        };\n    \n        const initializeViewer = async () => {\n          const tileSource = await loadGeoTIFF(props.imageUrl);\n    \n          const viewer = OpenSeadragon({\n            id: \"openseadragon-viewer\",\n            prefixUrl: \"openseadragon-images/\",\n            tileSources: [tileSource],\n            animationTime: 0.5,\n            blendTime: 0.1,\n            constrainDuringPan: true,\n            maxZoomPixelRatio: 2,\n            minZoomLevel: 1,\n            visibilityRatio: 1,\n            zoomPerScroll: 2,\n            showNavigator: true,\n            crossOriginPolicy: \"Anonymous\",\n          });\n        };\n    \n        initializeViewer();\n    \n        return () => {\n          viewer && viewer.destroy();\n        };\n      }, [props.imageUrl]);\n\n\n\n      \n      \n      function takeSS(){\n        var current_view = document.getElementsByTagName(\"canvas\");\n        if (current_view){\n          console.log(current_view.length);\n          var my_view = current_view[0];\n          var img = my_view.toDataURL(\"image/png\");\n          const link = document.createElement('a')\n          link.href = img\n          link.download = props.imageName\n          document.body.appendChild(link)\n          link.click()\n          document.body.removeChild(link)\n        }\n      }\n\n    return ( \n      <div>\n        <button onClick={takeSS} id=\"print-view\" >Print View</button>\n        <div id=\"openseadragon-viewer\" ></div>\n      </div>\n    )\n}\n\nexport default OpenSeadragonViewer;\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}