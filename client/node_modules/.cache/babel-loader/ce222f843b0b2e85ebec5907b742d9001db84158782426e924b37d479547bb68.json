{"ast":null,"code":"var _jsxFileName = \"/home/umang/iHub/DFS_ReactViewer/client/src/components/OpenSeadragonViewer.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport OpenSeadragon from \"openseadragon\";\nimport './OpenSeadragon.css';\nimport GeoTIFF, { fromUrl, fromUrls, fromArrayBuffer, fromBlob } from 'geotiff';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction OpenSeadragonViewer(props) {\n  _s();\n  // useEffect(() => {\n  //   const viewer = OpenSeadragon({\n  //     id: 'openseadragon-viewer',\n  //     prefixUrl:'openseadragon-images/' ,\n  //     tileSources: [{\n  //       type: 'image',\n  //       url: props.imageUrl,\n  //       buildPyramid: false\n  //     }],\n  //     animationTime: 0.5,\n  //     blendTime: 0.1,\n  //     constrainDuringPan: true,\n  //     maxZoomPixelRatio: 2,\n  //     minZoomLevel: 1,\n  //     visibilityRatio: 1,\n  //     zoomPerScroll: 2,\n  //     showNavigator:  true,\n  //     crossOriginPolicy: \"Anonymous\"\n  //   });\n\n  //   return () => {\n  //     viewer && viewer.destroy();\n  //   };\n  // }, [props.imageUrl]);   \n\n  // useEffect(() => {\n  //   let viewer;\n\n  //   const loadGeoTIFF = async (tiffUrl) => {\n  //     const response = await fetch(tiffUrl);\n  //     const arrayBuffer = await response.arrayBuffer();\n  //     const tiff = await fromArrayBuffer(arrayBuffer);\n  //     const image = await tiff.getImage();\n  //     const width = image.getWidth();\n  //     const height = image.getHeight();\n  //     const tileSource = new OpenSeadragon.GeoTIFFTileSource(image, width, height);\n  //     // console.log(image);\n  //     // const tileSource = [{\n  //     //         type: 'image',\n  //     //         url: image,\n  //     //   }];\n  //     return tileSource;\n  //   };\n\n  //   const initializeViewer = async () => {\n  //     const tileSource = await loadGeoTIFF(props.imageUrl);\n\n  //     viewer = OpenSeadragon({\n  //       id: \"openseadragon-viewer\",\n  //       prefixUrl: \"openseadragon-images/\",\n  //       tileSources: [tileSource],\n  //       animationTime: 0.5,\n  //       blendTime: 0.1,\n  //       constrainDuringPan: true,\n  //       maxZoomPixelRatio: 2,\n  //       minZoomLevel: 1,\n  //       visibilityRatio: 1,\n  //       zoomPerScroll: 2,\n  //       showNavigator: true,\n  //       crossOriginPolicy: \"Anonymous\",\n  //     });\n  //   };\n\n  //   initializeViewer();\n\n  //   return () => {\n  //     viewer && viewer.destroy();\n  //   };\n  // }, [props.imageUrl]);\n\n  useEffect(() => {\n    const loadImage = async () => {\n      try {\n        // Load the GeoTIFF image\n        // const response = await fetch(props.imageUrl);\n        // const arrayBuffer = await response.arrayBuffer();\n        const tiff = await fromUrl(props.imageUrl);\n        const image = await tiff.getImage();\n        console.log(image);\n\n        // Extract image metadata\n        const width = image.getWidth();\n        const height = image.getHeight();\n\n        // Create a custom tile source for GeoTIFF\n        const tileSource = {\n          width,\n          height,\n          tileSize: 256,\n          tileOverlap: 0,\n          getTileUrl(level, x, y) {\n            return `${props.imageUrl}/${level}/${x}_${y}.png`;\n          }\n        };\n\n        // Initialize OpenSeadragon viewer with the custom tile source\n        const viewer = OpenSeadragon({\n          id: \"openseadragon-viewer\",\n          prefixUrl: \"openseadragon-images/\",\n          tileSources: tileSource,\n          animationTime: 0.5,\n          blendTime: 0.1,\n          constrainDuringPan: true,\n          maxZoomPixelRatio: 2,\n          minZoomLevel: 1,\n          visibilityRatio: 1,\n          zoomPerScroll: 2,\n          showNavigator: true,\n          crossOriginPolicy: \"Anonymous\"\n        });\n\n        // Cleanup function\n        return () => {\n          viewer && viewer.destroy();\n        };\n      } catch (error) {\n        console.error(\"Failed to load image:\", error);\n      }\n    };\n    loadImage();\n  }, [props.imageUrl]);\n  function takeSS() {\n    var current_view = document.getElementsByTagName(\"canvas\");\n    if (current_view) {\n      console.log(current_view.length);\n      var my_view = current_view[0];\n      var img = my_view.toDataURL(\"image/png\");\n      const link = document.createElement('a');\n      link.href = img;\n      link.download = props.imageName;\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: takeSS,\n      id: \"print-view\",\n      children: \"Print View\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"openseadragon-viewer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 152,\n    columnNumber: 7\n  }, this);\n}\n_s(OpenSeadragonViewer, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = OpenSeadragonViewer;\nexport default OpenSeadragonViewer;\nvar _c;\n$RefreshReg$(_c, \"OpenSeadragonViewer\");","map":{"version":3,"names":["React","useState","useEffect","OpenSeadragon","GeoTIFF","fromUrl","fromUrls","fromArrayBuffer","fromBlob","jsxDEV","_jsxDEV","OpenSeadragonViewer","props","_s","loadImage","tiff","imageUrl","image","getImage","console","log","width","getWidth","height","getHeight","tileSource","tileSize","tileOverlap","getTileUrl","level","x","y","viewer","id","prefixUrl","tileSources","animationTime","blendTime","constrainDuringPan","maxZoomPixelRatio","minZoomLevel","visibilityRatio","zoomPerScroll","showNavigator","crossOriginPolicy","destroy","error","takeSS","current_view","document","getElementsByTagName","length","my_view","img","toDataURL","link","createElement","href","download","imageName","body","appendChild","click","removeChild","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/umang/iHub/DFS_ReactViewer/client/src/components/OpenSeadragonViewer.js"],"sourcesContent":["import React, {useState,useEffect} from \"react\";\nimport OpenSeadragon from \"openseadragon\";\nimport './OpenSeadragon.css';\nimport GeoTIFF, { fromUrl, fromUrls, fromArrayBuffer, fromBlob } from 'geotiff';\n\nfunction OpenSeadragonViewer(props) {\n  \n      // useEffect(() => {\n      //   const viewer = OpenSeadragon({\n      //     id: 'openseadragon-viewer',\n      //     prefixUrl:'openseadragon-images/' ,\n      //     tileSources: [{\n      //       type: 'image',\n      //       url: props.imageUrl,\n      //       buildPyramid: false\n      //     }],\n      //     animationTime: 0.5,\n      //     blendTime: 0.1,\n      //     constrainDuringPan: true,\n      //     maxZoomPixelRatio: 2,\n      //     minZoomLevel: 1,\n      //     visibilityRatio: 1,\n      //     zoomPerScroll: 2,\n      //     showNavigator:  true,\n      //     crossOriginPolicy: \"Anonymous\"\n      //   });\n    \n      //   return () => {\n      //     viewer && viewer.destroy();\n      //   };\n      // }, [props.imageUrl]);   \n\n      // useEffect(() => {\n      //   let viewer;\n        \n      //   const loadGeoTIFF = async (tiffUrl) => {\n      //     const response = await fetch(tiffUrl);\n      //     const arrayBuffer = await response.arrayBuffer();\n      //     const tiff = await fromArrayBuffer(arrayBuffer);\n      //     const image = await tiff.getImage();\n      //     const width = image.getWidth();\n      //     const height = image.getHeight();\n      //     const tileSource = new OpenSeadragon.GeoTIFFTileSource(image, width, height);\n      //     // console.log(image);\n      //     // const tileSource = [{\n      //     //         type: 'image',\n      //     //         url: image,\n      //     //   }];\n      //     return tileSource;\n      //   };\n      \n      //   const initializeViewer = async () => {\n      //     const tileSource = await loadGeoTIFF(props.imageUrl);\n    \n      //     viewer = OpenSeadragon({\n      //       id: \"openseadragon-viewer\",\n      //       prefixUrl: \"openseadragon-images/\",\n      //       tileSources: [tileSource],\n      //       animationTime: 0.5,\n      //       blendTime: 0.1,\n      //       constrainDuringPan: true,\n      //       maxZoomPixelRatio: 2,\n      //       minZoomLevel: 1,\n      //       visibilityRatio: 1,\n      //       zoomPerScroll: 2,\n      //       showNavigator: true,\n      //       crossOriginPolicy: \"Anonymous\",\n      //     });\n      //   };\n    \n      //   initializeViewer();\n    \n      //   return () => {\n      //     viewer && viewer.destroy();\n      //   };\n      // }, [props.imageUrl]);\n\n\n      useEffect(() => {\n        const loadImage = async () => {\n          try {\n            // Load the GeoTIFF image\n            // const response = await fetch(props.imageUrl);\n            // const arrayBuffer = await response.arrayBuffer();\n            const tiff = await fromUrl(props.imageUrl);\n            const image = await tiff.getImage();\n            console.log(image);\n            \n            // Extract image metadata\n            const width = image.getWidth();\n            const height = image.getHeight();\n    \n            // Create a custom tile source for GeoTIFF\n            const tileSource = {\n              width,\n              height,\n              tileSize: 256,\n              tileOverlap: 0,\n              getTileUrl(level, x, y) {\n                return `${props.imageUrl}/${level}/${x}_${y}.png`;\n              },\n            };\n    \n            // Initialize OpenSeadragon viewer with the custom tile source\n            const viewer = OpenSeadragon({\n              id: \"openseadragon-viewer\",\n              prefixUrl: \"openseadragon-images/\",\n              tileSources: tileSource,\n              animationTime: 0.5,\n              blendTime: 0.1,\n              constrainDuringPan: true,\n              maxZoomPixelRatio: 2,\n              minZoomLevel: 1,\n              visibilityRatio: 1,\n              zoomPerScroll: 2,\n              showNavigator: true,\n              crossOriginPolicy: \"Anonymous\",\n            });\n    \n            // Cleanup function\n            return () => {\n              viewer && viewer.destroy();\n            };\n          } catch (error) {\n            console.error(\"Failed to load image:\", error);\n          }\n        };\n    \n        loadImage();\n      }, [props.imageUrl]);\n\n\n\n      \n      \n      function takeSS(){\n        var current_view = document.getElementsByTagName(\"canvas\");\n        if (current_view){\n          console.log(current_view.length);\n          var my_view = current_view[0];\n          var img = my_view.toDataURL(\"image/png\");\n          const link = document.createElement('a')\n          link.href = img\n          link.download = props.imageName\n          document.body.appendChild(link)\n          link.click()\n          document.body.removeChild(link)\n        }\n      }\n\n    return ( \n      <div>\n        <button onClick={takeSS} id=\"print-view\" >Print View</button>\n        <div id=\"openseadragon-viewer\" ></div>\n      </div>\n    )\n}\n\nexport default OpenSeadragonViewer;\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}