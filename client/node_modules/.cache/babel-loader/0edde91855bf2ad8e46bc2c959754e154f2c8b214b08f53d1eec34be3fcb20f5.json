{"ast":null,"code":"import _slicedToArray from \"/home/umang/iHub/DFS_ReactViewer/client/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _regeneratorRuntime from \"/home/umang/iHub/DFS_ReactViewer/client/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _toConsumableArray from \"/home/umang/iHub/DFS_ReactViewer/client/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _classCallCheck from \"/home/umang/iHub/DFS_ReactViewer/client/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/umang/iHub/DFS_ReactViewer/client/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _createForOfIteratorHelper from \"/home/umang/iHub/DFS_ReactViewer/client/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport { safeIfNeeded, wrap } from \"./_util/arrayIterator.mjs\";\nimport { brand, hasFloat16ArrayBrand } from \"./_util/brand.mjs\";\nimport { convertToNumber, roundToFloat16Bits } from \"./_util/converter.mjs\";\nimport { isArrayBuffer, isCanonicalIntegerIndexString, isNativeBigIntTypedArray, isNativeTypedArray, isObject, isOrdinaryArray, isOrdinaryNativeTypedArray } from \"./_util/is.mjs\";\nimport { ATTEMPTING_TO_ACCESS_DETACHED_ARRAYBUFFER, CANNOT_CONVERT_UNDEFINED_OR_NULL_TO_OBJECT, CANNOT_MIX_BIGINT_AND_OTHER_TYPES, DERIVED_CONSTRUCTOR_CREATED_TYPEDARRAY_OBJECT_WHICH_WAS_TOO_SMALL_LENGTH, ITERATOR_PROPERTY_IS_NOT_CALLABLE, OFFSET_IS_OUT_OF_BOUNDS, REDUCE_OF_EMPTY_ARRAY_WITH_NO_INITIAL_VALUE, SPECIES_CONSTRUCTOR_DIDNT_RETURN_TYPEDARRAY_OBJECT, THE_COMPARISON_FUNCTION_MUST_BE_EITHER_A_FUNCTION_OR_UNDEFINED, THIS_CONSTRUCTOR_IS_NOT_A_SUBCLASS_OF_FLOAT16ARRAY, THIS_IS_NOT_A_FLOAT16ARRAY_OBJECT } from \"./_util/messages.mjs\";\nimport { ArrayBufferIsView, ArrayPrototypeJoin, ArrayPrototypePush, ArrayPrototypeToLocaleString, NativeArrayBuffer, NativeObject, NativeProxy, NativeRangeError, NativeTypeError, NativeUint16Array, NativeWeakMap, NativeWeakSet, NumberIsNaN, ObjectDefineProperty, ObjectFreeze, ObjectHasOwn, ObjectPrototype__lookupGetter__, ReflectApply, ReflectConstruct, ReflectDefineProperty, ReflectGet, ReflectGetOwnPropertyDescriptor, ReflectHas, ReflectOwnKeys, ReflectSet, ReflectSetPrototypeOf, SymbolIterator, SymbolToStringTag, TypedArray, TypedArrayPrototype, TypedArrayPrototypeCopyWithin, TypedArrayPrototypeEntries, TypedArrayPrototypeFill, TypedArrayPrototypeGetBuffer, TypedArrayPrototypeGetByteOffset, TypedArrayPrototypeGetLength, TypedArrayPrototypeKeys, TypedArrayPrototypeReverse, TypedArrayPrototypeSet, TypedArrayPrototypeSlice, TypedArrayPrototypeSort, TypedArrayPrototypeSubarray, TypedArrayPrototypeValues, Uint16ArrayFrom, WeakMapPrototypeGet, WeakMapPrototypeHas, WeakMapPrototypeSet, WeakSetPrototypeAdd, WeakSetPrototypeHas } from \"./_util/primordials.mjs\";\nimport { IsDetachedBuffer, SpeciesConstructor, ToIntegerOrInfinity, ToLength, defaultCompare } from \"./_util/spec.mjs\";\nvar BYTES_PER_ELEMENT = 2;\n\n/** @typedef {Uint16Array & { __float16bits: never }} Float16BitsArray */\n\n/** @type {WeakMap<Float16Array, Float16BitsArray>} */\nvar float16bitsArrays = new NativeWeakMap();\n\n/**\n * @param {unknown} target\n * @returns {target is Float16Array}\n */\nexport function isFloat16Array(target) {\n  return WeakMapPrototypeHas(float16bitsArrays, target) || !ArrayBufferIsView(target) && hasFloat16ArrayBrand(target);\n}\n\n/**\n * @param {unknown} target\n * @throws {TypeError}\n * @returns {asserts target is Float16Array}\n */\nfunction assertFloat16Array(target) {\n  if (!isFloat16Array(target)) {\n    throw NativeTypeError(THIS_IS_NOT_A_FLOAT16ARRAY_OBJECT);\n  }\n}\n\n/**\n * @param {unknown} target\n * @param {number=} count\n * @throws {TypeError}\n * @returns {asserts target is Uint8Array|Uint8ClampedArray|Uint16Array|Uint32Array|Int8Array|Int16Array|Int32Array|Float16Array|Float32Array|Float64Array}\n */\nfunction assertSpeciesTypedArray(target, count) {\n  var isTargetFloat16Array = isFloat16Array(target);\n  var isTargetTypedArray = isNativeTypedArray(target);\n  if (!isTargetFloat16Array && !isTargetTypedArray) {\n    throw NativeTypeError(SPECIES_CONSTRUCTOR_DIDNT_RETURN_TYPEDARRAY_OBJECT);\n  }\n  if (typeof count === \"number\") {\n    var length;\n    if (isTargetFloat16Array) {\n      var float16bitsArray = getFloat16BitsArray(target);\n      length = TypedArrayPrototypeGetLength(float16bitsArray);\n    } else {\n      length = TypedArrayPrototypeGetLength(target);\n    }\n    if (length < count) {\n      throw NativeTypeError(DERIVED_CONSTRUCTOR_CREATED_TYPEDARRAY_OBJECT_WHICH_WAS_TOO_SMALL_LENGTH);\n    }\n  }\n  if (isNativeBigIntTypedArray(target)) {\n    throw NativeTypeError(CANNOT_MIX_BIGINT_AND_OTHER_TYPES);\n  }\n}\n\n/**\n * @param {Float16Array} float16\n * @throws {TypeError}\n * @returns {Float16BitsArray}\n */\nfunction getFloat16BitsArray(float16) {\n  var float16bitsArray = WeakMapPrototypeGet(float16bitsArrays, float16);\n  if (float16bitsArray !== undefined) {\n    var _buffer = TypedArrayPrototypeGetBuffer(float16bitsArray);\n    if (IsDetachedBuffer(_buffer)) {\n      throw NativeTypeError(ATTEMPTING_TO_ACCESS_DETACHED_ARRAYBUFFER);\n    }\n    return float16bitsArray;\n  }\n\n  // from another Float16Array instance (a different version?)\n  var buffer = /** @type {any} */float16.buffer;\n  if (IsDetachedBuffer(buffer)) {\n    throw NativeTypeError(ATTEMPTING_TO_ACCESS_DETACHED_ARRAYBUFFER);\n  }\n  var cloned = ReflectConstruct(Float16Array, [buffer, /** @type {any} */float16.byteOffset, /** @type {any} */float16.length], float16.constructor);\n  return WeakMapPrototypeGet(float16bitsArrays, cloned);\n}\n\n/**\n * @param {Float16BitsArray} float16bitsArray\n * @returns {number[]}\n */\nfunction copyToArray(float16bitsArray) {\n  var length = TypedArrayPrototypeGetLength(float16bitsArray);\n  var array = [];\n  for (var i = 0; i < length; ++i) {\n    array[i] = convertToNumber(float16bitsArray[i]);\n  }\n  return array;\n}\n\n/** @type {WeakSet<Function>} */\nvar TypedArrayPrototypeGetters = new NativeWeakSet();\nvar _iterator = _createForOfIteratorHelper(ReflectOwnKeys(TypedArrayPrototype)),\n  _step;\ntry {\n  for (_iterator.s(); !(_step = _iterator.n()).done;) {\n    var key = _step.value;\n    // @@toStringTag getter property is defined in Float16Array.prototype\n    if (key === SymbolToStringTag) {\n      continue;\n    }\n    var descriptor = ReflectGetOwnPropertyDescriptor(TypedArrayPrototype, key);\n    if (ObjectHasOwn(descriptor, \"get\") && typeof descriptor.get === \"function\") {\n      WeakSetPrototypeAdd(TypedArrayPrototypeGetters, descriptor.get);\n    }\n  }\n} catch (err) {\n  _iterator.e(err);\n} finally {\n  _iterator.f();\n}\nvar handler = ObjectFreeze( /** @type {ProxyHandler<Float16BitsArray>} */{\n  get: function get(target, key, receiver) {\n    if (isCanonicalIntegerIndexString(key) && ObjectHasOwn(target, key)) {\n      return convertToNumber(ReflectGet(target, key));\n    }\n\n    // %TypedArray%.prototype getter properties cannot called by Proxy receiver\n    if (WeakSetPrototypeHas(TypedArrayPrototypeGetters, ObjectPrototype__lookupGetter__(target, key))) {\n      return ReflectGet(target, key);\n    }\n    return ReflectGet(target, key, receiver);\n  },\n  set: function set(target, key, value, receiver) {\n    if (isCanonicalIntegerIndexString(key) && ObjectHasOwn(target, key)) {\n      return ReflectSet(target, key, roundToFloat16Bits(value));\n    }\n    return ReflectSet(target, key, value, receiver);\n  },\n  getOwnPropertyDescriptor: function getOwnPropertyDescriptor(target, key) {\n    if (isCanonicalIntegerIndexString(key) && ObjectHasOwn(target, key)) {\n      var descriptor = ReflectGetOwnPropertyDescriptor(target, key);\n      descriptor.value = convertToNumber(descriptor.value);\n      return descriptor;\n    }\n    return ReflectGetOwnPropertyDescriptor(target, key);\n  },\n  defineProperty: function defineProperty(target, key, descriptor) {\n    if (isCanonicalIntegerIndexString(key) && ObjectHasOwn(target, key) && ObjectHasOwn(descriptor, \"value\")) {\n      descriptor.value = roundToFloat16Bits(descriptor.value);\n      return ReflectDefineProperty(target, key, descriptor);\n    }\n    return ReflectDefineProperty(target, key, descriptor);\n  }\n});\nexport var Float16Array = /*#__PURE__*/function () {\n  /** @see https://tc39.es/ecma262/#sec-typedarray */\n  function Float16Array(input, _byteOffset, _length) {\n    _classCallCheck(this, Float16Array);\n    /** @type {Float16BitsArray} */\n    var float16bitsArray;\n    if (isFloat16Array(input)) {\n      float16bitsArray = ReflectConstruct(NativeUint16Array, [getFloat16BitsArray(input)], this instanceof Float16Array ? this.constructor : void 0);\n    } else if (isObject(input) && !isArrayBuffer(input)) {\n      // object without ArrayBuffer\n      /** @type {ArrayLike<unknown>} */\n      var list;\n      /** @type {number} */\n      var length;\n      if (isNativeTypedArray(input)) {\n        // TypedArray\n        list = input;\n        length = TypedArrayPrototypeGetLength(input);\n        var buffer = TypedArrayPrototypeGetBuffer(input);\n        if (IsDetachedBuffer(buffer)) {\n          throw NativeTypeError(ATTEMPTING_TO_ACCESS_DETACHED_ARRAYBUFFER);\n        }\n        if (isNativeBigIntTypedArray(input)) {\n          throw NativeTypeError(CANNOT_MIX_BIGINT_AND_OTHER_TYPES);\n        }\n        var data = new NativeArrayBuffer(length * BYTES_PER_ELEMENT);\n        float16bitsArray = ReflectConstruct(NativeUint16Array, [data], this instanceof Float16Array ? this.constructor : void 0);\n      } else {\n        var iterator = input[SymbolIterator];\n        if (iterator != null && typeof iterator !== \"function\") {\n          throw NativeTypeError(ITERATOR_PROPERTY_IS_NOT_CALLABLE);\n        }\n        if (iterator != null) {\n          // Iterable (Array)\n          // for optimization\n          if (isOrdinaryArray(input)) {\n            list = input;\n            length = input.length;\n          } else {\n            // eslint-disable-next-line no-restricted-syntax\n            list = _toConsumableArray( /** @type {Iterable<unknown>} */input);\n            length = list.length;\n          }\n        } else {\n          // ArrayLike\n          list = /** @type {ArrayLike<unknown>} */input;\n          length = ToLength(list.length);\n        }\n        float16bitsArray = ReflectConstruct(NativeUint16Array, [length], this instanceof Float16Array ? this.constructor : void 0);\n      }\n\n      // set values\n      for (var i = 0; i < length; ++i) {\n        float16bitsArray[i] = roundToFloat16Bits(list[i]);\n      }\n    } else {\n      // primitive, ArrayBuffer\n      float16bitsArray = ReflectConstruct(NativeUint16Array, arguments, this instanceof Float16Array ? this.constructor : void 0);\n    }\n\n    /** @type {Float16Array} */\n    var proxy = /** @type {any} */new NativeProxy(float16bitsArray, handler);\n\n    // proxy private storage\n    WeakMapPrototypeSet(float16bitsArrays, proxy, float16bitsArray);\n    return proxy;\n  }\n\n  /**\n   * limitation: `Object.getOwnPropertyNames(Float16Array)` or `Reflect.ownKeys(Float16Array)` include this key\n   *\n   * @see https://tc39.es/ecma262/#sec-%typedarray%.from\n   */\n  _createClass(Float16Array, [{\n    key: \"keys\",\n    value: /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.keys */\n    function keys() {\n      assertFloat16Array(this);\n      var float16bitsArray = getFloat16BitsArray(this);\n      return TypedArrayPrototypeKeys(float16bitsArray);\n    }\n\n    /**\n     * limitation: returns a object whose prototype is not `%ArrayIteratorPrototype%`\n     *\n     * @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.values\n     */\n  }, {\n    key: \"values\",\n    value: function values() {\n      assertFloat16Array(this);\n      var float16bitsArray = getFloat16BitsArray(this);\n      return wrap( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var _iterator2, _step2, val;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              // eslint-disable-next-line no-restricted-syntax\n              _iterator2 = _createForOfIteratorHelper(TypedArrayPrototypeValues(float16bitsArray));\n              _context.prev = 1;\n              _iterator2.s();\n            case 3:\n              if ((_step2 = _iterator2.n()).done) {\n                _context.next = 9;\n                break;\n              }\n              val = _step2.value;\n              _context.next = 7;\n              return convertToNumber(val);\n            case 7:\n              _context.next = 3;\n              break;\n            case 9:\n              _context.next = 14;\n              break;\n            case 11:\n              _context.prev = 11;\n              _context.t0 = _context[\"catch\"](1);\n              _iterator2.e(_context.t0);\n            case 14:\n              _context.prev = 14;\n              _iterator2.f();\n              return _context.finish(14);\n            case 17:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, null, [[1, 11, 14, 17]]);\n      })());\n    }\n\n    /**\n     * limitation: returns a object whose prototype is not `%ArrayIteratorPrototype%`\n     *\n     * @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.entries\n     */\n  }, {\n    key: \"entries\",\n    value: function entries() {\n      assertFloat16Array(this);\n      var float16bitsArray = getFloat16BitsArray(this);\n      return wrap( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var _iterator3, _step3, _step3$value, i, val;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              // eslint-disable-next-line no-restricted-syntax\n              _iterator3 = _createForOfIteratorHelper(TypedArrayPrototypeEntries(float16bitsArray));\n              _context2.prev = 1;\n              _iterator3.s();\n            case 3:\n              if ((_step3 = _iterator3.n()).done) {\n                _context2.next = 9;\n                break;\n              }\n              _step3$value = _slicedToArray(_step3.value, 2), i = _step3$value[0], val = _step3$value[1];\n              _context2.next = 7;\n              return (/** @type {[Number, number]} */[i, convertToNumber(val)]\n              );\n            case 7:\n              _context2.next = 3;\n              break;\n            case 9:\n              _context2.next = 14;\n              break;\n            case 11:\n              _context2.prev = 11;\n              _context2.t0 = _context2[\"catch\"](1);\n              _iterator3.e(_context2.t0);\n            case 14:\n              _context2.prev = 14;\n              _iterator3.f();\n              return _context2.finish(14);\n            case 17:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, null, [[1, 11, 14, 17]]);\n      })());\n    }\n\n    /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.at */\n  }, {\n    key: \"at\",\n    value: function at(index) {\n      assertFloat16Array(this);\n      var float16bitsArray = getFloat16BitsArray(this);\n      var length = TypedArrayPrototypeGetLength(float16bitsArray);\n      var relativeIndex = ToIntegerOrInfinity(index);\n      var k = relativeIndex >= 0 ? relativeIndex : length + relativeIndex;\n      if (k < 0 || k >= length) {\n        return;\n      }\n      return convertToNumber(float16bitsArray[k]);\n    }\n\n    /** @see https://tc39.es/proposal-change-array-by-copy/#sec-%typedarray%.prototype.with */\n  }, {\n    key: \"with\",\n    value: function _with(index, value) {\n      assertFloat16Array(this);\n      var float16bitsArray = getFloat16BitsArray(this);\n      var length = TypedArrayPrototypeGetLength(float16bitsArray);\n      var relativeIndex = ToIntegerOrInfinity(index);\n      var k = relativeIndex >= 0 ? relativeIndex : length + relativeIndex;\n      var number = +value;\n      if (k < 0 || k >= length) {\n        throw NativeRangeError(OFFSET_IS_OUT_OF_BOUNDS);\n      }\n\n      // don't use SpeciesConstructor\n      var uint16 = new NativeUint16Array(TypedArrayPrototypeGetBuffer(float16bitsArray), TypedArrayPrototypeGetByteOffset(float16bitsArray), TypedArrayPrototypeGetLength(float16bitsArray));\n      var cloned = new Float16Array(TypedArrayPrototypeGetBuffer(TypedArrayPrototypeSlice(uint16)));\n      var array = getFloat16BitsArray(cloned);\n      array[k] = roundToFloat16Bits(number);\n      return cloned;\n    }\n\n    /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.map */\n  }, {\n    key: \"map\",\n    value: function map(callback) {\n      assertFloat16Array(this);\n      var float16bitsArray = getFloat16BitsArray(this);\n      var length = TypedArrayPrototypeGetLength(float16bitsArray);\n      var thisArg = arguments.length <= 1 ? undefined : arguments[1];\n      var Constructor = SpeciesConstructor(float16bitsArray, Float16Array);\n\n      // for optimization\n      if (Constructor === Float16Array) {\n        var proxy = new Float16Array(length);\n        var _array = getFloat16BitsArray(proxy);\n        for (var i = 0; i < length; ++i) {\n          var val = convertToNumber(float16bitsArray[i]);\n          _array[i] = roundToFloat16Bits(ReflectApply(callback, thisArg, [val, i, this]));\n        }\n        return proxy;\n      }\n      var array = new Constructor(length);\n      assertSpeciesTypedArray(array, length);\n      for (var _i = 0; _i < length; ++_i) {\n        var _val = convertToNumber(float16bitsArray[_i]);\n        array[_i] = ReflectApply(callback, thisArg, [_val, _i, this]);\n      }\n      return (/** @type {any} */array\n      );\n    }\n\n    /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.filter */\n  }, {\n    key: \"filter\",\n    value: function filter(callback) {\n      assertFloat16Array(this);\n      var float16bitsArray = getFloat16BitsArray(this);\n      var length = TypedArrayPrototypeGetLength(float16bitsArray);\n      var thisArg = arguments.length <= 1 ? undefined : arguments[1];\n      var kept = [];\n      for (var i = 0; i < length; ++i) {\n        var val = convertToNumber(float16bitsArray[i]);\n        if (ReflectApply(callback, thisArg, [val, i, this])) {\n          ArrayPrototypePush(kept, val);\n        }\n      }\n      var Constructor = SpeciesConstructor(float16bitsArray, Float16Array);\n      var array = new Constructor(kept);\n      assertSpeciesTypedArray(array);\n      return (/** @type {any} */array\n      );\n    }\n\n    /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.reduce */\n  }, {\n    key: \"reduce\",\n    value: function reduce(callback) {\n      assertFloat16Array(this);\n      var float16bitsArray = getFloat16BitsArray(this);\n      var length = TypedArrayPrototypeGetLength(float16bitsArray);\n      if (length === 0 && (arguments.length <= 1 ? 0 : arguments.length - 1) === 0) {\n        throw NativeTypeError(REDUCE_OF_EMPTY_ARRAY_WITH_NO_INITIAL_VALUE);\n      }\n      var accumulator, start;\n      if ((arguments.length <= 1 ? 0 : arguments.length - 1) === 0) {\n        accumulator = convertToNumber(float16bitsArray[0]);\n        start = 1;\n      } else {\n        accumulator = arguments.length <= 1 ? undefined : arguments[1];\n        start = 0;\n      }\n      for (var i = start; i < length; ++i) {\n        accumulator = callback(accumulator, convertToNumber(float16bitsArray[i]), i, this);\n      }\n      return accumulator;\n    }\n\n    /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.reduceright */\n  }, {\n    key: \"reduceRight\",\n    value: function reduceRight(callback) {\n      assertFloat16Array(this);\n      var float16bitsArray = getFloat16BitsArray(this);\n      var length = TypedArrayPrototypeGetLength(float16bitsArray);\n      if (length === 0 && (arguments.length <= 1 ? 0 : arguments.length - 1) === 0) {\n        throw NativeTypeError(REDUCE_OF_EMPTY_ARRAY_WITH_NO_INITIAL_VALUE);\n      }\n      var accumulator, start;\n      if ((arguments.length <= 1 ? 0 : arguments.length - 1) === 0) {\n        accumulator = convertToNumber(float16bitsArray[length - 1]);\n        start = length - 2;\n      } else {\n        accumulator = arguments.length <= 1 ? undefined : arguments[1];\n        start = length - 1;\n      }\n      for (var i = start; i >= 0; --i) {\n        accumulator = callback(accumulator, convertToNumber(float16bitsArray[i]), i, this);\n      }\n      return accumulator;\n    }\n\n    /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.foreach */\n  }, {\n    key: \"forEach\",\n    value: function forEach(callback) {\n      assertFloat16Array(this);\n      var float16bitsArray = getFloat16BitsArray(this);\n      var length = TypedArrayPrototypeGetLength(float16bitsArray);\n      var thisArg = arguments.length <= 1 ? undefined : arguments[1];\n      for (var i = 0; i < length; ++i) {\n        ReflectApply(callback, thisArg, [convertToNumber(float16bitsArray[i]), i, this]);\n      }\n    }\n\n    /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.find */\n  }, {\n    key: \"find\",\n    value: function find(callback) {\n      assertFloat16Array(this);\n      var float16bitsArray = getFloat16BitsArray(this);\n      var length = TypedArrayPrototypeGetLength(float16bitsArray);\n      var thisArg = arguments.length <= 1 ? undefined : arguments[1];\n      for (var i = 0; i < length; ++i) {\n        var value = convertToNumber(float16bitsArray[i]);\n        if (ReflectApply(callback, thisArg, [value, i, this])) {\n          return value;\n        }\n      }\n    }\n\n    /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.findindex */\n  }, {\n    key: \"findIndex\",\n    value: function findIndex(callback) {\n      assertFloat16Array(this);\n      var float16bitsArray = getFloat16BitsArray(this);\n      var length = TypedArrayPrototypeGetLength(float16bitsArray);\n      var thisArg = arguments.length <= 1 ? undefined : arguments[1];\n      for (var i = 0; i < length; ++i) {\n        var value = convertToNumber(float16bitsArray[i]);\n        if (ReflectApply(callback, thisArg, [value, i, this])) {\n          return i;\n        }\n      }\n      return -1;\n    }\n\n    /** @see https://tc39.es/proposal-array-find-from-last/index.html#sec-%typedarray%.prototype.findlast */\n  }, {\n    key: \"findLast\",\n    value: function findLast(callback) {\n      assertFloat16Array(this);\n      var float16bitsArray = getFloat16BitsArray(this);\n      var length = TypedArrayPrototypeGetLength(float16bitsArray);\n      var thisArg = arguments.length <= 1 ? undefined : arguments[1];\n      for (var i = length - 1; i >= 0; --i) {\n        var value = convertToNumber(float16bitsArray[i]);\n        if (ReflectApply(callback, thisArg, [value, i, this])) {\n          return value;\n        }\n      }\n    }\n\n    /** @see https://tc39.es/proposal-array-find-from-last/index.html#sec-%typedarray%.prototype.findlastindex */\n  }, {\n    key: \"findLastIndex\",\n    value: function findLastIndex(callback) {\n      assertFloat16Array(this);\n      var float16bitsArray = getFloat16BitsArray(this);\n      var length = TypedArrayPrototypeGetLength(float16bitsArray);\n      var thisArg = arguments.length <= 1 ? undefined : arguments[1];\n      for (var i = length - 1; i >= 0; --i) {\n        var value = convertToNumber(float16bitsArray[i]);\n        if (ReflectApply(callback, thisArg, [value, i, this])) {\n          return i;\n        }\n      }\n      return -1;\n    }\n\n    /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.every */\n  }, {\n    key: \"every\",\n    value: function every(callback) {\n      assertFloat16Array(this);\n      var float16bitsArray = getFloat16BitsArray(this);\n      var length = TypedArrayPrototypeGetLength(float16bitsArray);\n      var thisArg = arguments.length <= 1 ? undefined : arguments[1];\n      for (var i = 0; i < length; ++i) {\n        if (!ReflectApply(callback, thisArg, [convertToNumber(float16bitsArray[i]), i, this])) {\n          return false;\n        }\n      }\n      return true;\n    }\n\n    /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.some */\n  }, {\n    key: \"some\",\n    value: function some(callback) {\n      assertFloat16Array(this);\n      var float16bitsArray = getFloat16BitsArray(this);\n      var length = TypedArrayPrototypeGetLength(float16bitsArray);\n      var thisArg = arguments.length <= 1 ? undefined : arguments[1];\n      for (var i = 0; i < length; ++i) {\n        if (ReflectApply(callback, thisArg, [convertToNumber(float16bitsArray[i]), i, this])) {\n          return true;\n        }\n      }\n      return false;\n    }\n\n    /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.set */\n  }, {\n    key: \"set\",\n    value: function set(input) {\n      assertFloat16Array(this);\n      var float16bitsArray = getFloat16BitsArray(this);\n      var targetOffset = ToIntegerOrInfinity(arguments.length <= 1 ? undefined : arguments[1]);\n      if (targetOffset < 0) {\n        throw NativeRangeError(OFFSET_IS_OUT_OF_BOUNDS);\n      }\n      if (input == null) {\n        throw NativeTypeError(CANNOT_CONVERT_UNDEFINED_OR_NULL_TO_OBJECT);\n      }\n      if (isNativeBigIntTypedArray(input)) {\n        throw NativeTypeError(CANNOT_MIX_BIGINT_AND_OTHER_TYPES);\n      }\n\n      // for optimization\n      if (isFloat16Array(input)) {\n        // peel off Proxy\n        return TypedArrayPrototypeSet(getFloat16BitsArray(this), getFloat16BitsArray(input), targetOffset);\n      }\n      if (isNativeTypedArray(input)) {\n        var buffer = TypedArrayPrototypeGetBuffer(input);\n        if (IsDetachedBuffer(buffer)) {\n          throw NativeTypeError(ATTEMPTING_TO_ACCESS_DETACHED_ARRAYBUFFER);\n        }\n      }\n      var targetLength = TypedArrayPrototypeGetLength(float16bitsArray);\n      var src = NativeObject(input);\n      var srcLength = ToLength(src.length);\n      if (targetOffset === Infinity || srcLength + targetOffset > targetLength) {\n        throw NativeRangeError(OFFSET_IS_OUT_OF_BOUNDS);\n      }\n      for (var i = 0; i < srcLength; ++i) {\n        float16bitsArray[i + targetOffset] = roundToFloat16Bits(src[i]);\n      }\n    }\n\n    /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.reverse */\n  }, {\n    key: \"reverse\",\n    value: function reverse() {\n      assertFloat16Array(this);\n      var float16bitsArray = getFloat16BitsArray(this);\n      TypedArrayPrototypeReverse(float16bitsArray);\n      return this;\n    }\n\n    /** @see https://tc39.es/proposal-change-array-by-copy/#sec-%typedarray%.prototype.toReversed */\n  }, {\n    key: \"toReversed\",\n    value: function toReversed() {\n      assertFloat16Array(this);\n      var float16bitsArray = getFloat16BitsArray(this);\n\n      // don't use SpeciesConstructor\n      var uint16 = new NativeUint16Array(TypedArrayPrototypeGetBuffer(float16bitsArray), TypedArrayPrototypeGetByteOffset(float16bitsArray), TypedArrayPrototypeGetLength(float16bitsArray));\n      var cloned = new Float16Array(TypedArrayPrototypeGetBuffer(TypedArrayPrototypeSlice(uint16)));\n      var clonedFloat16bitsArray = getFloat16BitsArray(cloned);\n      TypedArrayPrototypeReverse(clonedFloat16bitsArray);\n      return cloned;\n    }\n\n    /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.fill */\n  }, {\n    key: \"fill\",\n    value: function fill(value) {\n      assertFloat16Array(this);\n      var float16bitsArray = getFloat16BitsArray(this);\n      for (var _len = arguments.length, opts = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        opts[_key - 1] = arguments[_key];\n      }\n      TypedArrayPrototypeFill.apply(void 0, [float16bitsArray, roundToFloat16Bits(value)].concat(_toConsumableArray(safeIfNeeded(opts))));\n      return this;\n    }\n\n    /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.copywithin */\n  }, {\n    key: \"copyWithin\",\n    value: function copyWithin(target, start) {\n      assertFloat16Array(this);\n      var float16bitsArray = getFloat16BitsArray(this);\n      for (var _len2 = arguments.length, opts = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\n        opts[_key2 - 2] = arguments[_key2];\n      }\n      TypedArrayPrototypeCopyWithin.apply(void 0, [float16bitsArray, target, start].concat(_toConsumableArray(safeIfNeeded(opts))));\n      return this;\n    }\n\n    /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.sort */\n  }, {\n    key: \"sort\",\n    value: function sort(compareFn) {\n      assertFloat16Array(this);\n      var float16bitsArray = getFloat16BitsArray(this);\n      var sortCompare = compareFn !== undefined ? compareFn : defaultCompare;\n      TypedArrayPrototypeSort(float16bitsArray, function (x, y) {\n        return sortCompare(convertToNumber(x), convertToNumber(y));\n      });\n      return this;\n    }\n\n    /** @see https://tc39.es/proposal-change-array-by-copy/#sec-%typedarray%.prototype.toSorted */\n  }, {\n    key: \"toSorted\",\n    value: function toSorted(compareFn) {\n      assertFloat16Array(this);\n      var float16bitsArray = getFloat16BitsArray(this);\n      if (compareFn !== undefined && typeof compareFn !== \"function\") {\n        throw new NativeTypeError(THE_COMPARISON_FUNCTION_MUST_BE_EITHER_A_FUNCTION_OR_UNDEFINED);\n      }\n      var sortCompare = compareFn !== undefined ? compareFn : defaultCompare;\n\n      // don't use SpeciesConstructor\n      var uint16 = new NativeUint16Array(TypedArrayPrototypeGetBuffer(float16bitsArray), TypedArrayPrototypeGetByteOffset(float16bitsArray), TypedArrayPrototypeGetLength(float16bitsArray));\n      var cloned = new Float16Array(TypedArrayPrototypeGetBuffer(TypedArrayPrototypeSlice(uint16)));\n      var clonedFloat16bitsArray = getFloat16BitsArray(cloned);\n      TypedArrayPrototypeSort(clonedFloat16bitsArray, function (x, y) {\n        return sortCompare(convertToNumber(x), convertToNumber(y));\n      });\n      return cloned;\n    }\n\n    /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.slice */\n  }, {\n    key: \"slice\",\n    value: function slice(start, end) {\n      assertFloat16Array(this);\n      var float16bitsArray = getFloat16BitsArray(this);\n      var Constructor = SpeciesConstructor(float16bitsArray, Float16Array);\n\n      // for optimization\n      if (Constructor === Float16Array) {\n        var uint16 = new NativeUint16Array(TypedArrayPrototypeGetBuffer(float16bitsArray), TypedArrayPrototypeGetByteOffset(float16bitsArray), TypedArrayPrototypeGetLength(float16bitsArray));\n        return new Float16Array(TypedArrayPrototypeGetBuffer(TypedArrayPrototypeSlice(uint16, start, end)));\n      }\n      var length = TypedArrayPrototypeGetLength(float16bitsArray);\n      var relativeStart = ToIntegerOrInfinity(start);\n      var relativeEnd = end === undefined ? length : ToIntegerOrInfinity(end);\n      var k;\n      if (relativeStart === -Infinity) {\n        k = 0;\n      } else if (relativeStart < 0) {\n        k = length + relativeStart > 0 ? length + relativeStart : 0;\n      } else {\n        k = length < relativeStart ? length : relativeStart;\n      }\n      var final;\n      if (relativeEnd === -Infinity) {\n        final = 0;\n      } else if (relativeEnd < 0) {\n        final = length + relativeEnd > 0 ? length + relativeEnd : 0;\n      } else {\n        final = length < relativeEnd ? length : relativeEnd;\n      }\n      var count = final - k > 0 ? final - k : 0;\n      var array = new Constructor(count);\n      assertSpeciesTypedArray(array, count);\n      if (count === 0) {\n        return array;\n      }\n      var buffer = TypedArrayPrototypeGetBuffer(float16bitsArray);\n      if (IsDetachedBuffer(buffer)) {\n        throw NativeTypeError(ATTEMPTING_TO_ACCESS_DETACHED_ARRAYBUFFER);\n      }\n      var n = 0;\n      while (k < final) {\n        array[n] = convertToNumber(float16bitsArray[k]);\n        ++k;\n        ++n;\n      }\n      return (/** @type {any} */array\n      );\n    }\n\n    /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.subarray */\n  }, {\n    key: \"subarray\",\n    value: function subarray(begin, end) {\n      assertFloat16Array(this);\n      var float16bitsArray = getFloat16BitsArray(this);\n      var Constructor = SpeciesConstructor(float16bitsArray, Float16Array);\n      var uint16 = new NativeUint16Array(TypedArrayPrototypeGetBuffer(float16bitsArray), TypedArrayPrototypeGetByteOffset(float16bitsArray), TypedArrayPrototypeGetLength(float16bitsArray));\n      var uint16Subarray = TypedArrayPrototypeSubarray(uint16, begin, end);\n      var array = new Constructor(TypedArrayPrototypeGetBuffer(uint16Subarray), TypedArrayPrototypeGetByteOffset(uint16Subarray), TypedArrayPrototypeGetLength(uint16Subarray));\n      assertSpeciesTypedArray(array);\n      return (/** @type {any} */array\n      );\n    }\n\n    /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.indexof */\n  }, {\n    key: \"indexOf\",\n    value: function indexOf(element) {\n      assertFloat16Array(this);\n      var float16bitsArray = getFloat16BitsArray(this);\n      var length = TypedArrayPrototypeGetLength(float16bitsArray);\n      var from = ToIntegerOrInfinity(arguments.length <= 1 ? undefined : arguments[1]);\n      if (from === Infinity) {\n        return -1;\n      }\n      if (from < 0) {\n        from += length;\n        if (from < 0) {\n          from = 0;\n        }\n      }\n      for (var i = from; i < length; ++i) {\n        if (ObjectHasOwn(float16bitsArray, i) && convertToNumber(float16bitsArray[i]) === element) {\n          return i;\n        }\n      }\n      return -1;\n    }\n\n    /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.lastindexof */\n  }, {\n    key: \"lastIndexOf\",\n    value: function lastIndexOf(element) {\n      assertFloat16Array(this);\n      var float16bitsArray = getFloat16BitsArray(this);\n      var length = TypedArrayPrototypeGetLength(float16bitsArray);\n      var from = (arguments.length <= 1 ? 0 : arguments.length - 1) >= 1 ? ToIntegerOrInfinity(arguments.length <= 1 ? undefined : arguments[1]) : length - 1;\n      if (from === -Infinity) {\n        return -1;\n      }\n      if (from >= 0) {\n        from = from < length - 1 ? from : length - 1;\n      } else {\n        from += length;\n      }\n      for (var i = from; i >= 0; --i) {\n        if (ObjectHasOwn(float16bitsArray, i) && convertToNumber(float16bitsArray[i]) === element) {\n          return i;\n        }\n      }\n      return -1;\n    }\n\n    /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.includes */\n  }, {\n    key: \"includes\",\n    value: function includes(element) {\n      assertFloat16Array(this);\n      var float16bitsArray = getFloat16BitsArray(this);\n      var length = TypedArrayPrototypeGetLength(float16bitsArray);\n      var from = ToIntegerOrInfinity(arguments.length <= 1 ? undefined : arguments[1]);\n      if (from === Infinity) {\n        return false;\n      }\n      if (from < 0) {\n        from += length;\n        if (from < 0) {\n          from = 0;\n        }\n      }\n      var isNaN = NumberIsNaN(element);\n      for (var i = from; i < length; ++i) {\n        var value = convertToNumber(float16bitsArray[i]);\n        if (isNaN && NumberIsNaN(value)) {\n          return true;\n        }\n        if (value === element) {\n          return true;\n        }\n      }\n      return false;\n    }\n\n    /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.join */\n  }, {\n    key: \"join\",\n    value: function join(separator) {\n      assertFloat16Array(this);\n      var float16bitsArray = getFloat16BitsArray(this);\n      var array = copyToArray(float16bitsArray);\n      return ArrayPrototypeJoin(array, separator);\n    }\n\n    /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.tolocalestring */\n  }, {\n    key: \"toLocaleString\",\n    value: function toLocaleString() {\n      assertFloat16Array(this);\n      var float16bitsArray = getFloat16BitsArray(this);\n      var array = copyToArray(float16bitsArray);\n      for (var _len3 = arguments.length, opts = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        opts[_key3] = arguments[_key3];\n      }\n      return ArrayPrototypeToLocaleString.apply(void 0, [array].concat(_toConsumableArray(safeIfNeeded(opts))));\n    }\n\n    /** @see https://tc39.es/ecma262/#sec-get-%typedarray%.prototype-@@tostringtag */\n  }, {\n    key: SymbolToStringTag,\n    get: function get() {\n      if (isFloat16Array(this)) {\n        return (/** @type {any} */\"Float16Array\"\n        );\n      }\n    }\n  }], [{\n    key: \"from\",\n    value: function from(src) {\n      var Constructor = this;\n      if (!ReflectHas(Constructor, brand)) {\n        throw NativeTypeError(THIS_CONSTRUCTOR_IS_NOT_A_SUBCLASS_OF_FLOAT16ARRAY);\n      }\n\n      // for optimization\n      if (Constructor === Float16Array) {\n        if (isFloat16Array(src) && (arguments.length <= 1 ? 0 : arguments.length - 1) === 0) {\n          var float16bitsArray = getFloat16BitsArray(src);\n          var uint16 = new NativeUint16Array(TypedArrayPrototypeGetBuffer(float16bitsArray), TypedArrayPrototypeGetByteOffset(float16bitsArray), TypedArrayPrototypeGetLength(float16bitsArray));\n          return new Float16Array(TypedArrayPrototypeGetBuffer(TypedArrayPrototypeSlice(uint16)));\n        }\n        if ((arguments.length <= 1 ? 0 : arguments.length - 1) === 0) {\n          return new Float16Array(TypedArrayPrototypeGetBuffer(Uint16ArrayFrom(src, roundToFloat16Bits)));\n        }\n        var mapFunc = arguments.length <= 1 ? undefined : arguments[1];\n        var thisArg = arguments.length <= 2 ? undefined : arguments[2];\n        return new Float16Array(TypedArrayPrototypeGetBuffer(Uint16ArrayFrom(src, function (val) {\n          for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {\n            args[_key4 - 1] = arguments[_key4];\n          }\n          return roundToFloat16Bits(ReflectApply(mapFunc, this, [val].concat(_toConsumableArray(safeIfNeeded(args)))));\n        }, thisArg)));\n      }\n\n      /** @type {ArrayLike<unknown>} */\n      var list;\n      /** @type {number} */\n      var length;\n      var iterator = src[SymbolIterator];\n      if (iterator != null && typeof iterator !== \"function\") {\n        throw NativeTypeError(ITERATOR_PROPERTY_IS_NOT_CALLABLE);\n      }\n      if (iterator != null) {\n        // Iterable (TypedArray, Array)\n        // for optimization\n        if (isOrdinaryArray(src)) {\n          list = src;\n          length = src.length;\n        } else if (isOrdinaryNativeTypedArray(src)) {\n          list = src;\n          length = TypedArrayPrototypeGetLength(src);\n        } else {\n          // eslint-disable-next-line no-restricted-syntax\n          list = _toConsumableArray(src);\n          length = list.length;\n        }\n      } else {\n        // ArrayLike\n        if (src == null) {\n          throw NativeTypeError(CANNOT_CONVERT_UNDEFINED_OR_NULL_TO_OBJECT);\n        }\n        list = NativeObject(src);\n        length = ToLength(list.length);\n      }\n      var array = new Constructor(length);\n      if ((arguments.length <= 1 ? 0 : arguments.length - 1) === 0) {\n        for (var i = 0; i < length; ++i) {\n          array[i] = /** @type {number} */list[i];\n        }\n      } else {\n        var _mapFunc = arguments.length <= 1 ? undefined : arguments[1];\n        var _thisArg = arguments.length <= 2 ? undefined : arguments[2];\n        for (var _i2 = 0; _i2 < length; ++_i2) {\n          array[_i2] = ReflectApply(_mapFunc, _thisArg, [list[_i2], _i2]);\n        }\n      }\n      return array;\n    }\n\n    /**\n     * limitation: `Object.getOwnPropertyNames(Float16Array)` or `Reflect.ownKeys(Float16Array)` include this key\n     *\n     * @see https://tc39.es/ecma262/#sec-%typedarray%.of\n     */\n  }, {\n    key: \"of\",\n    value: function of() {\n      var Constructor = this;\n      if (!ReflectHas(Constructor, brand)) {\n        throw NativeTypeError(THIS_CONSTRUCTOR_IS_NOT_A_SUBCLASS_OF_FLOAT16ARRAY);\n      }\n      var length = arguments.length;\n\n      // for optimization\n      if (Constructor === Float16Array) {\n        var proxy = new Float16Array(length);\n        var float16bitsArray = getFloat16BitsArray(proxy);\n        for (var i = 0; i < length; ++i) {\n          float16bitsArray[i] = roundToFloat16Bits(i < 0 || arguments.length <= i ? undefined : arguments[i]);\n        }\n        return proxy;\n      }\n      var array = new Constructor(length);\n      for (var _i3 = 0; _i3 < length; ++_i3) {\n        array[_i3] = _i3 < 0 || arguments.length <= _i3 ? undefined : arguments[_i3];\n      }\n      return array;\n    }\n  }]);\n  return Float16Array;\n}();\n\n/** @see https://tc39.es/ecma262/#sec-typedarray.bytes_per_element */\nObjectDefineProperty(Float16Array, \"BYTES_PER_ELEMENT\", {\n  value: BYTES_PER_ELEMENT\n});\n\n// limitation: It is peaked by `Object.getOwnPropertySymbols(Float16Array)` and `Reflect.ownKeys(Float16Array)`\nObjectDefineProperty(Float16Array, brand, {});\n\n/** @see https://tc39.es/ecma262/#sec-properties-of-the-typedarray-constructors */\nReflectSetPrototypeOf(Float16Array, TypedArray);\nvar Float16ArrayPrototype = Float16Array.prototype;\n\n/** @see https://tc39.es/ecma262/#sec-typedarray.prototype.bytes_per_element */\nObjectDefineProperty(Float16ArrayPrototype, \"BYTES_PER_ELEMENT\", {\n  value: BYTES_PER_ELEMENT\n});\n\n/** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype-@@iterator */\nObjectDefineProperty(Float16ArrayPrototype, SymbolIterator, {\n  value: Float16ArrayPrototype.values,\n  writable: true,\n  configurable: true\n});\nReflectSetPrototypeOf(Float16ArrayPrototype, TypedArrayPrototype);","map":{"version":3,"names":["safeIfNeeded","wrap","brand","hasFloat16ArrayBrand","convertToNumber","roundToFloat16Bits","isArrayBuffer","isCanonicalIntegerIndexString","isNativeBigIntTypedArray","isNativeTypedArray","isObject","isOrdinaryArray","isOrdinaryNativeTypedArray","ATTEMPTING_TO_ACCESS_DETACHED_ARRAYBUFFER","CANNOT_CONVERT_UNDEFINED_OR_NULL_TO_OBJECT","CANNOT_MIX_BIGINT_AND_OTHER_TYPES","DERIVED_CONSTRUCTOR_CREATED_TYPEDARRAY_OBJECT_WHICH_WAS_TOO_SMALL_LENGTH","ITERATOR_PROPERTY_IS_NOT_CALLABLE","OFFSET_IS_OUT_OF_BOUNDS","REDUCE_OF_EMPTY_ARRAY_WITH_NO_INITIAL_VALUE","SPECIES_CONSTRUCTOR_DIDNT_RETURN_TYPEDARRAY_OBJECT","THE_COMPARISON_FUNCTION_MUST_BE_EITHER_A_FUNCTION_OR_UNDEFINED","THIS_CONSTRUCTOR_IS_NOT_A_SUBCLASS_OF_FLOAT16ARRAY","THIS_IS_NOT_A_FLOAT16ARRAY_OBJECT","ArrayBufferIsView","ArrayPrototypeJoin","ArrayPrototypePush","ArrayPrototypeToLocaleString","NativeArrayBuffer","NativeObject","NativeProxy","NativeRangeError","NativeTypeError","NativeUint16Array","NativeWeakMap","NativeWeakSet","NumberIsNaN","ObjectDefineProperty","ObjectFreeze","ObjectHasOwn","ObjectPrototype__lookupGetter__","ReflectApply","ReflectConstruct","ReflectDefineProperty","ReflectGet","ReflectGetOwnPropertyDescriptor","ReflectHas","ReflectOwnKeys","ReflectSet","ReflectSetPrototypeOf","SymbolIterator","SymbolToStringTag","TypedArray","TypedArrayPrototype","TypedArrayPrototypeCopyWithin","TypedArrayPrototypeEntries","TypedArrayPrototypeFill","TypedArrayPrototypeGetBuffer","TypedArrayPrototypeGetByteOffset","TypedArrayPrototypeGetLength","TypedArrayPrototypeKeys","TypedArrayPrototypeReverse","TypedArrayPrototypeSet","TypedArrayPrototypeSlice","TypedArrayPrototypeSort","TypedArrayPrototypeSubarray","TypedArrayPrototypeValues","Uint16ArrayFrom","WeakMapPrototypeGet","WeakMapPrototypeHas","WeakMapPrototypeSet","WeakSetPrototypeAdd","WeakSetPrototypeHas","IsDetachedBuffer","SpeciesConstructor","ToIntegerOrInfinity","ToLength","defaultCompare","BYTES_PER_ELEMENT","float16bitsArrays","isFloat16Array","target","assertFloat16Array","assertSpeciesTypedArray","count","isTargetFloat16Array","isTargetTypedArray","length","float16bitsArray","getFloat16BitsArray","float16","undefined","buffer","cloned","Float16Array","byteOffset","constructor","copyToArray","array","i","TypedArrayPrototypeGetters","_iterator","_createForOfIteratorHelper","_step","s","n","done","key","value","descriptor","get","err","e","f","handler","receiver","set","getOwnPropertyDescriptor","defineProperty","input","_byteOffset","_length","_classCallCheck","list","data","iterator","_toConsumableArray","arguments","proxy","_createClass","keys","values","_regeneratorRuntime","mark","_callee","_iterator2","_step2","val","_callee$","_context","prev","next","t0","finish","stop","entries","_callee2","_iterator3","_step3","_step3$value","_callee2$","_context2","_slicedToArray","at","index","relativeIndex","k","_with","number","uint16","map","callback","thisArg","Constructor","filter","kept","reduce","accumulator","start","reduceRight","forEach","find","findIndex","findLast","findLastIndex","every","some","targetOffset","targetLength","src","srcLength","Infinity","reverse","toReversed","clonedFloat16bitsArray","fill","_len","opts","Array","_key","apply","concat","copyWithin","_len2","_key2","sort","compareFn","sortCompare","x","y","toSorted","slice","end","relativeStart","relativeEnd","final","subarray","begin","uint16Subarray","indexOf","element","from","lastIndexOf","includes","isNaN","join","separator","toLocaleString","_len3","_key3","mapFunc","_len4","args","_key4","of","Float16ArrayPrototype","prototype","writable","configurable"],"sources":["/home/umang/iHub/DFS_ReactViewer/client/node_modules/@petamoriken/float16/src/Float16Array.mjs"],"sourcesContent":["import { safeIfNeeded, wrap } from \"./_util/arrayIterator.mjs\";\nimport { brand, hasFloat16ArrayBrand } from \"./_util/brand.mjs\";\nimport { convertToNumber, roundToFloat16Bits } from \"./_util/converter.mjs\";\nimport {\n  isArrayBuffer,\n  isCanonicalIntegerIndexString,\n  isNativeBigIntTypedArray,\n  isNativeTypedArray,\n  isObject,\n  isOrdinaryArray,\n  isOrdinaryNativeTypedArray,\n} from \"./_util/is.mjs\";\nimport {\n  ATTEMPTING_TO_ACCESS_DETACHED_ARRAYBUFFER,\n  CANNOT_CONVERT_UNDEFINED_OR_NULL_TO_OBJECT,\n  CANNOT_MIX_BIGINT_AND_OTHER_TYPES,\n  DERIVED_CONSTRUCTOR_CREATED_TYPEDARRAY_OBJECT_WHICH_WAS_TOO_SMALL_LENGTH,\n  ITERATOR_PROPERTY_IS_NOT_CALLABLE,\n  OFFSET_IS_OUT_OF_BOUNDS,\n  REDUCE_OF_EMPTY_ARRAY_WITH_NO_INITIAL_VALUE,\n  SPECIES_CONSTRUCTOR_DIDNT_RETURN_TYPEDARRAY_OBJECT,\n  THE_COMPARISON_FUNCTION_MUST_BE_EITHER_A_FUNCTION_OR_UNDEFINED,\n  THIS_CONSTRUCTOR_IS_NOT_A_SUBCLASS_OF_FLOAT16ARRAY,\n  THIS_IS_NOT_A_FLOAT16ARRAY_OBJECT,\n} from \"./_util/messages.mjs\";\nimport {\n  ArrayBufferIsView,\n  ArrayPrototypeJoin,\n  ArrayPrototypePush,\n  ArrayPrototypeToLocaleString,\n  NativeArrayBuffer,\n  NativeObject,\n  NativeProxy,\n  NativeRangeError,\n  NativeTypeError,\n  NativeUint16Array,\n  NativeWeakMap,\n  NativeWeakSet,\n  NumberIsNaN,\n  ObjectDefineProperty,\n  ObjectFreeze,\n  ObjectHasOwn,\n  ObjectPrototype__lookupGetter__,\n  ReflectApply,\n  ReflectConstruct,\n  ReflectDefineProperty,\n  ReflectGet,\n  ReflectGetOwnPropertyDescriptor,\n  ReflectHas,\n  ReflectOwnKeys,\n  ReflectSet,\n  ReflectSetPrototypeOf,\n  SymbolIterator,\n  SymbolToStringTag,\n  TypedArray,\n  TypedArrayPrototype,\n  TypedArrayPrototypeCopyWithin,\n  TypedArrayPrototypeEntries,\n  TypedArrayPrototypeFill,\n  TypedArrayPrototypeGetBuffer,\n  TypedArrayPrototypeGetByteOffset,\n  TypedArrayPrototypeGetLength,\n  TypedArrayPrototypeKeys,\n  TypedArrayPrototypeReverse,\n  TypedArrayPrototypeSet,\n  TypedArrayPrototypeSlice,\n  TypedArrayPrototypeSort,\n  TypedArrayPrototypeSubarray,\n  TypedArrayPrototypeValues,\n  Uint16ArrayFrom,\n  WeakMapPrototypeGet,\n  WeakMapPrototypeHas,\n  WeakMapPrototypeSet,\n  WeakSetPrototypeAdd,\n  WeakSetPrototypeHas,\n} from \"./_util/primordials.mjs\";\nimport {\n  IsDetachedBuffer,\n  SpeciesConstructor,\n  ToIntegerOrInfinity,\n  ToLength,\n  defaultCompare,\n} from \"./_util/spec.mjs\";\n\nconst BYTES_PER_ELEMENT = 2;\n\n/** @typedef {Uint16Array & { __float16bits: never }} Float16BitsArray */\n\n/** @type {WeakMap<Float16Array, Float16BitsArray>} */\nconst float16bitsArrays = new NativeWeakMap();\n\n/**\n * @param {unknown} target\n * @returns {target is Float16Array}\n */\nexport function isFloat16Array(target) {\n  return WeakMapPrototypeHas(float16bitsArrays, target) ||\n    (!ArrayBufferIsView(target) && hasFloat16ArrayBrand(target));\n}\n\n/**\n * @param {unknown} target\n * @throws {TypeError}\n * @returns {asserts target is Float16Array}\n */\nfunction assertFloat16Array(target) {\n  if (!isFloat16Array(target)) {\n    throw NativeTypeError(THIS_IS_NOT_A_FLOAT16ARRAY_OBJECT);\n  }\n}\n\n/**\n * @param {unknown} target\n * @param {number=} count\n * @throws {TypeError}\n * @returns {asserts target is Uint8Array|Uint8ClampedArray|Uint16Array|Uint32Array|Int8Array|Int16Array|Int32Array|Float16Array|Float32Array|Float64Array}\n */\nfunction assertSpeciesTypedArray(target, count) {\n  const isTargetFloat16Array = isFloat16Array(target);\n  const isTargetTypedArray = isNativeTypedArray(target);\n\n  if (!isTargetFloat16Array && !isTargetTypedArray) {\n    throw NativeTypeError(SPECIES_CONSTRUCTOR_DIDNT_RETURN_TYPEDARRAY_OBJECT);\n  }\n\n  if (typeof count === \"number\") {\n    let length;\n    if (isTargetFloat16Array) {\n      const float16bitsArray = getFloat16BitsArray(target);\n      length = TypedArrayPrototypeGetLength(float16bitsArray);\n    } else {\n      length = TypedArrayPrototypeGetLength(target);\n    }\n\n    if (length < count) {\n      throw NativeTypeError(\n        DERIVED_CONSTRUCTOR_CREATED_TYPEDARRAY_OBJECT_WHICH_WAS_TOO_SMALL_LENGTH\n      );\n    }\n  }\n\n  if (isNativeBigIntTypedArray(target)) {\n    throw NativeTypeError(CANNOT_MIX_BIGINT_AND_OTHER_TYPES);\n  }\n}\n\n/**\n * @param {Float16Array} float16\n * @throws {TypeError}\n * @returns {Float16BitsArray}\n */\nfunction getFloat16BitsArray(float16) {\n  const float16bitsArray = WeakMapPrototypeGet(float16bitsArrays, float16);\n  if (float16bitsArray !== undefined) {\n    const buffer = TypedArrayPrototypeGetBuffer(float16bitsArray);\n\n    if (IsDetachedBuffer(buffer)) {\n      throw NativeTypeError(ATTEMPTING_TO_ACCESS_DETACHED_ARRAYBUFFER);\n    }\n\n    return float16bitsArray;\n  }\n\n  // from another Float16Array instance (a different version?)\n  const buffer = /** @type {any} */ (float16).buffer;\n\n  if (IsDetachedBuffer(buffer)) {\n    throw NativeTypeError(ATTEMPTING_TO_ACCESS_DETACHED_ARRAYBUFFER);\n  }\n\n  const cloned = ReflectConstruct(Float16Array, [\n    buffer,\n    /** @type {any} */ (float16).byteOffset,\n    /** @type {any} */ (float16).length,\n  ], float16.constructor);\n  return WeakMapPrototypeGet(float16bitsArrays, cloned);\n}\n\n/**\n * @param {Float16BitsArray} float16bitsArray\n * @returns {number[]}\n */\nfunction copyToArray(float16bitsArray) {\n  const length = TypedArrayPrototypeGetLength(float16bitsArray);\n\n  const array = [];\n  for (let i = 0; i < length; ++i) {\n    array[i] = convertToNumber(float16bitsArray[i]);\n  }\n\n  return array;\n}\n\n/** @type {WeakSet<Function>} */\nconst TypedArrayPrototypeGetters = new NativeWeakSet();\nfor (const key of ReflectOwnKeys(TypedArrayPrototype)) {\n  // @@toStringTag getter property is defined in Float16Array.prototype\n  if (key === SymbolToStringTag) {\n    continue;\n  }\n\n  const descriptor = ReflectGetOwnPropertyDescriptor(TypedArrayPrototype, key);\n  if (ObjectHasOwn(descriptor, \"get\") && typeof descriptor.get === \"function\") {\n    WeakSetPrototypeAdd(TypedArrayPrototypeGetters, descriptor.get);\n  }\n}\n\nconst handler = ObjectFreeze(/** @type {ProxyHandler<Float16BitsArray>} */ ({\n  get(target, key, receiver) {\n    if (isCanonicalIntegerIndexString(key) && ObjectHasOwn(target, key)) {\n      return convertToNumber(ReflectGet(target, key));\n    }\n\n    // %TypedArray%.prototype getter properties cannot called by Proxy receiver\n    if (WeakSetPrototypeHas(TypedArrayPrototypeGetters, ObjectPrototype__lookupGetter__(target, key))) {\n      return ReflectGet(target, key);\n    }\n\n    return ReflectGet(target, key, receiver);\n  },\n\n  set(target, key, value, receiver) {\n    if (isCanonicalIntegerIndexString(key) && ObjectHasOwn(target, key)) {\n      return ReflectSet(target, key, roundToFloat16Bits(value));\n    }\n\n    return ReflectSet(target, key, value, receiver);\n  },\n\n  getOwnPropertyDescriptor(target, key) {\n    if (isCanonicalIntegerIndexString(key) && ObjectHasOwn(target, key)) {\n      const descriptor = ReflectGetOwnPropertyDescriptor(target, key);\n      descriptor.value = convertToNumber(descriptor.value);\n      return descriptor;\n    }\n\n    return ReflectGetOwnPropertyDescriptor(target, key);\n  },\n\n  defineProperty(target, key, descriptor) {\n    if (\n      isCanonicalIntegerIndexString(key) &&\n      ObjectHasOwn(target, key) &&\n      ObjectHasOwn(descriptor, \"value\")\n    ) {\n      descriptor.value = roundToFloat16Bits(descriptor.value);\n      return ReflectDefineProperty(target, key, descriptor);\n    }\n\n    return ReflectDefineProperty(target, key, descriptor);\n  },\n}));\n\nexport class Float16Array {\n  /** @see https://tc39.es/ecma262/#sec-typedarray */\n  constructor(input, _byteOffset, _length) {\n    /** @type {Float16BitsArray} */\n    let float16bitsArray;\n\n    if (isFloat16Array(input)) {\n      float16bitsArray = ReflectConstruct(NativeUint16Array, [getFloat16BitsArray(input)], new.target);\n    } else if (isObject(input) && !isArrayBuffer(input)) { // object without ArrayBuffer\n      /** @type {ArrayLike<unknown>} */\n      let list;\n      /** @type {number} */\n      let length;\n\n      if (isNativeTypedArray(input)) { // TypedArray\n        list = input;\n        length = TypedArrayPrototypeGetLength(input);\n\n        const buffer = TypedArrayPrototypeGetBuffer(input);\n\n        if (IsDetachedBuffer(buffer)) {\n          throw NativeTypeError(ATTEMPTING_TO_ACCESS_DETACHED_ARRAYBUFFER);\n        }\n\n        if (isNativeBigIntTypedArray(input)) {\n          throw NativeTypeError(CANNOT_MIX_BIGINT_AND_OTHER_TYPES);\n        }\n\n        const data = new NativeArrayBuffer(\n          length * BYTES_PER_ELEMENT\n        );\n        float16bitsArray = ReflectConstruct(NativeUint16Array, [data], new.target);\n      } else {\n        const iterator = input[SymbolIterator];\n        if (iterator != null && typeof iterator !== \"function\") {\n          throw NativeTypeError(ITERATOR_PROPERTY_IS_NOT_CALLABLE);\n        }\n\n        if (iterator != null) { // Iterable (Array)\n          // for optimization\n          if (isOrdinaryArray(input)) {\n            list = input;\n            length = input.length;\n          } else {\n            // eslint-disable-next-line no-restricted-syntax\n            list = [... /** @type {Iterable<unknown>} */ (input)];\n            length = list.length;\n          }\n        } else { // ArrayLike\n          list = /** @type {ArrayLike<unknown>} */ (input);\n          length = ToLength(list.length);\n        }\n        float16bitsArray = ReflectConstruct(NativeUint16Array, [length], new.target);\n      }\n\n      // set values\n      for (let i = 0; i < length; ++i) {\n        float16bitsArray[i] = roundToFloat16Bits(list[i]);\n      }\n    } else { // primitive, ArrayBuffer\n      float16bitsArray = ReflectConstruct(NativeUint16Array, arguments, new.target);\n    }\n\n    /** @type {Float16Array} */\n    const proxy = /** @type {any} */ (new NativeProxy(float16bitsArray, handler));\n\n    // proxy private storage\n    WeakMapPrototypeSet(float16bitsArrays, proxy, float16bitsArray);\n\n    return proxy;\n  }\n\n  /**\n   * limitation: `Object.getOwnPropertyNames(Float16Array)` or `Reflect.ownKeys(Float16Array)` include this key\n   *\n   * @see https://tc39.es/ecma262/#sec-%typedarray%.from\n   */\n  static from(src, ...opts) {\n    const Constructor = this;\n\n    if (!ReflectHas(Constructor, brand)) {\n      throw NativeTypeError(\n        THIS_CONSTRUCTOR_IS_NOT_A_SUBCLASS_OF_FLOAT16ARRAY\n      );\n    }\n\n    // for optimization\n    if (Constructor === Float16Array) {\n      if (isFloat16Array(src) && opts.length === 0) {\n        const float16bitsArray = getFloat16BitsArray(src);\n        const uint16 = new NativeUint16Array(\n          TypedArrayPrototypeGetBuffer(float16bitsArray),\n          TypedArrayPrototypeGetByteOffset(float16bitsArray),\n          TypedArrayPrototypeGetLength(float16bitsArray)\n        );\n        return new Float16Array(\n          TypedArrayPrototypeGetBuffer(TypedArrayPrototypeSlice(uint16))\n        );\n      }\n\n      if (opts.length === 0) {\n        return new Float16Array(\n          TypedArrayPrototypeGetBuffer(\n            Uint16ArrayFrom(src, roundToFloat16Bits)\n          )\n        );\n      }\n\n      const mapFunc = opts[0];\n      const thisArg = opts[1];\n\n      return new Float16Array(\n        TypedArrayPrototypeGetBuffer(\n          Uint16ArrayFrom(src, function (val, ...args) {\n            return roundToFloat16Bits(\n              ReflectApply(mapFunc, this, [val, ...safeIfNeeded(args)])\n            );\n          }, thisArg)\n        )\n      );\n    }\n\n    /** @type {ArrayLike<unknown>} */\n    let list;\n    /** @type {number} */\n    let length;\n\n    const iterator = src[SymbolIterator];\n    if (iterator != null && typeof iterator !== \"function\") {\n      throw NativeTypeError(ITERATOR_PROPERTY_IS_NOT_CALLABLE);\n    }\n\n    if (iterator != null) { // Iterable (TypedArray, Array)\n      // for optimization\n      if (isOrdinaryArray(src)) {\n        list = src;\n        length = src.length;\n      } else if (isOrdinaryNativeTypedArray(src)) {\n        list = src;\n        length = TypedArrayPrototypeGetLength(src);\n      } else {\n        // eslint-disable-next-line no-restricted-syntax\n        list = [...src];\n        length = list.length;\n      }\n    } else { // ArrayLike\n      if (src == null) {\n        throw NativeTypeError(\n          CANNOT_CONVERT_UNDEFINED_OR_NULL_TO_OBJECT\n        );\n      }\n      list = NativeObject(src);\n      length = ToLength(list.length);\n    }\n\n    const array = new Constructor(length);\n\n    if (opts.length === 0) {\n      for (let i = 0; i < length; ++i) {\n        array[i] = /** @type {number} */ (list[i]);\n      }\n    } else {\n      const mapFunc = opts[0];\n      const thisArg = opts[1];\n      for (let i = 0; i < length; ++i) {\n        array[i] = ReflectApply(mapFunc, thisArg, [list[i], i]);\n      }\n    }\n\n    return array;\n  }\n\n  /**\n   * limitation: `Object.getOwnPropertyNames(Float16Array)` or `Reflect.ownKeys(Float16Array)` include this key\n   *\n   * @see https://tc39.es/ecma262/#sec-%typedarray%.of\n   */\n  static of(...items) {\n    const Constructor = this;\n\n    if (!ReflectHas(Constructor, brand)) {\n      throw NativeTypeError(\n        THIS_CONSTRUCTOR_IS_NOT_A_SUBCLASS_OF_FLOAT16ARRAY\n      );\n    }\n\n    const length = items.length;\n\n    // for optimization\n    if (Constructor === Float16Array) {\n      const proxy = new Float16Array(length);\n      const float16bitsArray = getFloat16BitsArray(proxy);\n\n      for (let i = 0; i < length; ++i) {\n        float16bitsArray[i] = roundToFloat16Bits(items[i]);\n      }\n\n      return proxy;\n    }\n\n    const array = new Constructor(length);\n\n    for (let i = 0; i < length; ++i) {\n      array[i] = items[i];\n    }\n\n    return array;\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.keys */\n  keys() {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    return TypedArrayPrototypeKeys(float16bitsArray);\n  }\n\n  /**\n   * limitation: returns a object whose prototype is not `%ArrayIteratorPrototype%`\n   *\n   * @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.values\n   */\n  values() {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    return wrap((function* () {\n      // eslint-disable-next-line no-restricted-syntax\n      for (const val of TypedArrayPrototypeValues(float16bitsArray)) {\n        yield convertToNumber(val);\n      }\n    })());\n  }\n\n  /**\n   * limitation: returns a object whose prototype is not `%ArrayIteratorPrototype%`\n   *\n   * @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.entries\n   */\n  entries() {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    return wrap((function* () {\n      // eslint-disable-next-line no-restricted-syntax\n      for (const [i, val] of TypedArrayPrototypeEntries(float16bitsArray)) {\n        yield /** @type {[Number, number]} */ ([i, convertToNumber(val)]);\n      }\n    })());\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.at */\n  at(index) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n    const relativeIndex = ToIntegerOrInfinity(index);\n    const k = relativeIndex >= 0 ? relativeIndex : length + relativeIndex;\n\n    if (k < 0 || k >= length) {\n      return;\n    }\n\n    return convertToNumber(float16bitsArray[k]);\n  }\n\n  /** @see https://tc39.es/proposal-change-array-by-copy/#sec-%typedarray%.prototype.with */\n  with(index, value) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n    const relativeIndex = ToIntegerOrInfinity(index);\n    const k = relativeIndex >= 0 ? relativeIndex : length + relativeIndex;\n\n    const number = +value;\n\n    if (k < 0 || k >= length) {\n      throw NativeRangeError(OFFSET_IS_OUT_OF_BOUNDS);\n    }\n\n    // don't use SpeciesConstructor\n    const uint16 = new NativeUint16Array(\n      TypedArrayPrototypeGetBuffer(float16bitsArray),\n      TypedArrayPrototypeGetByteOffset(float16bitsArray),\n      TypedArrayPrototypeGetLength(float16bitsArray)\n    );\n    const cloned = new Float16Array(\n      TypedArrayPrototypeGetBuffer(\n        TypedArrayPrototypeSlice(uint16)\n      )\n    );\n    const array = getFloat16BitsArray(cloned);\n\n    array[k] = roundToFloat16Bits(number);\n\n    return cloned;\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.map */\n  map(callback, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n    const thisArg = opts[0];\n\n    const Constructor = SpeciesConstructor(float16bitsArray, Float16Array);\n\n    // for optimization\n    if (Constructor === Float16Array) {\n      const proxy = new Float16Array(length);\n      const array = getFloat16BitsArray(proxy);\n\n      for (let i = 0; i < length; ++i) {\n        const val = convertToNumber(float16bitsArray[i]);\n        array[i] = roundToFloat16Bits(\n          ReflectApply(callback, thisArg, [val, i, this])\n        );\n      }\n\n      return proxy;\n    }\n\n    const array = new Constructor(length);\n    assertSpeciesTypedArray(array, length);\n\n    for (let i = 0; i < length; ++i) {\n      const val = convertToNumber(float16bitsArray[i]);\n      array[i] = ReflectApply(callback, thisArg, [val, i, this]);\n    }\n\n    return /** @type {any} */ (array);\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.filter */\n  filter(callback, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n    const thisArg = opts[0];\n\n    const kept = [];\n    for (let i = 0; i < length; ++i) {\n      const val = convertToNumber(float16bitsArray[i]);\n      if (ReflectApply(callback, thisArg, [val, i, this])) {\n        ArrayPrototypePush(kept, val);\n      }\n    }\n\n    const Constructor = SpeciesConstructor(float16bitsArray, Float16Array);\n    const array = new Constructor(kept);\n    assertSpeciesTypedArray(array);\n\n    return /** @type {any} */ (array);\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.reduce */\n  reduce(callback, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n    if (length === 0 && opts.length === 0) {\n      throw NativeTypeError(REDUCE_OF_EMPTY_ARRAY_WITH_NO_INITIAL_VALUE);\n    }\n\n    let accumulator, start;\n    if (opts.length === 0) {\n      accumulator = convertToNumber(float16bitsArray[0]);\n      start = 1;\n    } else {\n      accumulator = opts[0];\n      start = 0;\n    }\n\n    for (let i = start; i < length; ++i) {\n      accumulator = callback(\n        accumulator,\n        convertToNumber(float16bitsArray[i]),\n        i,\n        this\n      );\n    }\n\n    return accumulator;\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.reduceright */\n  reduceRight(callback, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n    if (length === 0 && opts.length === 0) {\n      throw NativeTypeError(REDUCE_OF_EMPTY_ARRAY_WITH_NO_INITIAL_VALUE);\n    }\n\n    let accumulator, start;\n    if (opts.length === 0) {\n      accumulator = convertToNumber(float16bitsArray[length - 1]);\n      start = length - 2;\n    } else {\n      accumulator = opts[0];\n      start = length - 1;\n    }\n\n    for (let i = start; i >= 0; --i) {\n      accumulator = callback(\n        accumulator,\n        convertToNumber(float16bitsArray[i]),\n        i,\n        this\n      );\n    }\n\n    return accumulator;\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.foreach */\n  forEach(callback, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n    const thisArg = opts[0];\n\n    for (let i = 0; i < length; ++i) {\n      ReflectApply(callback, thisArg, [\n        convertToNumber(float16bitsArray[i]),\n        i,\n        this,\n      ]);\n    }\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.find */\n  find(callback, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n    const thisArg = opts[0];\n\n    for (let i = 0; i < length; ++i) {\n      const value = convertToNumber(float16bitsArray[i]);\n      if (ReflectApply(callback, thisArg, [value, i, this])) {\n        return value;\n      }\n    }\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.findindex */\n  findIndex(callback, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n    const thisArg = opts[0];\n\n    for (let i = 0; i < length; ++i) {\n      const value = convertToNumber(float16bitsArray[i]);\n      if (ReflectApply(callback, thisArg, [value, i, this])) {\n        return i;\n      }\n    }\n\n    return -1;\n  }\n\n  /** @see https://tc39.es/proposal-array-find-from-last/index.html#sec-%typedarray%.prototype.findlast */\n  findLast(callback, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n    const thisArg = opts[0];\n\n    for (let i = length - 1; i >= 0; --i) {\n      const value = convertToNumber(float16bitsArray[i]);\n      if (ReflectApply(callback, thisArg, [value, i, this])) {\n        return value;\n      }\n    }\n  }\n\n  /** @see https://tc39.es/proposal-array-find-from-last/index.html#sec-%typedarray%.prototype.findlastindex */\n  findLastIndex(callback, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n    const thisArg = opts[0];\n\n    for (let i = length - 1; i >= 0; --i) {\n      const value = convertToNumber(float16bitsArray[i]);\n      if (ReflectApply(callback, thisArg, [value, i, this])) {\n        return i;\n      }\n    }\n\n    return -1;\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.every */\n  every(callback, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n    const thisArg = opts[0];\n\n    for (let i = 0; i < length; ++i) {\n      if (\n        !ReflectApply(callback, thisArg, [\n          convertToNumber(float16bitsArray[i]),\n          i,\n          this,\n        ])\n      ) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.some */\n  some(callback, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n    const thisArg = opts[0];\n\n    for (let i = 0; i < length; ++i) {\n      if (\n        ReflectApply(callback, thisArg, [\n          convertToNumber(float16bitsArray[i]),\n          i,\n          this,\n        ])\n      ) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.set */\n  set(input, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    const targetOffset = ToIntegerOrInfinity(opts[0]);\n    if (targetOffset < 0) {\n      throw NativeRangeError(OFFSET_IS_OUT_OF_BOUNDS);\n    }\n\n    if (input == null) {\n      throw NativeTypeError(\n        CANNOT_CONVERT_UNDEFINED_OR_NULL_TO_OBJECT\n      );\n    }\n\n    if (isNativeBigIntTypedArray(input)) {\n      throw NativeTypeError(\n        CANNOT_MIX_BIGINT_AND_OTHER_TYPES\n      );\n    }\n\n    // for optimization\n    if (isFloat16Array(input)) {\n      // peel off Proxy\n      return TypedArrayPrototypeSet(\n        getFloat16BitsArray(this),\n        getFloat16BitsArray(input),\n        targetOffset\n      );\n    }\n\n    if (isNativeTypedArray(input)) {\n      const buffer = TypedArrayPrototypeGetBuffer(input);\n      if (IsDetachedBuffer(buffer)) {\n        throw NativeTypeError(ATTEMPTING_TO_ACCESS_DETACHED_ARRAYBUFFER);\n      }\n    }\n\n    const targetLength = TypedArrayPrototypeGetLength(float16bitsArray);\n\n    const src = NativeObject(input);\n    const srcLength = ToLength(src.length);\n\n    if (targetOffset === Infinity || srcLength + targetOffset > targetLength) {\n      throw NativeRangeError(OFFSET_IS_OUT_OF_BOUNDS);\n    }\n\n    for (let i = 0; i < srcLength; ++i) {\n      float16bitsArray[i + targetOffset] = roundToFloat16Bits(src[i]);\n    }\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.reverse */\n  reverse() {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    TypedArrayPrototypeReverse(float16bitsArray);\n\n    return this;\n  }\n\n  /** @see https://tc39.es/proposal-change-array-by-copy/#sec-%typedarray%.prototype.toReversed */\n  toReversed() {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    // don't use SpeciesConstructor\n    const uint16 = new NativeUint16Array(\n      TypedArrayPrototypeGetBuffer(float16bitsArray),\n      TypedArrayPrototypeGetByteOffset(float16bitsArray),\n      TypedArrayPrototypeGetLength(float16bitsArray)\n    );\n    const cloned = new Float16Array(\n      TypedArrayPrototypeGetBuffer(\n        TypedArrayPrototypeSlice(uint16)\n      )\n    );\n\n    const clonedFloat16bitsArray = getFloat16BitsArray(cloned);\n    TypedArrayPrototypeReverse(clonedFloat16bitsArray);\n\n    return cloned;\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.fill */\n  fill(value, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    TypedArrayPrototypeFill(\n      float16bitsArray,\n      roundToFloat16Bits(value),\n      ...safeIfNeeded(opts)\n    );\n\n    return this;\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.copywithin */\n  copyWithin(target, start, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    TypedArrayPrototypeCopyWithin(float16bitsArray, target, start, ...safeIfNeeded(opts));\n\n    return this;\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.sort */\n  sort(compareFn) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    const sortCompare = compareFn !== undefined ? compareFn : defaultCompare;\n    TypedArrayPrototypeSort(float16bitsArray, (x, y) => {\n      return sortCompare(convertToNumber(x), convertToNumber(y));\n    });\n\n    return this;\n  }\n\n  /** @see https://tc39.es/proposal-change-array-by-copy/#sec-%typedarray%.prototype.toSorted */\n  toSorted(compareFn) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    if (compareFn !== undefined && typeof compareFn !== \"function\") {\n      throw new NativeTypeError(THE_COMPARISON_FUNCTION_MUST_BE_EITHER_A_FUNCTION_OR_UNDEFINED);\n    }\n    const sortCompare = compareFn !== undefined ? compareFn : defaultCompare;\n\n    // don't use SpeciesConstructor\n    const uint16 = new NativeUint16Array(\n      TypedArrayPrototypeGetBuffer(float16bitsArray),\n      TypedArrayPrototypeGetByteOffset(float16bitsArray),\n      TypedArrayPrototypeGetLength(float16bitsArray)\n    );\n    const cloned = new Float16Array(\n      TypedArrayPrototypeGetBuffer(\n        TypedArrayPrototypeSlice(uint16)\n      )\n    );\n\n    const clonedFloat16bitsArray = getFloat16BitsArray(cloned);\n    TypedArrayPrototypeSort(clonedFloat16bitsArray, (x, y) => {\n      return sortCompare(convertToNumber(x), convertToNumber(y));\n    });\n\n    return cloned;\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.slice */\n  slice(start, end) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    const Constructor = SpeciesConstructor(float16bitsArray, Float16Array);\n\n    // for optimization\n    if (Constructor === Float16Array) {\n      const uint16 = new NativeUint16Array(\n        TypedArrayPrototypeGetBuffer(float16bitsArray),\n        TypedArrayPrototypeGetByteOffset(float16bitsArray),\n        TypedArrayPrototypeGetLength(float16bitsArray)\n      );\n      return new Float16Array(\n        TypedArrayPrototypeGetBuffer(\n          TypedArrayPrototypeSlice(uint16, start, end)\n        )\n      );\n    }\n\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n    const relativeStart = ToIntegerOrInfinity(start);\n    const relativeEnd = end === undefined ? length : ToIntegerOrInfinity(end);\n\n    let k;\n    if (relativeStart === -Infinity) {\n      k = 0;\n    } else if (relativeStart < 0) {\n      k = length + relativeStart > 0 ? length + relativeStart : 0;\n    } else {\n      k = length < relativeStart ? length : relativeStart;\n    }\n\n    let final;\n    if (relativeEnd === -Infinity) {\n      final = 0;\n    } else if (relativeEnd < 0) {\n      final = length + relativeEnd > 0 ? length + relativeEnd : 0;\n    } else {\n      final = length < relativeEnd ? length : relativeEnd;\n    }\n\n    const count = final - k > 0 ? final - k : 0;\n    const array = new Constructor(count);\n    assertSpeciesTypedArray(array, count);\n\n    if (count === 0) {\n      return array;\n    }\n\n    const buffer = TypedArrayPrototypeGetBuffer(float16bitsArray);\n    if (IsDetachedBuffer(buffer)) {\n      throw NativeTypeError(ATTEMPTING_TO_ACCESS_DETACHED_ARRAYBUFFER);\n    }\n\n    let n = 0;\n    while (k < final) {\n      array[n] = convertToNumber(float16bitsArray[k]);\n      ++k;\n      ++n;\n    }\n\n    return /** @type {any} */ (array);\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.subarray */\n  subarray(begin, end) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    const Constructor = SpeciesConstructor(float16bitsArray, Float16Array);\n\n    const uint16 = new NativeUint16Array(\n      TypedArrayPrototypeGetBuffer(float16bitsArray),\n      TypedArrayPrototypeGetByteOffset(float16bitsArray),\n      TypedArrayPrototypeGetLength(float16bitsArray)\n    );\n    const uint16Subarray = TypedArrayPrototypeSubarray(uint16, begin, end);\n\n    const array = new Constructor(\n      TypedArrayPrototypeGetBuffer(uint16Subarray),\n      TypedArrayPrototypeGetByteOffset(uint16Subarray),\n      TypedArrayPrototypeGetLength(uint16Subarray)\n    );\n    assertSpeciesTypedArray(array);\n\n    return /** @type {any} */ (array);\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.indexof */\n  indexOf(element, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n\n    let from = ToIntegerOrInfinity(opts[0]);\n    if (from === Infinity) {\n      return -1;\n    }\n\n    if (from < 0) {\n      from += length;\n      if (from < 0) {\n        from = 0;\n      }\n    }\n\n    for (let i = from; i < length; ++i) {\n      if (\n        ObjectHasOwn(float16bitsArray, i) &&\n        convertToNumber(float16bitsArray[i]) === element\n      ) {\n        return i;\n      }\n    }\n\n    return -1;\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.lastindexof */\n  lastIndexOf(element, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n\n    let from = opts.length >= 1 ? ToIntegerOrInfinity(opts[0]) : length - 1;\n    if (from === -Infinity) {\n      return -1;\n    }\n\n    if (from >= 0) {\n      from = from < length - 1 ? from : length - 1;\n    } else {\n      from += length;\n    }\n\n    for (let i = from; i >= 0; --i) {\n      if (\n        ObjectHasOwn(float16bitsArray, i) &&\n        convertToNumber(float16bitsArray[i]) === element\n      ) {\n        return i;\n      }\n    }\n\n    return -1;\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.includes */\n  includes(element, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n\n    let from = ToIntegerOrInfinity(opts[0]);\n    if (from === Infinity) {\n      return false;\n    }\n\n    if (from < 0) {\n      from += length;\n      if (from < 0) {\n        from = 0;\n      }\n    }\n\n    const isNaN = NumberIsNaN(element);\n    for (let i = from; i < length; ++i) {\n      const value = convertToNumber(float16bitsArray[i]);\n\n      if (isNaN && NumberIsNaN(value)) {\n        return true;\n      }\n\n      if (value === element) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.join */\n  join(separator) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    const array = copyToArray(float16bitsArray);\n\n    return ArrayPrototypeJoin(array, separator);\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.tolocalestring */\n  toLocaleString(...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    const array = copyToArray(float16bitsArray);\n\n    return ArrayPrototypeToLocaleString(array, ...safeIfNeeded(opts));\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-get-%typedarray%.prototype-@@tostringtag */\n  get [SymbolToStringTag]() {\n    if (isFloat16Array(this)) {\n      return /** @type {any} */ (\"Float16Array\");\n    }\n  }\n}\n\n/** @see https://tc39.es/ecma262/#sec-typedarray.bytes_per_element */\nObjectDefineProperty(Float16Array, \"BYTES_PER_ELEMENT\", {\n  value: BYTES_PER_ELEMENT,\n});\n\n// limitation: It is peaked by `Object.getOwnPropertySymbols(Float16Array)` and `Reflect.ownKeys(Float16Array)`\nObjectDefineProperty(Float16Array, brand, {});\n\n/** @see https://tc39.es/ecma262/#sec-properties-of-the-typedarray-constructors */\nReflectSetPrototypeOf(Float16Array, TypedArray);\n\nconst Float16ArrayPrototype = Float16Array.prototype;\n\n/** @see https://tc39.es/ecma262/#sec-typedarray.prototype.bytes_per_element */\nObjectDefineProperty(Float16ArrayPrototype, \"BYTES_PER_ELEMENT\", {\n  value: BYTES_PER_ELEMENT,\n});\n\n/** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype-@@iterator */\nObjectDefineProperty(Float16ArrayPrototype, SymbolIterator, {\n  value: Float16ArrayPrototype.values,\n  writable: true,\n  configurable: true,\n});\n\nReflectSetPrototypeOf(Float16ArrayPrototype, TypedArrayPrototype);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}