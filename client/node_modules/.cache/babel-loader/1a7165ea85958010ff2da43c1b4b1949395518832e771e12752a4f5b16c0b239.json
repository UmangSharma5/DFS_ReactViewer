{"ast":null,"code":"import _regeneratorRuntime from \"/home/umang/iHub/DFS_ReactViewer/client/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/home/umang/iHub/DFS_ReactViewer/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"/home/umang/iHub/DFS_ReactViewer/client/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/umang/iHub/DFS_ReactViewer/client/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/home/umang/iHub/DFS_ReactViewer/client/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/umang/iHub/DFS_ReactViewer/client/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport BaseDecoder from './basedecoder.js';\n\n/**\n * class WebImageDecoder\n *\n * This decoder uses the browsers image decoding facilities to read image\n * formats like WebP when supported.\n */\nvar WebImageDecoder = /*#__PURE__*/function (_BaseDecoder) {\n  _inherits(WebImageDecoder, _BaseDecoder);\n  var _super = _createSuper(WebImageDecoder);\n  function WebImageDecoder() {\n    var _this;\n    _classCallCheck(this, WebImageDecoder);\n    _this = _super.call(this);\n    if (typeof createImageBitmap === 'undefined') {\n      throw new Error('Cannot decode WebImage as `createImageBitmap` is not available');\n    } else if (typeof document === 'undefined' && typeof OffscreenCanvas === 'undefined') {\n      throw new Error('Cannot decode WebImage as neither `document` nor `OffscreenCanvas` is not available');\n    }\n    return _this;\n  }\n  _createClass(WebImageDecoder, [{\n    key: \"decode\",\n    value: function () {\n      var _decode = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(fileDirectory, buffer) {\n        var blob, imageBitmap, canvas, ctx;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              blob = new Blob([buffer]);\n              _context.next = 3;\n              return createImageBitmap(blob);\n            case 3:\n              imageBitmap = _context.sent;\n              if (typeof document !== 'undefined') {\n                canvas = document.createElement('canvas');\n                canvas.width = imageBitmap.width;\n                canvas.height = imageBitmap.height;\n              } else {\n                canvas = new OffscreenCanvas(imageBitmap.width, imageBitmap.height);\n              }\n              ctx = canvas.getContext('2d');\n              ctx.drawImage(imageBitmap, 0, 0);\n\n              // TODO: check how many samples per pixel we have, and return RGB/RGBA accordingly\n              // it seems like GDAL always encodes via RGBA which does not require a translation\n              return _context.abrupt(\"return\", ctx.getImageData(0, 0, imageBitmap.width, imageBitmap.height).data.buffer);\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }));\n      function decode(_x, _x2) {\n        return _decode.apply(this, arguments);\n      }\n      return decode;\n    }()\n  }]);\n  return WebImageDecoder;\n}(BaseDecoder);\nexport { WebImageDecoder as default };","map":{"version":3,"names":["BaseDecoder","WebImageDecoder","_BaseDecoder","_inherits","_super","_createSuper","_this","_classCallCheck","call","createImageBitmap","Error","document","OffscreenCanvas","_createClass","key","value","_decode","_asyncToGenerator","_regeneratorRuntime","mark","_callee","fileDirectory","buffer","blob","imageBitmap","canvas","ctx","wrap","_callee$","_context","prev","next","Blob","sent","createElement","width","height","getContext","drawImage","abrupt","getImageData","data","stop","decode","_x","_x2","apply","arguments","default"],"sources":["/home/umang/iHub/DFS_ReactViewer/client/node_modules/geotiff/dist-module/compression/webimage.js"],"sourcesContent":["import BaseDecoder from './basedecoder.js';\n\n/**\n * class WebImageDecoder\n *\n * This decoder uses the browsers image decoding facilities to read image\n * formats like WebP when supported.\n */\nexport default class WebImageDecoder extends BaseDecoder {\n  constructor() {\n    super();\n    if (typeof createImageBitmap === 'undefined') {\n      throw new Error('Cannot decode WebImage as `createImageBitmap` is not available');\n    } else if (typeof document === 'undefined' && typeof OffscreenCanvas === 'undefined') {\n      throw new Error('Cannot decode WebImage as neither `document` nor `OffscreenCanvas` is not available');\n    }\n  }\n\n  async decode(fileDirectory, buffer) {\n    const blob = new Blob([buffer]);\n    const imageBitmap = await createImageBitmap(blob);\n\n    let canvas;\n    if (typeof document !== 'undefined') {\n      canvas = document.createElement('canvas');\n      canvas.width = imageBitmap.width;\n      canvas.height = imageBitmap.height;\n    } else {\n      canvas = new OffscreenCanvas(imageBitmap.width, imageBitmap.height);\n    }\n\n    const ctx = canvas.getContext('2d');\n    ctx.drawImage(imageBitmap, 0, 0);\n\n    // TODO: check how many samples per pixel we have, and return RGB/RGBA accordingly\n    // it seems like GDAL always encodes via RGBA which does not require a translation\n\n    return ctx.getImageData(0, 0, imageBitmap.width, imageBitmap.height).data.buffer;\n  }\n}\n"],"mappings":";;;;;;AAAA,OAAOA,WAAW,MAAM,kBAAkB;;AAE1C;AACA;AACA;AACA;AACA;AACA;AALA,IAMqBC,eAAe,0BAAAC,YAAA;EAAAC,SAAA,CAAAF,eAAA,EAAAC,YAAA;EAAA,IAAAE,MAAA,GAAAC,YAAA,CAAAJ,eAAA;EAClC,SAAAA,gBAAA,EAAc;IAAA,IAAAK,KAAA;IAAAC,eAAA,OAAAN,eAAA;IACZK,KAAA,GAAAF,MAAA,CAAAI,IAAA;IACA,IAAI,OAAOC,iBAAiB,KAAK,WAAW,EAAE;MAC5C,MAAM,IAAIC,KAAK,CAAC,gEAAgE,CAAC;IACnF,CAAC,MAAM,IAAI,OAAOC,QAAQ,KAAK,WAAW,IAAI,OAAOC,eAAe,KAAK,WAAW,EAAE;MACpF,MAAM,IAAIF,KAAK,CAAC,qFAAqF,CAAC;IACxG;IAAC,OAAAJ,KAAA;EACH;EAACO,YAAA,CAAAZ,eAAA;IAAAa,GAAA;IAAAC,KAAA;MAAA,IAAAC,OAAA,GAAAC,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAED,SAAAC,QAAaC,aAAa,EAAEC,MAAM;QAAA,IAAAC,IAAA,EAAAC,WAAA,EAAAC,MAAA,EAAAC,GAAA;QAAA,OAAAR,mBAAA,GAAAS,IAAA,UAAAC,SAAAC,QAAA;UAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;YAAA;cAC1BR,IAAI,GAAG,IAAIS,IAAI,CAAC,CAACV,MAAM,CAAC,CAAC;cAAAO,QAAA,CAAAE,IAAA;cAAA,OACLtB,iBAAiB,CAACc,IAAI,CAAC;YAAA;cAA3CC,WAAW,GAAAK,QAAA,CAAAI,IAAA;cAGjB,IAAI,OAAOtB,QAAQ,KAAK,WAAW,EAAE;gBACnCc,MAAM,GAAGd,QAAQ,CAACuB,aAAa,CAAC,QAAQ,CAAC;gBACzCT,MAAM,CAACU,KAAK,GAAGX,WAAW,CAACW,KAAK;gBAChCV,MAAM,CAACW,MAAM,GAAGZ,WAAW,CAACY,MAAM;cACpC,CAAC,MAAM;gBACLX,MAAM,GAAG,IAAIb,eAAe,CAACY,WAAW,CAACW,KAAK,EAAEX,WAAW,CAACY,MAAM,CAAC;cACrE;cAEMV,GAAG,GAAGD,MAAM,CAACY,UAAU,CAAC,IAAI,CAAC;cACnCX,GAAG,CAACY,SAAS,CAACd,WAAW,EAAE,CAAC,EAAE,CAAC,CAAC;;cAEhC;cACA;cAAA,OAAAK,QAAA,CAAAU,MAAA,WAEOb,GAAG,CAACc,YAAY,CAAC,CAAC,EAAE,CAAC,EAAEhB,WAAW,CAACW,KAAK,EAAEX,WAAW,CAACY,MAAM,CAAC,CAACK,IAAI,CAACnB,MAAM;YAAA;YAAA;cAAA,OAAAO,QAAA,CAAAa,IAAA;UAAA;QAAA,GAAAtB,OAAA;MAAA,CACjF;MAAA,SAAAuB,OAAAC,EAAA,EAAAC,GAAA;QAAA,OAAA7B,OAAA,CAAA8B,KAAA,OAAAC,SAAA;MAAA;MAAA,OAAAJ,MAAA;IAAA;EAAA;EAAA,OAAA1C,eAAA;AAAA,EA9B0CD,WAAW;AAAA,SAAnCC,eAAe,IAAA+C,OAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}