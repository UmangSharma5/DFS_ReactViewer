{"ast":null,"code":"import { safeIfNeeded, wrap } from \"./_util/arrayIterator.mjs\";\nimport { brand, hasFloat16ArrayBrand } from \"./_util/brand.mjs\";\nimport { convertToNumber, roundToFloat16Bits } from \"./_util/converter.mjs\";\nimport { isArrayBuffer, isCanonicalIntegerIndexString, isNativeBigIntTypedArray, isNativeTypedArray, isObject, isOrdinaryArray, isOrdinaryNativeTypedArray } from \"./_util/is.mjs\";\nimport { ATTEMPTING_TO_ACCESS_DETACHED_ARRAYBUFFER, CANNOT_CONVERT_UNDEFINED_OR_NULL_TO_OBJECT, CANNOT_MIX_BIGINT_AND_OTHER_TYPES, DERIVED_CONSTRUCTOR_CREATED_TYPEDARRAY_OBJECT_WHICH_WAS_TOO_SMALL_LENGTH, ITERATOR_PROPERTY_IS_NOT_CALLABLE, OFFSET_IS_OUT_OF_BOUNDS, REDUCE_OF_EMPTY_ARRAY_WITH_NO_INITIAL_VALUE, SPECIES_CONSTRUCTOR_DIDNT_RETURN_TYPEDARRAY_OBJECT, THE_COMPARISON_FUNCTION_MUST_BE_EITHER_A_FUNCTION_OR_UNDEFINED, THIS_CONSTRUCTOR_IS_NOT_A_SUBCLASS_OF_FLOAT16ARRAY, THIS_IS_NOT_A_FLOAT16ARRAY_OBJECT } from \"./_util/messages.mjs\";\nimport { ArrayBufferIsView, ArrayPrototypeJoin, ArrayPrototypePush, ArrayPrototypeToLocaleString, NativeArrayBuffer, NativeObject, NativeProxy, NativeRangeError, NativeTypeError, NativeUint16Array, NativeWeakMap, NativeWeakSet, NumberIsNaN, ObjectDefineProperty, ObjectFreeze, ObjectHasOwn, ObjectPrototype__lookupGetter__, ReflectApply, ReflectConstruct, ReflectDefineProperty, ReflectGet, ReflectGetOwnPropertyDescriptor, ReflectHas, ReflectOwnKeys, ReflectSet, ReflectSetPrototypeOf, SymbolIterator, SymbolToStringTag, TypedArray, TypedArrayPrototype, TypedArrayPrototypeCopyWithin, TypedArrayPrototypeEntries, TypedArrayPrototypeFill, TypedArrayPrototypeGetBuffer, TypedArrayPrototypeGetByteOffset, TypedArrayPrototypeGetLength, TypedArrayPrototypeKeys, TypedArrayPrototypeReverse, TypedArrayPrototypeSet, TypedArrayPrototypeSlice, TypedArrayPrototypeSort, TypedArrayPrototypeSubarray, TypedArrayPrototypeValues, Uint16ArrayFrom, WeakMapPrototypeGet, WeakMapPrototypeHas, WeakMapPrototypeSet, WeakSetPrototypeAdd, WeakSetPrototypeHas } from \"./_util/primordials.mjs\";\nimport { IsDetachedBuffer, SpeciesConstructor, ToIntegerOrInfinity, ToLength, defaultCompare } from \"./_util/spec.mjs\";\nconst BYTES_PER_ELEMENT = 2;\n\n/** @typedef {Uint16Array & { __float16bits: never }} Float16BitsArray */\n\n/** @type {WeakMap<Float16Array, Float16BitsArray>} */\nconst float16bitsArrays = new NativeWeakMap();\n\n/**\n * @param {unknown} target\n * @returns {target is Float16Array}\n */\nexport function isFloat16Array(target) {\n  return WeakMapPrototypeHas(float16bitsArrays, target) || !ArrayBufferIsView(target) && hasFloat16ArrayBrand(target);\n}\n\n/**\n * @param {unknown} target\n * @throws {TypeError}\n * @returns {asserts target is Float16Array}\n */\nfunction assertFloat16Array(target) {\n  if (!isFloat16Array(target)) {\n    throw NativeTypeError(THIS_IS_NOT_A_FLOAT16ARRAY_OBJECT);\n  }\n}\n\n/**\n * @param {unknown} target\n * @param {number=} count\n * @throws {TypeError}\n * @returns {asserts target is Uint8Array|Uint8ClampedArray|Uint16Array|Uint32Array|Int8Array|Int16Array|Int32Array|Float16Array|Float32Array|Float64Array}\n */\nfunction assertSpeciesTypedArray(target, count) {\n  const isTargetFloat16Array = isFloat16Array(target);\n  const isTargetTypedArray = isNativeTypedArray(target);\n  if (!isTargetFloat16Array && !isTargetTypedArray) {\n    throw NativeTypeError(SPECIES_CONSTRUCTOR_DIDNT_RETURN_TYPEDARRAY_OBJECT);\n  }\n  if (typeof count === \"number\") {\n    let length;\n    if (isTargetFloat16Array) {\n      const float16bitsArray = getFloat16BitsArray(target);\n      length = TypedArrayPrototypeGetLength(float16bitsArray);\n    } else {\n      length = TypedArrayPrototypeGetLength(target);\n    }\n    if (length < count) {\n      throw NativeTypeError(DERIVED_CONSTRUCTOR_CREATED_TYPEDARRAY_OBJECT_WHICH_WAS_TOO_SMALL_LENGTH);\n    }\n  }\n  if (isNativeBigIntTypedArray(target)) {\n    throw NativeTypeError(CANNOT_MIX_BIGINT_AND_OTHER_TYPES);\n  }\n}\n\n/**\n * @param {Float16Array} float16\n * @throws {TypeError}\n * @returns {Float16BitsArray}\n */\nfunction getFloat16BitsArray(float16) {\n  const float16bitsArray = WeakMapPrototypeGet(float16bitsArrays, float16);\n  if (float16bitsArray !== undefined) {\n    const buffer = TypedArrayPrototypeGetBuffer(float16bitsArray);\n    if (IsDetachedBuffer(buffer)) {\n      throw NativeTypeError(ATTEMPTING_TO_ACCESS_DETACHED_ARRAYBUFFER);\n    }\n    return float16bitsArray;\n  }\n\n  // from another Float16Array instance (a different version?)\n  const buffer = /** @type {any} */float16.buffer;\n  if (IsDetachedBuffer(buffer)) {\n    throw NativeTypeError(ATTEMPTING_TO_ACCESS_DETACHED_ARRAYBUFFER);\n  }\n  const cloned = ReflectConstruct(Float16Array, [buffer, /** @type {any} */float16.byteOffset, /** @type {any} */float16.length], float16.constructor);\n  return WeakMapPrototypeGet(float16bitsArrays, cloned);\n}\n\n/**\n * @param {Float16BitsArray} float16bitsArray\n * @returns {number[]}\n */\nfunction copyToArray(float16bitsArray) {\n  const length = TypedArrayPrototypeGetLength(float16bitsArray);\n  const array = [];\n  for (let i = 0; i < length; ++i) {\n    array[i] = convertToNumber(float16bitsArray[i]);\n  }\n  return array;\n}\n\n/** @type {WeakSet<Function>} */\nconst TypedArrayPrototypeGetters = new NativeWeakSet();\nfor (const key of ReflectOwnKeys(TypedArrayPrototype)) {\n  // @@toStringTag getter property is defined in Float16Array.prototype\n  if (key === SymbolToStringTag) {\n    continue;\n  }\n  const descriptor = ReflectGetOwnPropertyDescriptor(TypedArrayPrototype, key);\n  if (ObjectHasOwn(descriptor, \"get\") && typeof descriptor.get === \"function\") {\n    WeakSetPrototypeAdd(TypedArrayPrototypeGetters, descriptor.get);\n  }\n}\nconst handler = ObjectFreeze( /** @type {ProxyHandler<Float16BitsArray>} */{\n  get(target, key, receiver) {\n    if (isCanonicalIntegerIndexString(key) && ObjectHasOwn(target, key)) {\n      return convertToNumber(ReflectGet(target, key));\n    }\n\n    // %TypedArray%.prototype getter properties cannot called by Proxy receiver\n    if (WeakSetPrototypeHas(TypedArrayPrototypeGetters, ObjectPrototype__lookupGetter__(target, key))) {\n      return ReflectGet(target, key);\n    }\n    return ReflectGet(target, key, receiver);\n  },\n  set(target, key, value, receiver) {\n    if (isCanonicalIntegerIndexString(key) && ObjectHasOwn(target, key)) {\n      return ReflectSet(target, key, roundToFloat16Bits(value));\n    }\n    return ReflectSet(target, key, value, receiver);\n  },\n  getOwnPropertyDescriptor(target, key) {\n    if (isCanonicalIntegerIndexString(key) && ObjectHasOwn(target, key)) {\n      const descriptor = ReflectGetOwnPropertyDescriptor(target, key);\n      descriptor.value = convertToNumber(descriptor.value);\n      return descriptor;\n    }\n    return ReflectGetOwnPropertyDescriptor(target, key);\n  },\n  defineProperty(target, key, descriptor) {\n    if (isCanonicalIntegerIndexString(key) && ObjectHasOwn(target, key) && ObjectHasOwn(descriptor, \"value\")) {\n      descriptor.value = roundToFloat16Bits(descriptor.value);\n      return ReflectDefineProperty(target, key, descriptor);\n    }\n    return ReflectDefineProperty(target, key, descriptor);\n  }\n});\nexport class Float16Array {\n  /** @see https://tc39.es/ecma262/#sec-typedarray */\n  constructor(input, _byteOffset, _length) {\n    /** @type {Float16BitsArray} */\n    let float16bitsArray;\n    if (isFloat16Array(input)) {\n      float16bitsArray = ReflectConstruct(NativeUint16Array, [getFloat16BitsArray(input)], new.target);\n    } else if (isObject(input) && !isArrayBuffer(input)) {\n      // object without ArrayBuffer\n      /** @type {ArrayLike<unknown>} */\n      let list;\n      /** @type {number} */\n      let length;\n      if (isNativeTypedArray(input)) {\n        // TypedArray\n        list = input;\n        length = TypedArrayPrototypeGetLength(input);\n        const buffer = TypedArrayPrototypeGetBuffer(input);\n        if (IsDetachedBuffer(buffer)) {\n          throw NativeTypeError(ATTEMPTING_TO_ACCESS_DETACHED_ARRAYBUFFER);\n        }\n        if (isNativeBigIntTypedArray(input)) {\n          throw NativeTypeError(CANNOT_MIX_BIGINT_AND_OTHER_TYPES);\n        }\n        const data = new NativeArrayBuffer(length * BYTES_PER_ELEMENT);\n        float16bitsArray = ReflectConstruct(NativeUint16Array, [data], new.target);\n      } else {\n        const iterator = input[SymbolIterator];\n        if (iterator != null && typeof iterator !== \"function\") {\n          throw NativeTypeError(ITERATOR_PROPERTY_IS_NOT_CALLABLE);\n        }\n        if (iterator != null) {\n          // Iterable (Array)\n          // for optimization\n          if (isOrdinaryArray(input)) {\n            list = input;\n            length = input.length;\n          } else {\n            // eslint-disable-next-line no-restricted-syntax\n            list = [... /** @type {Iterable<unknown>} */input];\n            length = list.length;\n          }\n        } else {\n          // ArrayLike\n          list = /** @type {ArrayLike<unknown>} */input;\n          length = ToLength(list.length);\n        }\n        float16bitsArray = ReflectConstruct(NativeUint16Array, [length], new.target);\n      }\n\n      // set values\n      for (let i = 0; i < length; ++i) {\n        float16bitsArray[i] = roundToFloat16Bits(list[i]);\n      }\n    } else {\n      // primitive, ArrayBuffer\n      float16bitsArray = ReflectConstruct(NativeUint16Array, arguments, new.target);\n    }\n\n    /** @type {Float16Array} */\n    const proxy = /** @type {any} */new NativeProxy(float16bitsArray, handler);\n\n    // proxy private storage\n    WeakMapPrototypeSet(float16bitsArrays, proxy, float16bitsArray);\n    return proxy;\n  }\n\n  /**\n   * limitation: `Object.getOwnPropertyNames(Float16Array)` or `Reflect.ownKeys(Float16Array)` include this key\n   *\n   * @see https://tc39.es/ecma262/#sec-%typedarray%.from\n   */\n  static from(src) {\n    const Constructor = this;\n    if (!ReflectHas(Constructor, brand)) {\n      throw NativeTypeError(THIS_CONSTRUCTOR_IS_NOT_A_SUBCLASS_OF_FLOAT16ARRAY);\n    }\n\n    // for optimization\n    if (Constructor === Float16Array) {\n      if (isFloat16Array(src) && (arguments.length <= 1 ? 0 : arguments.length - 1) === 0) {\n        const float16bitsArray = getFloat16BitsArray(src);\n        const uint16 = new NativeUint16Array(TypedArrayPrototypeGetBuffer(float16bitsArray), TypedArrayPrototypeGetByteOffset(float16bitsArray), TypedArrayPrototypeGetLength(float16bitsArray));\n        return new Float16Array(TypedArrayPrototypeGetBuffer(TypedArrayPrototypeSlice(uint16)));\n      }\n      if ((arguments.length <= 1 ? 0 : arguments.length - 1) === 0) {\n        return new Float16Array(TypedArrayPrototypeGetBuffer(Uint16ArrayFrom(src, roundToFloat16Bits)));\n      }\n      const mapFunc = arguments.length <= 1 ? undefined : arguments[1];\n      const thisArg = arguments.length <= 2 ? undefined : arguments[2];\n      return new Float16Array(TypedArrayPrototypeGetBuffer(Uint16ArrayFrom(src, function (val) {\n        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n          args[_key - 1] = arguments[_key];\n        }\n        return roundToFloat16Bits(ReflectApply(mapFunc, this, [val, ...safeIfNeeded(args)]));\n      }, thisArg)));\n    }\n\n    /** @type {ArrayLike<unknown>} */\n    let list;\n    /** @type {number} */\n    let length;\n    const iterator = src[SymbolIterator];\n    if (iterator != null && typeof iterator !== \"function\") {\n      throw NativeTypeError(ITERATOR_PROPERTY_IS_NOT_CALLABLE);\n    }\n    if (iterator != null) {\n      // Iterable (TypedArray, Array)\n      // for optimization\n      if (isOrdinaryArray(src)) {\n        list = src;\n        length = src.length;\n      } else if (isOrdinaryNativeTypedArray(src)) {\n        list = src;\n        length = TypedArrayPrototypeGetLength(src);\n      } else {\n        // eslint-disable-next-line no-restricted-syntax\n        list = [...src];\n        length = list.length;\n      }\n    } else {\n      // ArrayLike\n      if (src == null) {\n        throw NativeTypeError(CANNOT_CONVERT_UNDEFINED_OR_NULL_TO_OBJECT);\n      }\n      list = NativeObject(src);\n      length = ToLength(list.length);\n    }\n    const array = new Constructor(length);\n    if ((arguments.length <= 1 ? 0 : arguments.length - 1) === 0) {\n      for (let i = 0; i < length; ++i) {\n        array[i] = /** @type {number} */list[i];\n      }\n    } else {\n      const mapFunc = arguments.length <= 1 ? undefined : arguments[1];\n      const thisArg = arguments.length <= 2 ? undefined : arguments[2];\n      for (let i = 0; i < length; ++i) {\n        array[i] = ReflectApply(mapFunc, thisArg, [list[i], i]);\n      }\n    }\n    return array;\n  }\n\n  /**\n   * limitation: `Object.getOwnPropertyNames(Float16Array)` or `Reflect.ownKeys(Float16Array)` include this key\n   *\n   * @see https://tc39.es/ecma262/#sec-%typedarray%.of\n   */\n  static of() {\n    const Constructor = this;\n    if (!ReflectHas(Constructor, brand)) {\n      throw NativeTypeError(THIS_CONSTRUCTOR_IS_NOT_A_SUBCLASS_OF_FLOAT16ARRAY);\n    }\n    const length = arguments.length;\n\n    // for optimization\n    if (Constructor === Float16Array) {\n      const proxy = new Float16Array(length);\n      const float16bitsArray = getFloat16BitsArray(proxy);\n      for (let i = 0; i < length; ++i) {\n        float16bitsArray[i] = roundToFloat16Bits(i < 0 || arguments.length <= i ? undefined : arguments[i]);\n      }\n      return proxy;\n    }\n    const array = new Constructor(length);\n    for (let i = 0; i < length; ++i) {\n      array[i] = i < 0 || arguments.length <= i ? undefined : arguments[i];\n    }\n    return array;\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.keys */\n  keys() {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n    return TypedArrayPrototypeKeys(float16bitsArray);\n  }\n\n  /**\n   * limitation: returns a object whose prototype is not `%ArrayIteratorPrototype%`\n   *\n   * @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.values\n   */\n  values() {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n    return wrap(function* () {\n      // eslint-disable-next-line no-restricted-syntax\n      for (const val of TypedArrayPrototypeValues(float16bitsArray)) {\n        yield convertToNumber(val);\n      }\n    }());\n  }\n\n  /**\n   * limitation: returns a object whose prototype is not `%ArrayIteratorPrototype%`\n   *\n   * @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.entries\n   */\n  entries() {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n    return wrap(function* () {\n      // eslint-disable-next-line no-restricted-syntax\n      for (const [i, val] of TypedArrayPrototypeEntries(float16bitsArray)) {\n        yield (/** @type {[Number, number]} */[i, convertToNumber(val)]\n        );\n      }\n    }());\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.at */\n  at(index) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n    const relativeIndex = ToIntegerOrInfinity(index);\n    const k = relativeIndex >= 0 ? relativeIndex : length + relativeIndex;\n    if (k < 0 || k >= length) {\n      return;\n    }\n    return convertToNumber(float16bitsArray[k]);\n  }\n\n  /** @see https://tc39.es/proposal-change-array-by-copy/#sec-%typedarray%.prototype.with */\n  with(index, value) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n    const relativeIndex = ToIntegerOrInfinity(index);\n    const k = relativeIndex >= 0 ? relativeIndex : length + relativeIndex;\n    const number = +value;\n    if (k < 0 || k >= length) {\n      throw NativeRangeError(OFFSET_IS_OUT_OF_BOUNDS);\n    }\n\n    // don't use SpeciesConstructor\n    const uint16 = new NativeUint16Array(TypedArrayPrototypeGetBuffer(float16bitsArray), TypedArrayPrototypeGetByteOffset(float16bitsArray), TypedArrayPrototypeGetLength(float16bitsArray));\n    const cloned = new Float16Array(TypedArrayPrototypeGetBuffer(TypedArrayPrototypeSlice(uint16)));\n    const array = getFloat16BitsArray(cloned);\n    array[k] = roundToFloat16Bits(number);\n    return cloned;\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.map */\n  map(callback) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n    const thisArg = arguments.length <= 1 ? undefined : arguments[1];\n    const Constructor = SpeciesConstructor(float16bitsArray, Float16Array);\n\n    // for optimization\n    if (Constructor === Float16Array) {\n      const proxy = new Float16Array(length);\n      const array = getFloat16BitsArray(proxy);\n      for (let i = 0; i < length; ++i) {\n        const val = convertToNumber(float16bitsArray[i]);\n        array[i] = roundToFloat16Bits(ReflectApply(callback, thisArg, [val, i, this]));\n      }\n      return proxy;\n    }\n    const array = new Constructor(length);\n    assertSpeciesTypedArray(array, length);\n    for (let i = 0; i < length; ++i) {\n      const val = convertToNumber(float16bitsArray[i]);\n      array[i] = ReflectApply(callback, thisArg, [val, i, this]);\n    }\n    return (/** @type {any} */array\n    );\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.filter */\n  filter(callback) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n    const thisArg = arguments.length <= 1 ? undefined : arguments[1];\n    const kept = [];\n    for (let i = 0; i < length; ++i) {\n      const val = convertToNumber(float16bitsArray[i]);\n      if (ReflectApply(callback, thisArg, [val, i, this])) {\n        ArrayPrototypePush(kept, val);\n      }\n    }\n    const Constructor = SpeciesConstructor(float16bitsArray, Float16Array);\n    const array = new Constructor(kept);\n    assertSpeciesTypedArray(array);\n    return (/** @type {any} */array\n    );\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.reduce */\n  reduce(callback) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n    if (length === 0 && (arguments.length <= 1 ? 0 : arguments.length - 1) === 0) {\n      throw NativeTypeError(REDUCE_OF_EMPTY_ARRAY_WITH_NO_INITIAL_VALUE);\n    }\n    let accumulator, start;\n    if ((arguments.length <= 1 ? 0 : arguments.length - 1) === 0) {\n      accumulator = convertToNumber(float16bitsArray[0]);\n      start = 1;\n    } else {\n      accumulator = arguments.length <= 1 ? undefined : arguments[1];\n      start = 0;\n    }\n    for (let i = start; i < length; ++i) {\n      accumulator = callback(accumulator, convertToNumber(float16bitsArray[i]), i, this);\n    }\n    return accumulator;\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.reduceright */\n  reduceRight(callback) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n    if (length === 0 && (arguments.length <= 1 ? 0 : arguments.length - 1) === 0) {\n      throw NativeTypeError(REDUCE_OF_EMPTY_ARRAY_WITH_NO_INITIAL_VALUE);\n    }\n    let accumulator, start;\n    if ((arguments.length <= 1 ? 0 : arguments.length - 1) === 0) {\n      accumulator = convertToNumber(float16bitsArray[length - 1]);\n      start = length - 2;\n    } else {\n      accumulator = arguments.length <= 1 ? undefined : arguments[1];\n      start = length - 1;\n    }\n    for (let i = start; i >= 0; --i) {\n      accumulator = callback(accumulator, convertToNumber(float16bitsArray[i]), i, this);\n    }\n    return accumulator;\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.foreach */\n  forEach(callback) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n    const thisArg = arguments.length <= 1 ? undefined : arguments[1];\n    for (let i = 0; i < length; ++i) {\n      ReflectApply(callback, thisArg, [convertToNumber(float16bitsArray[i]), i, this]);\n    }\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.find */\n  find(callback) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n    const thisArg = arguments.length <= 1 ? undefined : arguments[1];\n    for (let i = 0; i < length; ++i) {\n      const value = convertToNumber(float16bitsArray[i]);\n      if (ReflectApply(callback, thisArg, [value, i, this])) {\n        return value;\n      }\n    }\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.findindex */\n  findIndex(callback) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n    const thisArg = arguments.length <= 1 ? undefined : arguments[1];\n    for (let i = 0; i < length; ++i) {\n      const value = convertToNumber(float16bitsArray[i]);\n      if (ReflectApply(callback, thisArg, [value, i, this])) {\n        return i;\n      }\n    }\n    return -1;\n  }\n\n  /** @see https://tc39.es/proposal-array-find-from-last/index.html#sec-%typedarray%.prototype.findlast */\n  findLast(callback) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n    const thisArg = arguments.length <= 1 ? undefined : arguments[1];\n    for (let i = length - 1; i >= 0; --i) {\n      const value = convertToNumber(float16bitsArray[i]);\n      if (ReflectApply(callback, thisArg, [value, i, this])) {\n        return value;\n      }\n    }\n  }\n\n  /** @see https://tc39.es/proposal-array-find-from-last/index.html#sec-%typedarray%.prototype.findlastindex */\n  findLastIndex(callback) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n    const thisArg = arguments.length <= 1 ? undefined : arguments[1];\n    for (let i = length - 1; i >= 0; --i) {\n      const value = convertToNumber(float16bitsArray[i]);\n      if (ReflectApply(callback, thisArg, [value, i, this])) {\n        return i;\n      }\n    }\n    return -1;\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.every */\n  every(callback) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n    const thisArg = arguments.length <= 1 ? undefined : arguments[1];\n    for (let i = 0; i < length; ++i) {\n      if (!ReflectApply(callback, thisArg, [convertToNumber(float16bitsArray[i]), i, this])) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.some */\n  some(callback) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n    const thisArg = arguments.length <= 1 ? undefined : arguments[1];\n    for (let i = 0; i < length; ++i) {\n      if (ReflectApply(callback, thisArg, [convertToNumber(float16bitsArray[i]), i, this])) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.set */\n  set(input) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n    const targetOffset = ToIntegerOrInfinity(arguments.length <= 1 ? undefined : arguments[1]);\n    if (targetOffset < 0) {\n      throw NativeRangeError(OFFSET_IS_OUT_OF_BOUNDS);\n    }\n    if (input == null) {\n      throw NativeTypeError(CANNOT_CONVERT_UNDEFINED_OR_NULL_TO_OBJECT);\n    }\n    if (isNativeBigIntTypedArray(input)) {\n      throw NativeTypeError(CANNOT_MIX_BIGINT_AND_OTHER_TYPES);\n    }\n\n    // for optimization\n    if (isFloat16Array(input)) {\n      // peel off Proxy\n      return TypedArrayPrototypeSet(getFloat16BitsArray(this), getFloat16BitsArray(input), targetOffset);\n    }\n    if (isNativeTypedArray(input)) {\n      const buffer = TypedArrayPrototypeGetBuffer(input);\n      if (IsDetachedBuffer(buffer)) {\n        throw NativeTypeError(ATTEMPTING_TO_ACCESS_DETACHED_ARRAYBUFFER);\n      }\n    }\n    const targetLength = TypedArrayPrototypeGetLength(float16bitsArray);\n    const src = NativeObject(input);\n    const srcLength = ToLength(src.length);\n    if (targetOffset === Infinity || srcLength + targetOffset > targetLength) {\n      throw NativeRangeError(OFFSET_IS_OUT_OF_BOUNDS);\n    }\n    for (let i = 0; i < srcLength; ++i) {\n      float16bitsArray[i + targetOffset] = roundToFloat16Bits(src[i]);\n    }\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.reverse */\n  reverse() {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n    TypedArrayPrototypeReverse(float16bitsArray);\n    return this;\n  }\n\n  /** @see https://tc39.es/proposal-change-array-by-copy/#sec-%typedarray%.prototype.toReversed */\n  toReversed() {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    // don't use SpeciesConstructor\n    const uint16 = new NativeUint16Array(TypedArrayPrototypeGetBuffer(float16bitsArray), TypedArrayPrototypeGetByteOffset(float16bitsArray), TypedArrayPrototypeGetLength(float16bitsArray));\n    const cloned = new Float16Array(TypedArrayPrototypeGetBuffer(TypedArrayPrototypeSlice(uint16)));\n    const clonedFloat16bitsArray = getFloat16BitsArray(cloned);\n    TypedArrayPrototypeReverse(clonedFloat16bitsArray);\n    return cloned;\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.fill */\n  fill(value) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n    for (var _len2 = arguments.length, opts = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      opts[_key2 - 1] = arguments[_key2];\n    }\n    TypedArrayPrototypeFill(float16bitsArray, roundToFloat16Bits(value), ...safeIfNeeded(opts));\n    return this;\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.copywithin */\n  copyWithin(target, start) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n    for (var _len3 = arguments.length, opts = new Array(_len3 > 2 ? _len3 - 2 : 0), _key3 = 2; _key3 < _len3; _key3++) {\n      opts[_key3 - 2] = arguments[_key3];\n    }\n    TypedArrayPrototypeCopyWithin(float16bitsArray, target, start, ...safeIfNeeded(opts));\n    return this;\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.sort */\n  sort(compareFn) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n    const sortCompare = compareFn !== undefined ? compareFn : defaultCompare;\n    TypedArrayPrototypeSort(float16bitsArray, (x, y) => {\n      return sortCompare(convertToNumber(x), convertToNumber(y));\n    });\n    return this;\n  }\n\n  /** @see https://tc39.es/proposal-change-array-by-copy/#sec-%typedarray%.prototype.toSorted */\n  toSorted(compareFn) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n    if (compareFn !== undefined && typeof compareFn !== \"function\") {\n      throw new NativeTypeError(THE_COMPARISON_FUNCTION_MUST_BE_EITHER_A_FUNCTION_OR_UNDEFINED);\n    }\n    const sortCompare = compareFn !== undefined ? compareFn : defaultCompare;\n\n    // don't use SpeciesConstructor\n    const uint16 = new NativeUint16Array(TypedArrayPrototypeGetBuffer(float16bitsArray), TypedArrayPrototypeGetByteOffset(float16bitsArray), TypedArrayPrototypeGetLength(float16bitsArray));\n    const cloned = new Float16Array(TypedArrayPrototypeGetBuffer(TypedArrayPrototypeSlice(uint16)));\n    const clonedFloat16bitsArray = getFloat16BitsArray(cloned);\n    TypedArrayPrototypeSort(clonedFloat16bitsArray, (x, y) => {\n      return sortCompare(convertToNumber(x), convertToNumber(y));\n    });\n    return cloned;\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.slice */\n  slice(start, end) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n    const Constructor = SpeciesConstructor(float16bitsArray, Float16Array);\n\n    // for optimization\n    if (Constructor === Float16Array) {\n      const uint16 = new NativeUint16Array(TypedArrayPrototypeGetBuffer(float16bitsArray), TypedArrayPrototypeGetByteOffset(float16bitsArray), TypedArrayPrototypeGetLength(float16bitsArray));\n      return new Float16Array(TypedArrayPrototypeGetBuffer(TypedArrayPrototypeSlice(uint16, start, end)));\n    }\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n    const relativeStart = ToIntegerOrInfinity(start);\n    const relativeEnd = end === undefined ? length : ToIntegerOrInfinity(end);\n    let k;\n    if (relativeStart === -Infinity) {\n      k = 0;\n    } else if (relativeStart < 0) {\n      k = length + relativeStart > 0 ? length + relativeStart : 0;\n    } else {\n      k = length < relativeStart ? length : relativeStart;\n    }\n    let final;\n    if (relativeEnd === -Infinity) {\n      final = 0;\n    } else if (relativeEnd < 0) {\n      final = length + relativeEnd > 0 ? length + relativeEnd : 0;\n    } else {\n      final = length < relativeEnd ? length : relativeEnd;\n    }\n    const count = final - k > 0 ? final - k : 0;\n    const array = new Constructor(count);\n    assertSpeciesTypedArray(array, count);\n    if (count === 0) {\n      return array;\n    }\n    const buffer = TypedArrayPrototypeGetBuffer(float16bitsArray);\n    if (IsDetachedBuffer(buffer)) {\n      throw NativeTypeError(ATTEMPTING_TO_ACCESS_DETACHED_ARRAYBUFFER);\n    }\n    let n = 0;\n    while (k < final) {\n      array[n] = convertToNumber(float16bitsArray[k]);\n      ++k;\n      ++n;\n    }\n    return (/** @type {any} */array\n    );\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.subarray */\n  subarray(begin, end) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n    const Constructor = SpeciesConstructor(float16bitsArray, Float16Array);\n    const uint16 = new NativeUint16Array(TypedArrayPrototypeGetBuffer(float16bitsArray), TypedArrayPrototypeGetByteOffset(float16bitsArray), TypedArrayPrototypeGetLength(float16bitsArray));\n    const uint16Subarray = TypedArrayPrototypeSubarray(uint16, begin, end);\n    const array = new Constructor(TypedArrayPrototypeGetBuffer(uint16Subarray), TypedArrayPrototypeGetByteOffset(uint16Subarray), TypedArrayPrototypeGetLength(uint16Subarray));\n    assertSpeciesTypedArray(array);\n    return (/** @type {any} */array\n    );\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.indexof */\n  indexOf(element) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n    let from = ToIntegerOrInfinity(arguments.length <= 1 ? undefined : arguments[1]);\n    if (from === Infinity) {\n      return -1;\n    }\n    if (from < 0) {\n      from += length;\n      if (from < 0) {\n        from = 0;\n      }\n    }\n    for (let i = from; i < length; ++i) {\n      if (ObjectHasOwn(float16bitsArray, i) && convertToNumber(float16bitsArray[i]) === element) {\n        return i;\n      }\n    }\n    return -1;\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.lastindexof */\n  lastIndexOf(element) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n    let from = (arguments.length <= 1 ? 0 : arguments.length - 1) >= 1 ? ToIntegerOrInfinity(arguments.length <= 1 ? undefined : arguments[1]) : length - 1;\n    if (from === -Infinity) {\n      return -1;\n    }\n    if (from >= 0) {\n      from = from < length - 1 ? from : length - 1;\n    } else {\n      from += length;\n    }\n    for (let i = from; i >= 0; --i) {\n      if (ObjectHasOwn(float16bitsArray, i) && convertToNumber(float16bitsArray[i]) === element) {\n        return i;\n      }\n    }\n    return -1;\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.includes */\n  includes(element) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n    let from = ToIntegerOrInfinity(arguments.length <= 1 ? undefined : arguments[1]);\n    if (from === Infinity) {\n      return false;\n    }\n    if (from < 0) {\n      from += length;\n      if (from < 0) {\n        from = 0;\n      }\n    }\n    const isNaN = NumberIsNaN(element);\n    for (let i = from; i < length; ++i) {\n      const value = convertToNumber(float16bitsArray[i]);\n      if (isNaN && NumberIsNaN(value)) {\n        return true;\n      }\n      if (value === element) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.join */\n  join(separator) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n    const array = copyToArray(float16bitsArray);\n    return ArrayPrototypeJoin(array, separator);\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.tolocalestring */\n  toLocaleString() {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n    const array = copyToArray(float16bitsArray);\n    for (var _len4 = arguments.length, opts = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n      opts[_key4] = arguments[_key4];\n    }\n    return ArrayPrototypeToLocaleString(array, ...safeIfNeeded(opts));\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-get-%typedarray%.prototype-@@tostringtag */\n  get [SymbolToStringTag]() {\n    if (isFloat16Array(this)) {\n      return (/** @type {any} */\"Float16Array\"\n      );\n    }\n  }\n}\n\n/** @see https://tc39.es/ecma262/#sec-typedarray.bytes_per_element */\nObjectDefineProperty(Float16Array, \"BYTES_PER_ELEMENT\", {\n  value: BYTES_PER_ELEMENT\n});\n\n// limitation: It is peaked by `Object.getOwnPropertySymbols(Float16Array)` and `Reflect.ownKeys(Float16Array)`\nObjectDefineProperty(Float16Array, brand, {});\n\n/** @see https://tc39.es/ecma262/#sec-properties-of-the-typedarray-constructors */\nReflectSetPrototypeOf(Float16Array, TypedArray);\nconst Float16ArrayPrototype = Float16Array.prototype;\n\n/** @see https://tc39.es/ecma262/#sec-typedarray.prototype.bytes_per_element */\nObjectDefineProperty(Float16ArrayPrototype, \"BYTES_PER_ELEMENT\", {\n  value: BYTES_PER_ELEMENT\n});\n\n/** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype-@@iterator */\nObjectDefineProperty(Float16ArrayPrototype, SymbolIterator, {\n  value: Float16ArrayPrototype.values,\n  writable: true,\n  configurable: true\n});\nReflectSetPrototypeOf(Float16ArrayPrototype, TypedArrayPrototype);","map":{"version":3,"names":["safeIfNeeded","wrap","brand","hasFloat16ArrayBrand","convertToNumber","roundToFloat16Bits","isArrayBuffer","isCanonicalIntegerIndexString","isNativeBigIntTypedArray","isNativeTypedArray","isObject","isOrdinaryArray","isOrdinaryNativeTypedArray","ATTEMPTING_TO_ACCESS_DETACHED_ARRAYBUFFER","CANNOT_CONVERT_UNDEFINED_OR_NULL_TO_OBJECT","CANNOT_MIX_BIGINT_AND_OTHER_TYPES","DERIVED_CONSTRUCTOR_CREATED_TYPEDARRAY_OBJECT_WHICH_WAS_TOO_SMALL_LENGTH","ITERATOR_PROPERTY_IS_NOT_CALLABLE","OFFSET_IS_OUT_OF_BOUNDS","REDUCE_OF_EMPTY_ARRAY_WITH_NO_INITIAL_VALUE","SPECIES_CONSTRUCTOR_DIDNT_RETURN_TYPEDARRAY_OBJECT","THE_COMPARISON_FUNCTION_MUST_BE_EITHER_A_FUNCTION_OR_UNDEFINED","THIS_CONSTRUCTOR_IS_NOT_A_SUBCLASS_OF_FLOAT16ARRAY","THIS_IS_NOT_A_FLOAT16ARRAY_OBJECT","ArrayBufferIsView","ArrayPrototypeJoin","ArrayPrototypePush","ArrayPrototypeToLocaleString","NativeArrayBuffer","NativeObject","NativeProxy","NativeRangeError","NativeTypeError","NativeUint16Array","NativeWeakMap","NativeWeakSet","NumberIsNaN","ObjectDefineProperty","ObjectFreeze","ObjectHasOwn","ObjectPrototype__lookupGetter__","ReflectApply","ReflectConstruct","ReflectDefineProperty","ReflectGet","ReflectGetOwnPropertyDescriptor","ReflectHas","ReflectOwnKeys","ReflectSet","ReflectSetPrototypeOf","SymbolIterator","SymbolToStringTag","TypedArray","TypedArrayPrototype","TypedArrayPrototypeCopyWithin","TypedArrayPrototypeEntries","TypedArrayPrototypeFill","TypedArrayPrototypeGetBuffer","TypedArrayPrototypeGetByteOffset","TypedArrayPrototypeGetLength","TypedArrayPrototypeKeys","TypedArrayPrototypeReverse","TypedArrayPrototypeSet","TypedArrayPrototypeSlice","TypedArrayPrototypeSort","TypedArrayPrototypeSubarray","TypedArrayPrototypeValues","Uint16ArrayFrom","WeakMapPrototypeGet","WeakMapPrototypeHas","WeakMapPrototypeSet","WeakSetPrototypeAdd","WeakSetPrototypeHas","IsDetachedBuffer","SpeciesConstructor","ToIntegerOrInfinity","ToLength","defaultCompare","BYTES_PER_ELEMENT","float16bitsArrays","isFloat16Array","target","assertFloat16Array","assertSpeciesTypedArray","count","isTargetFloat16Array","isTargetTypedArray","length","float16bitsArray","getFloat16BitsArray","float16","undefined","buffer","cloned","Float16Array","byteOffset","constructor","copyToArray","array","i","TypedArrayPrototypeGetters","key","descriptor","get","handler","receiver","set","value","getOwnPropertyDescriptor","defineProperty","input","_byteOffset","_length","new","list","data","iterator","arguments","proxy","from","src","Constructor","uint16","mapFunc","thisArg","val","_len","args","Array","_key","of","keys","values","entries","at","index","relativeIndex","k","with","number","map","callback","filter","kept","reduce","accumulator","start","reduceRight","forEach","find","findIndex","findLast","findLastIndex","every","some","targetOffset","targetLength","srcLength","Infinity","reverse","toReversed","clonedFloat16bitsArray","fill","_len2","opts","_key2","copyWithin","_len3","_key3","sort","compareFn","sortCompare","x","y","toSorted","slice","end","relativeStart","relativeEnd","final","n","subarray","begin","uint16Subarray","indexOf","element","lastIndexOf","includes","isNaN","join","separator","toLocaleString","_len4","_key4","Float16ArrayPrototype","prototype","writable","configurable"],"sources":["/home/umang/iHub/DFS_ReactViewer/client/node_modules/@petamoriken/float16/src/Float16Array.mjs"],"sourcesContent":["import { safeIfNeeded, wrap } from \"./_util/arrayIterator.mjs\";\nimport { brand, hasFloat16ArrayBrand } from \"./_util/brand.mjs\";\nimport { convertToNumber, roundToFloat16Bits } from \"./_util/converter.mjs\";\nimport {\n  isArrayBuffer,\n  isCanonicalIntegerIndexString,\n  isNativeBigIntTypedArray,\n  isNativeTypedArray,\n  isObject,\n  isOrdinaryArray,\n  isOrdinaryNativeTypedArray,\n} from \"./_util/is.mjs\";\nimport {\n  ATTEMPTING_TO_ACCESS_DETACHED_ARRAYBUFFER,\n  CANNOT_CONVERT_UNDEFINED_OR_NULL_TO_OBJECT,\n  CANNOT_MIX_BIGINT_AND_OTHER_TYPES,\n  DERIVED_CONSTRUCTOR_CREATED_TYPEDARRAY_OBJECT_WHICH_WAS_TOO_SMALL_LENGTH,\n  ITERATOR_PROPERTY_IS_NOT_CALLABLE,\n  OFFSET_IS_OUT_OF_BOUNDS,\n  REDUCE_OF_EMPTY_ARRAY_WITH_NO_INITIAL_VALUE,\n  SPECIES_CONSTRUCTOR_DIDNT_RETURN_TYPEDARRAY_OBJECT,\n  THE_COMPARISON_FUNCTION_MUST_BE_EITHER_A_FUNCTION_OR_UNDEFINED,\n  THIS_CONSTRUCTOR_IS_NOT_A_SUBCLASS_OF_FLOAT16ARRAY,\n  THIS_IS_NOT_A_FLOAT16ARRAY_OBJECT,\n} from \"./_util/messages.mjs\";\nimport {\n  ArrayBufferIsView,\n  ArrayPrototypeJoin,\n  ArrayPrototypePush,\n  ArrayPrototypeToLocaleString,\n  NativeArrayBuffer,\n  NativeObject,\n  NativeProxy,\n  NativeRangeError,\n  NativeTypeError,\n  NativeUint16Array,\n  NativeWeakMap,\n  NativeWeakSet,\n  NumberIsNaN,\n  ObjectDefineProperty,\n  ObjectFreeze,\n  ObjectHasOwn,\n  ObjectPrototype__lookupGetter__,\n  ReflectApply,\n  ReflectConstruct,\n  ReflectDefineProperty,\n  ReflectGet,\n  ReflectGetOwnPropertyDescriptor,\n  ReflectHas,\n  ReflectOwnKeys,\n  ReflectSet,\n  ReflectSetPrototypeOf,\n  SymbolIterator,\n  SymbolToStringTag,\n  TypedArray,\n  TypedArrayPrototype,\n  TypedArrayPrototypeCopyWithin,\n  TypedArrayPrototypeEntries,\n  TypedArrayPrototypeFill,\n  TypedArrayPrototypeGetBuffer,\n  TypedArrayPrototypeGetByteOffset,\n  TypedArrayPrototypeGetLength,\n  TypedArrayPrototypeKeys,\n  TypedArrayPrototypeReverse,\n  TypedArrayPrototypeSet,\n  TypedArrayPrototypeSlice,\n  TypedArrayPrototypeSort,\n  TypedArrayPrototypeSubarray,\n  TypedArrayPrototypeValues,\n  Uint16ArrayFrom,\n  WeakMapPrototypeGet,\n  WeakMapPrototypeHas,\n  WeakMapPrototypeSet,\n  WeakSetPrototypeAdd,\n  WeakSetPrototypeHas,\n} from \"./_util/primordials.mjs\";\nimport {\n  IsDetachedBuffer,\n  SpeciesConstructor,\n  ToIntegerOrInfinity,\n  ToLength,\n  defaultCompare,\n} from \"./_util/spec.mjs\";\n\nconst BYTES_PER_ELEMENT = 2;\n\n/** @typedef {Uint16Array & { __float16bits: never }} Float16BitsArray */\n\n/** @type {WeakMap<Float16Array, Float16BitsArray>} */\nconst float16bitsArrays = new NativeWeakMap();\n\n/**\n * @param {unknown} target\n * @returns {target is Float16Array}\n */\nexport function isFloat16Array(target) {\n  return WeakMapPrototypeHas(float16bitsArrays, target) ||\n    (!ArrayBufferIsView(target) && hasFloat16ArrayBrand(target));\n}\n\n/**\n * @param {unknown} target\n * @throws {TypeError}\n * @returns {asserts target is Float16Array}\n */\nfunction assertFloat16Array(target) {\n  if (!isFloat16Array(target)) {\n    throw NativeTypeError(THIS_IS_NOT_A_FLOAT16ARRAY_OBJECT);\n  }\n}\n\n/**\n * @param {unknown} target\n * @param {number=} count\n * @throws {TypeError}\n * @returns {asserts target is Uint8Array|Uint8ClampedArray|Uint16Array|Uint32Array|Int8Array|Int16Array|Int32Array|Float16Array|Float32Array|Float64Array}\n */\nfunction assertSpeciesTypedArray(target, count) {\n  const isTargetFloat16Array = isFloat16Array(target);\n  const isTargetTypedArray = isNativeTypedArray(target);\n\n  if (!isTargetFloat16Array && !isTargetTypedArray) {\n    throw NativeTypeError(SPECIES_CONSTRUCTOR_DIDNT_RETURN_TYPEDARRAY_OBJECT);\n  }\n\n  if (typeof count === \"number\") {\n    let length;\n    if (isTargetFloat16Array) {\n      const float16bitsArray = getFloat16BitsArray(target);\n      length = TypedArrayPrototypeGetLength(float16bitsArray);\n    } else {\n      length = TypedArrayPrototypeGetLength(target);\n    }\n\n    if (length < count) {\n      throw NativeTypeError(\n        DERIVED_CONSTRUCTOR_CREATED_TYPEDARRAY_OBJECT_WHICH_WAS_TOO_SMALL_LENGTH\n      );\n    }\n  }\n\n  if (isNativeBigIntTypedArray(target)) {\n    throw NativeTypeError(CANNOT_MIX_BIGINT_AND_OTHER_TYPES);\n  }\n}\n\n/**\n * @param {Float16Array} float16\n * @throws {TypeError}\n * @returns {Float16BitsArray}\n */\nfunction getFloat16BitsArray(float16) {\n  const float16bitsArray = WeakMapPrototypeGet(float16bitsArrays, float16);\n  if (float16bitsArray !== undefined) {\n    const buffer = TypedArrayPrototypeGetBuffer(float16bitsArray);\n\n    if (IsDetachedBuffer(buffer)) {\n      throw NativeTypeError(ATTEMPTING_TO_ACCESS_DETACHED_ARRAYBUFFER);\n    }\n\n    return float16bitsArray;\n  }\n\n  // from another Float16Array instance (a different version?)\n  const buffer = /** @type {any} */ (float16).buffer;\n\n  if (IsDetachedBuffer(buffer)) {\n    throw NativeTypeError(ATTEMPTING_TO_ACCESS_DETACHED_ARRAYBUFFER);\n  }\n\n  const cloned = ReflectConstruct(Float16Array, [\n    buffer,\n    /** @type {any} */ (float16).byteOffset,\n    /** @type {any} */ (float16).length,\n  ], float16.constructor);\n  return WeakMapPrototypeGet(float16bitsArrays, cloned);\n}\n\n/**\n * @param {Float16BitsArray} float16bitsArray\n * @returns {number[]}\n */\nfunction copyToArray(float16bitsArray) {\n  const length = TypedArrayPrototypeGetLength(float16bitsArray);\n\n  const array = [];\n  for (let i = 0; i < length; ++i) {\n    array[i] = convertToNumber(float16bitsArray[i]);\n  }\n\n  return array;\n}\n\n/** @type {WeakSet<Function>} */\nconst TypedArrayPrototypeGetters = new NativeWeakSet();\nfor (const key of ReflectOwnKeys(TypedArrayPrototype)) {\n  // @@toStringTag getter property is defined in Float16Array.prototype\n  if (key === SymbolToStringTag) {\n    continue;\n  }\n\n  const descriptor = ReflectGetOwnPropertyDescriptor(TypedArrayPrototype, key);\n  if (ObjectHasOwn(descriptor, \"get\") && typeof descriptor.get === \"function\") {\n    WeakSetPrototypeAdd(TypedArrayPrototypeGetters, descriptor.get);\n  }\n}\n\nconst handler = ObjectFreeze(/** @type {ProxyHandler<Float16BitsArray>} */ ({\n  get(target, key, receiver) {\n    if (isCanonicalIntegerIndexString(key) && ObjectHasOwn(target, key)) {\n      return convertToNumber(ReflectGet(target, key));\n    }\n\n    // %TypedArray%.prototype getter properties cannot called by Proxy receiver\n    if (WeakSetPrototypeHas(TypedArrayPrototypeGetters, ObjectPrototype__lookupGetter__(target, key))) {\n      return ReflectGet(target, key);\n    }\n\n    return ReflectGet(target, key, receiver);\n  },\n\n  set(target, key, value, receiver) {\n    if (isCanonicalIntegerIndexString(key) && ObjectHasOwn(target, key)) {\n      return ReflectSet(target, key, roundToFloat16Bits(value));\n    }\n\n    return ReflectSet(target, key, value, receiver);\n  },\n\n  getOwnPropertyDescriptor(target, key) {\n    if (isCanonicalIntegerIndexString(key) && ObjectHasOwn(target, key)) {\n      const descriptor = ReflectGetOwnPropertyDescriptor(target, key);\n      descriptor.value = convertToNumber(descriptor.value);\n      return descriptor;\n    }\n\n    return ReflectGetOwnPropertyDescriptor(target, key);\n  },\n\n  defineProperty(target, key, descriptor) {\n    if (\n      isCanonicalIntegerIndexString(key) &&\n      ObjectHasOwn(target, key) &&\n      ObjectHasOwn(descriptor, \"value\")\n    ) {\n      descriptor.value = roundToFloat16Bits(descriptor.value);\n      return ReflectDefineProperty(target, key, descriptor);\n    }\n\n    return ReflectDefineProperty(target, key, descriptor);\n  },\n}));\n\nexport class Float16Array {\n  /** @see https://tc39.es/ecma262/#sec-typedarray */\n  constructor(input, _byteOffset, _length) {\n    /** @type {Float16BitsArray} */\n    let float16bitsArray;\n\n    if (isFloat16Array(input)) {\n      float16bitsArray = ReflectConstruct(NativeUint16Array, [getFloat16BitsArray(input)], new.target);\n    } else if (isObject(input) && !isArrayBuffer(input)) { // object without ArrayBuffer\n      /** @type {ArrayLike<unknown>} */\n      let list;\n      /** @type {number} */\n      let length;\n\n      if (isNativeTypedArray(input)) { // TypedArray\n        list = input;\n        length = TypedArrayPrototypeGetLength(input);\n\n        const buffer = TypedArrayPrototypeGetBuffer(input);\n\n        if (IsDetachedBuffer(buffer)) {\n          throw NativeTypeError(ATTEMPTING_TO_ACCESS_DETACHED_ARRAYBUFFER);\n        }\n\n        if (isNativeBigIntTypedArray(input)) {\n          throw NativeTypeError(CANNOT_MIX_BIGINT_AND_OTHER_TYPES);\n        }\n\n        const data = new NativeArrayBuffer(\n          length * BYTES_PER_ELEMENT\n        );\n        float16bitsArray = ReflectConstruct(NativeUint16Array, [data], new.target);\n      } else {\n        const iterator = input[SymbolIterator];\n        if (iterator != null && typeof iterator !== \"function\") {\n          throw NativeTypeError(ITERATOR_PROPERTY_IS_NOT_CALLABLE);\n        }\n\n        if (iterator != null) { // Iterable (Array)\n          // for optimization\n          if (isOrdinaryArray(input)) {\n            list = input;\n            length = input.length;\n          } else {\n            // eslint-disable-next-line no-restricted-syntax\n            list = [... /** @type {Iterable<unknown>} */ (input)];\n            length = list.length;\n          }\n        } else { // ArrayLike\n          list = /** @type {ArrayLike<unknown>} */ (input);\n          length = ToLength(list.length);\n        }\n        float16bitsArray = ReflectConstruct(NativeUint16Array, [length], new.target);\n      }\n\n      // set values\n      for (let i = 0; i < length; ++i) {\n        float16bitsArray[i] = roundToFloat16Bits(list[i]);\n      }\n    } else { // primitive, ArrayBuffer\n      float16bitsArray = ReflectConstruct(NativeUint16Array, arguments, new.target);\n    }\n\n    /** @type {Float16Array} */\n    const proxy = /** @type {any} */ (new NativeProxy(float16bitsArray, handler));\n\n    // proxy private storage\n    WeakMapPrototypeSet(float16bitsArrays, proxy, float16bitsArray);\n\n    return proxy;\n  }\n\n  /**\n   * limitation: `Object.getOwnPropertyNames(Float16Array)` or `Reflect.ownKeys(Float16Array)` include this key\n   *\n   * @see https://tc39.es/ecma262/#sec-%typedarray%.from\n   */\n  static from(src, ...opts) {\n    const Constructor = this;\n\n    if (!ReflectHas(Constructor, brand)) {\n      throw NativeTypeError(\n        THIS_CONSTRUCTOR_IS_NOT_A_SUBCLASS_OF_FLOAT16ARRAY\n      );\n    }\n\n    // for optimization\n    if (Constructor === Float16Array) {\n      if (isFloat16Array(src) && opts.length === 0) {\n        const float16bitsArray = getFloat16BitsArray(src);\n        const uint16 = new NativeUint16Array(\n          TypedArrayPrototypeGetBuffer(float16bitsArray),\n          TypedArrayPrototypeGetByteOffset(float16bitsArray),\n          TypedArrayPrototypeGetLength(float16bitsArray)\n        );\n        return new Float16Array(\n          TypedArrayPrototypeGetBuffer(TypedArrayPrototypeSlice(uint16))\n        );\n      }\n\n      if (opts.length === 0) {\n        return new Float16Array(\n          TypedArrayPrototypeGetBuffer(\n            Uint16ArrayFrom(src, roundToFloat16Bits)\n          )\n        );\n      }\n\n      const mapFunc = opts[0];\n      const thisArg = opts[1];\n\n      return new Float16Array(\n        TypedArrayPrototypeGetBuffer(\n          Uint16ArrayFrom(src, function (val, ...args) {\n            return roundToFloat16Bits(\n              ReflectApply(mapFunc, this, [val, ...safeIfNeeded(args)])\n            );\n          }, thisArg)\n        )\n      );\n    }\n\n    /** @type {ArrayLike<unknown>} */\n    let list;\n    /** @type {number} */\n    let length;\n\n    const iterator = src[SymbolIterator];\n    if (iterator != null && typeof iterator !== \"function\") {\n      throw NativeTypeError(ITERATOR_PROPERTY_IS_NOT_CALLABLE);\n    }\n\n    if (iterator != null) { // Iterable (TypedArray, Array)\n      // for optimization\n      if (isOrdinaryArray(src)) {\n        list = src;\n        length = src.length;\n      } else if (isOrdinaryNativeTypedArray(src)) {\n        list = src;\n        length = TypedArrayPrototypeGetLength(src);\n      } else {\n        // eslint-disable-next-line no-restricted-syntax\n        list = [...src];\n        length = list.length;\n      }\n    } else { // ArrayLike\n      if (src == null) {\n        throw NativeTypeError(\n          CANNOT_CONVERT_UNDEFINED_OR_NULL_TO_OBJECT\n        );\n      }\n      list = NativeObject(src);\n      length = ToLength(list.length);\n    }\n\n    const array = new Constructor(length);\n\n    if (opts.length === 0) {\n      for (let i = 0; i < length; ++i) {\n        array[i] = /** @type {number} */ (list[i]);\n      }\n    } else {\n      const mapFunc = opts[0];\n      const thisArg = opts[1];\n      for (let i = 0; i < length; ++i) {\n        array[i] = ReflectApply(mapFunc, thisArg, [list[i], i]);\n      }\n    }\n\n    return array;\n  }\n\n  /**\n   * limitation: `Object.getOwnPropertyNames(Float16Array)` or `Reflect.ownKeys(Float16Array)` include this key\n   *\n   * @see https://tc39.es/ecma262/#sec-%typedarray%.of\n   */\n  static of(...items) {\n    const Constructor = this;\n\n    if (!ReflectHas(Constructor, brand)) {\n      throw NativeTypeError(\n        THIS_CONSTRUCTOR_IS_NOT_A_SUBCLASS_OF_FLOAT16ARRAY\n      );\n    }\n\n    const length = items.length;\n\n    // for optimization\n    if (Constructor === Float16Array) {\n      const proxy = new Float16Array(length);\n      const float16bitsArray = getFloat16BitsArray(proxy);\n\n      for (let i = 0; i < length; ++i) {\n        float16bitsArray[i] = roundToFloat16Bits(items[i]);\n      }\n\n      return proxy;\n    }\n\n    const array = new Constructor(length);\n\n    for (let i = 0; i < length; ++i) {\n      array[i] = items[i];\n    }\n\n    return array;\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.keys */\n  keys() {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    return TypedArrayPrototypeKeys(float16bitsArray);\n  }\n\n  /**\n   * limitation: returns a object whose prototype is not `%ArrayIteratorPrototype%`\n   *\n   * @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.values\n   */\n  values() {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    return wrap((function* () {\n      // eslint-disable-next-line no-restricted-syntax\n      for (const val of TypedArrayPrototypeValues(float16bitsArray)) {\n        yield convertToNumber(val);\n      }\n    })());\n  }\n\n  /**\n   * limitation: returns a object whose prototype is not `%ArrayIteratorPrototype%`\n   *\n   * @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.entries\n   */\n  entries() {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    return wrap((function* () {\n      // eslint-disable-next-line no-restricted-syntax\n      for (const [i, val] of TypedArrayPrototypeEntries(float16bitsArray)) {\n        yield /** @type {[Number, number]} */ ([i, convertToNumber(val)]);\n      }\n    })());\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.at */\n  at(index) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n    const relativeIndex = ToIntegerOrInfinity(index);\n    const k = relativeIndex >= 0 ? relativeIndex : length + relativeIndex;\n\n    if (k < 0 || k >= length) {\n      return;\n    }\n\n    return convertToNumber(float16bitsArray[k]);\n  }\n\n  /** @see https://tc39.es/proposal-change-array-by-copy/#sec-%typedarray%.prototype.with */\n  with(index, value) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n    const relativeIndex = ToIntegerOrInfinity(index);\n    const k = relativeIndex >= 0 ? relativeIndex : length + relativeIndex;\n\n    const number = +value;\n\n    if (k < 0 || k >= length) {\n      throw NativeRangeError(OFFSET_IS_OUT_OF_BOUNDS);\n    }\n\n    // don't use SpeciesConstructor\n    const uint16 = new NativeUint16Array(\n      TypedArrayPrototypeGetBuffer(float16bitsArray),\n      TypedArrayPrototypeGetByteOffset(float16bitsArray),\n      TypedArrayPrototypeGetLength(float16bitsArray)\n    );\n    const cloned = new Float16Array(\n      TypedArrayPrototypeGetBuffer(\n        TypedArrayPrototypeSlice(uint16)\n      )\n    );\n    const array = getFloat16BitsArray(cloned);\n\n    array[k] = roundToFloat16Bits(number);\n\n    return cloned;\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.map */\n  map(callback, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n    const thisArg = opts[0];\n\n    const Constructor = SpeciesConstructor(float16bitsArray, Float16Array);\n\n    // for optimization\n    if (Constructor === Float16Array) {\n      const proxy = new Float16Array(length);\n      const array = getFloat16BitsArray(proxy);\n\n      for (let i = 0; i < length; ++i) {\n        const val = convertToNumber(float16bitsArray[i]);\n        array[i] = roundToFloat16Bits(\n          ReflectApply(callback, thisArg, [val, i, this])\n        );\n      }\n\n      return proxy;\n    }\n\n    const array = new Constructor(length);\n    assertSpeciesTypedArray(array, length);\n\n    for (let i = 0; i < length; ++i) {\n      const val = convertToNumber(float16bitsArray[i]);\n      array[i] = ReflectApply(callback, thisArg, [val, i, this]);\n    }\n\n    return /** @type {any} */ (array);\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.filter */\n  filter(callback, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n    const thisArg = opts[0];\n\n    const kept = [];\n    for (let i = 0; i < length; ++i) {\n      const val = convertToNumber(float16bitsArray[i]);\n      if (ReflectApply(callback, thisArg, [val, i, this])) {\n        ArrayPrototypePush(kept, val);\n      }\n    }\n\n    const Constructor = SpeciesConstructor(float16bitsArray, Float16Array);\n    const array = new Constructor(kept);\n    assertSpeciesTypedArray(array);\n\n    return /** @type {any} */ (array);\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.reduce */\n  reduce(callback, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n    if (length === 0 && opts.length === 0) {\n      throw NativeTypeError(REDUCE_OF_EMPTY_ARRAY_WITH_NO_INITIAL_VALUE);\n    }\n\n    let accumulator, start;\n    if (opts.length === 0) {\n      accumulator = convertToNumber(float16bitsArray[0]);\n      start = 1;\n    } else {\n      accumulator = opts[0];\n      start = 0;\n    }\n\n    for (let i = start; i < length; ++i) {\n      accumulator = callback(\n        accumulator,\n        convertToNumber(float16bitsArray[i]),\n        i,\n        this\n      );\n    }\n\n    return accumulator;\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.reduceright */\n  reduceRight(callback, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n    if (length === 0 && opts.length === 0) {\n      throw NativeTypeError(REDUCE_OF_EMPTY_ARRAY_WITH_NO_INITIAL_VALUE);\n    }\n\n    let accumulator, start;\n    if (opts.length === 0) {\n      accumulator = convertToNumber(float16bitsArray[length - 1]);\n      start = length - 2;\n    } else {\n      accumulator = opts[0];\n      start = length - 1;\n    }\n\n    for (let i = start; i >= 0; --i) {\n      accumulator = callback(\n        accumulator,\n        convertToNumber(float16bitsArray[i]),\n        i,\n        this\n      );\n    }\n\n    return accumulator;\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.foreach */\n  forEach(callback, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n    const thisArg = opts[0];\n\n    for (let i = 0; i < length; ++i) {\n      ReflectApply(callback, thisArg, [\n        convertToNumber(float16bitsArray[i]),\n        i,\n        this,\n      ]);\n    }\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.find */\n  find(callback, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n    const thisArg = opts[0];\n\n    for (let i = 0; i < length; ++i) {\n      const value = convertToNumber(float16bitsArray[i]);\n      if (ReflectApply(callback, thisArg, [value, i, this])) {\n        return value;\n      }\n    }\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.findindex */\n  findIndex(callback, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n    const thisArg = opts[0];\n\n    for (let i = 0; i < length; ++i) {\n      const value = convertToNumber(float16bitsArray[i]);\n      if (ReflectApply(callback, thisArg, [value, i, this])) {\n        return i;\n      }\n    }\n\n    return -1;\n  }\n\n  /** @see https://tc39.es/proposal-array-find-from-last/index.html#sec-%typedarray%.prototype.findlast */\n  findLast(callback, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n    const thisArg = opts[0];\n\n    for (let i = length - 1; i >= 0; --i) {\n      const value = convertToNumber(float16bitsArray[i]);\n      if (ReflectApply(callback, thisArg, [value, i, this])) {\n        return value;\n      }\n    }\n  }\n\n  /** @see https://tc39.es/proposal-array-find-from-last/index.html#sec-%typedarray%.prototype.findlastindex */\n  findLastIndex(callback, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n    const thisArg = opts[0];\n\n    for (let i = length - 1; i >= 0; --i) {\n      const value = convertToNumber(float16bitsArray[i]);\n      if (ReflectApply(callback, thisArg, [value, i, this])) {\n        return i;\n      }\n    }\n\n    return -1;\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.every */\n  every(callback, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n    const thisArg = opts[0];\n\n    for (let i = 0; i < length; ++i) {\n      if (\n        !ReflectApply(callback, thisArg, [\n          convertToNumber(float16bitsArray[i]),\n          i,\n          this,\n        ])\n      ) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.some */\n  some(callback, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n    const thisArg = opts[0];\n\n    for (let i = 0; i < length; ++i) {\n      if (\n        ReflectApply(callback, thisArg, [\n          convertToNumber(float16bitsArray[i]),\n          i,\n          this,\n        ])\n      ) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.set */\n  set(input, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    const targetOffset = ToIntegerOrInfinity(opts[0]);\n    if (targetOffset < 0) {\n      throw NativeRangeError(OFFSET_IS_OUT_OF_BOUNDS);\n    }\n\n    if (input == null) {\n      throw NativeTypeError(\n        CANNOT_CONVERT_UNDEFINED_OR_NULL_TO_OBJECT\n      );\n    }\n\n    if (isNativeBigIntTypedArray(input)) {\n      throw NativeTypeError(\n        CANNOT_MIX_BIGINT_AND_OTHER_TYPES\n      );\n    }\n\n    // for optimization\n    if (isFloat16Array(input)) {\n      // peel off Proxy\n      return TypedArrayPrototypeSet(\n        getFloat16BitsArray(this),\n        getFloat16BitsArray(input),\n        targetOffset\n      );\n    }\n\n    if (isNativeTypedArray(input)) {\n      const buffer = TypedArrayPrototypeGetBuffer(input);\n      if (IsDetachedBuffer(buffer)) {\n        throw NativeTypeError(ATTEMPTING_TO_ACCESS_DETACHED_ARRAYBUFFER);\n      }\n    }\n\n    const targetLength = TypedArrayPrototypeGetLength(float16bitsArray);\n\n    const src = NativeObject(input);\n    const srcLength = ToLength(src.length);\n\n    if (targetOffset === Infinity || srcLength + targetOffset > targetLength) {\n      throw NativeRangeError(OFFSET_IS_OUT_OF_BOUNDS);\n    }\n\n    for (let i = 0; i < srcLength; ++i) {\n      float16bitsArray[i + targetOffset] = roundToFloat16Bits(src[i]);\n    }\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.reverse */\n  reverse() {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    TypedArrayPrototypeReverse(float16bitsArray);\n\n    return this;\n  }\n\n  /** @see https://tc39.es/proposal-change-array-by-copy/#sec-%typedarray%.prototype.toReversed */\n  toReversed() {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    // don't use SpeciesConstructor\n    const uint16 = new NativeUint16Array(\n      TypedArrayPrototypeGetBuffer(float16bitsArray),\n      TypedArrayPrototypeGetByteOffset(float16bitsArray),\n      TypedArrayPrototypeGetLength(float16bitsArray)\n    );\n    const cloned = new Float16Array(\n      TypedArrayPrototypeGetBuffer(\n        TypedArrayPrototypeSlice(uint16)\n      )\n    );\n\n    const clonedFloat16bitsArray = getFloat16BitsArray(cloned);\n    TypedArrayPrototypeReverse(clonedFloat16bitsArray);\n\n    return cloned;\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.fill */\n  fill(value, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    TypedArrayPrototypeFill(\n      float16bitsArray,\n      roundToFloat16Bits(value),\n      ...safeIfNeeded(opts)\n    );\n\n    return this;\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.copywithin */\n  copyWithin(target, start, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    TypedArrayPrototypeCopyWithin(float16bitsArray, target, start, ...safeIfNeeded(opts));\n\n    return this;\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.sort */\n  sort(compareFn) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    const sortCompare = compareFn !== undefined ? compareFn : defaultCompare;\n    TypedArrayPrototypeSort(float16bitsArray, (x, y) => {\n      return sortCompare(convertToNumber(x), convertToNumber(y));\n    });\n\n    return this;\n  }\n\n  /** @see https://tc39.es/proposal-change-array-by-copy/#sec-%typedarray%.prototype.toSorted */\n  toSorted(compareFn) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    if (compareFn !== undefined && typeof compareFn !== \"function\") {\n      throw new NativeTypeError(THE_COMPARISON_FUNCTION_MUST_BE_EITHER_A_FUNCTION_OR_UNDEFINED);\n    }\n    const sortCompare = compareFn !== undefined ? compareFn : defaultCompare;\n\n    // don't use SpeciesConstructor\n    const uint16 = new NativeUint16Array(\n      TypedArrayPrototypeGetBuffer(float16bitsArray),\n      TypedArrayPrototypeGetByteOffset(float16bitsArray),\n      TypedArrayPrototypeGetLength(float16bitsArray)\n    );\n    const cloned = new Float16Array(\n      TypedArrayPrototypeGetBuffer(\n        TypedArrayPrototypeSlice(uint16)\n      )\n    );\n\n    const clonedFloat16bitsArray = getFloat16BitsArray(cloned);\n    TypedArrayPrototypeSort(clonedFloat16bitsArray, (x, y) => {\n      return sortCompare(convertToNumber(x), convertToNumber(y));\n    });\n\n    return cloned;\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.slice */\n  slice(start, end) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    const Constructor = SpeciesConstructor(float16bitsArray, Float16Array);\n\n    // for optimization\n    if (Constructor === Float16Array) {\n      const uint16 = new NativeUint16Array(\n        TypedArrayPrototypeGetBuffer(float16bitsArray),\n        TypedArrayPrototypeGetByteOffset(float16bitsArray),\n        TypedArrayPrototypeGetLength(float16bitsArray)\n      );\n      return new Float16Array(\n        TypedArrayPrototypeGetBuffer(\n          TypedArrayPrototypeSlice(uint16, start, end)\n        )\n      );\n    }\n\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n    const relativeStart = ToIntegerOrInfinity(start);\n    const relativeEnd = end === undefined ? length : ToIntegerOrInfinity(end);\n\n    let k;\n    if (relativeStart === -Infinity) {\n      k = 0;\n    } else if (relativeStart < 0) {\n      k = length + relativeStart > 0 ? length + relativeStart : 0;\n    } else {\n      k = length < relativeStart ? length : relativeStart;\n    }\n\n    let final;\n    if (relativeEnd === -Infinity) {\n      final = 0;\n    } else if (relativeEnd < 0) {\n      final = length + relativeEnd > 0 ? length + relativeEnd : 0;\n    } else {\n      final = length < relativeEnd ? length : relativeEnd;\n    }\n\n    const count = final - k > 0 ? final - k : 0;\n    const array = new Constructor(count);\n    assertSpeciesTypedArray(array, count);\n\n    if (count === 0) {\n      return array;\n    }\n\n    const buffer = TypedArrayPrototypeGetBuffer(float16bitsArray);\n    if (IsDetachedBuffer(buffer)) {\n      throw NativeTypeError(ATTEMPTING_TO_ACCESS_DETACHED_ARRAYBUFFER);\n    }\n\n    let n = 0;\n    while (k < final) {\n      array[n] = convertToNumber(float16bitsArray[k]);\n      ++k;\n      ++n;\n    }\n\n    return /** @type {any} */ (array);\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.subarray */\n  subarray(begin, end) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    const Constructor = SpeciesConstructor(float16bitsArray, Float16Array);\n\n    const uint16 = new NativeUint16Array(\n      TypedArrayPrototypeGetBuffer(float16bitsArray),\n      TypedArrayPrototypeGetByteOffset(float16bitsArray),\n      TypedArrayPrototypeGetLength(float16bitsArray)\n    );\n    const uint16Subarray = TypedArrayPrototypeSubarray(uint16, begin, end);\n\n    const array = new Constructor(\n      TypedArrayPrototypeGetBuffer(uint16Subarray),\n      TypedArrayPrototypeGetByteOffset(uint16Subarray),\n      TypedArrayPrototypeGetLength(uint16Subarray)\n    );\n    assertSpeciesTypedArray(array);\n\n    return /** @type {any} */ (array);\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.indexof */\n  indexOf(element, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n\n    let from = ToIntegerOrInfinity(opts[0]);\n    if (from === Infinity) {\n      return -1;\n    }\n\n    if (from < 0) {\n      from += length;\n      if (from < 0) {\n        from = 0;\n      }\n    }\n\n    for (let i = from; i < length; ++i) {\n      if (\n        ObjectHasOwn(float16bitsArray, i) &&\n        convertToNumber(float16bitsArray[i]) === element\n      ) {\n        return i;\n      }\n    }\n\n    return -1;\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.lastindexof */\n  lastIndexOf(element, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n\n    let from = opts.length >= 1 ? ToIntegerOrInfinity(opts[0]) : length - 1;\n    if (from === -Infinity) {\n      return -1;\n    }\n\n    if (from >= 0) {\n      from = from < length - 1 ? from : length - 1;\n    } else {\n      from += length;\n    }\n\n    for (let i = from; i >= 0; --i) {\n      if (\n        ObjectHasOwn(float16bitsArray, i) &&\n        convertToNumber(float16bitsArray[i]) === element\n      ) {\n        return i;\n      }\n    }\n\n    return -1;\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.includes */\n  includes(element, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n\n    let from = ToIntegerOrInfinity(opts[0]);\n    if (from === Infinity) {\n      return false;\n    }\n\n    if (from < 0) {\n      from += length;\n      if (from < 0) {\n        from = 0;\n      }\n    }\n\n    const isNaN = NumberIsNaN(element);\n    for (let i = from; i < length; ++i) {\n      const value = convertToNumber(float16bitsArray[i]);\n\n      if (isNaN && NumberIsNaN(value)) {\n        return true;\n      }\n\n      if (value === element) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.join */\n  join(separator) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    const array = copyToArray(float16bitsArray);\n\n    return ArrayPrototypeJoin(array, separator);\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.tolocalestring */\n  toLocaleString(...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    const array = copyToArray(float16bitsArray);\n\n    return ArrayPrototypeToLocaleString(array, ...safeIfNeeded(opts));\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-get-%typedarray%.prototype-@@tostringtag */\n  get [SymbolToStringTag]() {\n    if (isFloat16Array(this)) {\n      return /** @type {any} */ (\"Float16Array\");\n    }\n  }\n}\n\n/** @see https://tc39.es/ecma262/#sec-typedarray.bytes_per_element */\nObjectDefineProperty(Float16Array, \"BYTES_PER_ELEMENT\", {\n  value: BYTES_PER_ELEMENT,\n});\n\n// limitation: It is peaked by `Object.getOwnPropertySymbols(Float16Array)` and `Reflect.ownKeys(Float16Array)`\nObjectDefineProperty(Float16Array, brand, {});\n\n/** @see https://tc39.es/ecma262/#sec-properties-of-the-typedarray-constructors */\nReflectSetPrototypeOf(Float16Array, TypedArray);\n\nconst Float16ArrayPrototype = Float16Array.prototype;\n\n/** @see https://tc39.es/ecma262/#sec-typedarray.prototype.bytes_per_element */\nObjectDefineProperty(Float16ArrayPrototype, \"BYTES_PER_ELEMENT\", {\n  value: BYTES_PER_ELEMENT,\n});\n\n/** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype-@@iterator */\nObjectDefineProperty(Float16ArrayPrototype, SymbolIterator, {\n  value: Float16ArrayPrototype.values,\n  writable: true,\n  configurable: true,\n});\n\nReflectSetPrototypeOf(Float16ArrayPrototype, TypedArrayPrototype);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}