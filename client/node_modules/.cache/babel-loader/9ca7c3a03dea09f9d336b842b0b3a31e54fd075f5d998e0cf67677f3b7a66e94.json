{"ast":null,"code":"/** @module geotiff */\nimport GeoTIFFImage from './geotiffimage.js';\nimport DataView64 from './dataview64.js';\nimport DataSlice from './dataslice.js';\nimport Pool from './pool.js';\nimport { makeRemoteSource } from './source/remote.js';\nimport { makeBufferSource } from './source/arraybuffer.js';\nimport { makeFileReaderSource } from './source/filereader.js';\nimport { makeFileSource } from './source/file.js';\nimport { fieldTypes, fieldTagNames, arrayFields, geoKeyNames } from './globals.js';\nimport { writeGeotiff } from './geotiffwriter.js';\nimport * as globals from './globals.js';\nimport * as rgb from './rgb.js';\nimport { getDecoder, addDecoder } from './compression/index.js';\nimport { setLogger } from './logging.js';\nexport { globals };\nexport { rgb };\nexport { default as BaseDecoder } from './compression/basedecoder.js';\nexport { getDecoder, addDecoder };\nexport { setLogger };\n\n/**\n * @typedef {Uint8Array | Int8Array | Uint16Array | Int16Array | Uint32Array | Int32Array | Float32Array | Float64Array}\n * TypedArray\n */\n\n/**\n * @typedef {{ height:number, width: number }} Dimensions\n */\n\n/**\n * The autogenerated docs are a little confusing here. The effective type is:\n *\n * `TypedArray & { height: number; width: number}`\n * @typedef {TypedArray & Dimensions} TypedArrayWithDimensions\n */\n\n/**\n * The autogenerated docs are a little confusing here. The effective type is:\n *\n * `TypedArray[] & { height: number; width: number}`\n * @typedef {TypedArray[] & Dimensions} TypedArrayArrayWithDimensions\n */\n\n/**\n *  The autogenerated docs are a little confusing here. The effective type is:\n *\n * `(TypedArray | TypedArray[]) & { height: number; width: number}`\n * @typedef {TypedArrayWithDimensions | TypedArrayArrayWithDimensions} ReadRasterResult\n */\n\nfunction getFieldTypeLength(fieldType) {\n  switch (fieldType) {\n    case fieldTypes.BYTE:\n    case fieldTypes.ASCII:\n    case fieldTypes.SBYTE:\n    case fieldTypes.UNDEFINED:\n      return 1;\n    case fieldTypes.SHORT:\n    case fieldTypes.SSHORT:\n      return 2;\n    case fieldTypes.LONG:\n    case fieldTypes.SLONG:\n    case fieldTypes.FLOAT:\n    case fieldTypes.IFD:\n      return 4;\n    case fieldTypes.RATIONAL:\n    case fieldTypes.SRATIONAL:\n    case fieldTypes.DOUBLE:\n    case fieldTypes.LONG8:\n    case fieldTypes.SLONG8:\n    case fieldTypes.IFD8:\n      return 8;\n    default:\n      throw new RangeError(`Invalid field type: ${fieldType}`);\n  }\n}\nfunction parseGeoKeyDirectory(fileDirectory) {\n  const rawGeoKeyDirectory = fileDirectory.GeoKeyDirectory;\n  if (!rawGeoKeyDirectory) {\n    return null;\n  }\n  const geoKeyDirectory = {};\n  for (let i = 4; i <= rawGeoKeyDirectory[3] * 4; i += 4) {\n    const key = geoKeyNames[rawGeoKeyDirectory[i]];\n    const location = rawGeoKeyDirectory[i + 1] ? fieldTagNames[rawGeoKeyDirectory[i + 1]] : null;\n    const count = rawGeoKeyDirectory[i + 2];\n    const offset = rawGeoKeyDirectory[i + 3];\n    let value = null;\n    if (!location) {\n      value = offset;\n    } else {\n      value = fileDirectory[location];\n      if (typeof value === 'undefined' || value === null) {\n        throw new Error(`Could not get value of geoKey '${key}'.`);\n      } else if (typeof value === 'string') {\n        value = value.substring(offset, offset + count - 1);\n      } else if (value.subarray) {\n        value = value.subarray(offset, offset + count);\n        if (count === 1) {\n          value = value[0];\n        }\n      }\n    }\n    geoKeyDirectory[key] = value;\n  }\n  return geoKeyDirectory;\n}\nfunction getValues(dataSlice, fieldType, count, offset) {\n  let values = null;\n  let readMethod = null;\n  const fieldTypeLength = getFieldTypeLength(fieldType);\n  switch (fieldType) {\n    case fieldTypes.BYTE:\n    case fieldTypes.ASCII:\n    case fieldTypes.UNDEFINED:\n      values = new Uint8Array(count);\n      readMethod = dataSlice.readUint8;\n      break;\n    case fieldTypes.SBYTE:\n      values = new Int8Array(count);\n      readMethod = dataSlice.readInt8;\n      break;\n    case fieldTypes.SHORT:\n      values = new Uint16Array(count);\n      readMethod = dataSlice.readUint16;\n      break;\n    case fieldTypes.SSHORT:\n      values = new Int16Array(count);\n      readMethod = dataSlice.readInt16;\n      break;\n    case fieldTypes.LONG:\n    case fieldTypes.IFD:\n      values = new Uint32Array(count);\n      readMethod = dataSlice.readUint32;\n      break;\n    case fieldTypes.SLONG:\n      values = new Int32Array(count);\n      readMethod = dataSlice.readInt32;\n      break;\n    case fieldTypes.LONG8:\n    case fieldTypes.IFD8:\n      values = new Array(count);\n      readMethod = dataSlice.readUint64;\n      break;\n    case fieldTypes.SLONG8:\n      values = new Array(count);\n      readMethod = dataSlice.readInt64;\n      break;\n    case fieldTypes.RATIONAL:\n      values = new Uint32Array(count * 2);\n      readMethod = dataSlice.readUint32;\n      break;\n    case fieldTypes.SRATIONAL:\n      values = new Int32Array(count * 2);\n      readMethod = dataSlice.readInt32;\n      break;\n    case fieldTypes.FLOAT:\n      values = new Float32Array(count);\n      readMethod = dataSlice.readFloat32;\n      break;\n    case fieldTypes.DOUBLE:\n      values = new Float64Array(count);\n      readMethod = dataSlice.readFloat64;\n      break;\n    default:\n      throw new RangeError(`Invalid field type: ${fieldType}`);\n  }\n\n  // normal fields\n  if (!(fieldType === fieldTypes.RATIONAL || fieldType === fieldTypes.SRATIONAL)) {\n    for (let i = 0; i < count; ++i) {\n      values[i] = readMethod.call(dataSlice, offset + i * fieldTypeLength);\n    }\n  } else {\n    // RATIONAL or SRATIONAL\n    for (let i = 0; i < count; i += 2) {\n      values[i] = readMethod.call(dataSlice, offset + i * fieldTypeLength);\n      values[i + 1] = readMethod.call(dataSlice, offset + (i * fieldTypeLength + 4));\n    }\n  }\n  if (fieldType === fieldTypes.ASCII) {\n    return new TextDecoder('utf-8').decode(values);\n  }\n  return values;\n}\n\n/**\n * Data class to store the parsed file directory, geo key directory and\n * offset to the next IFD\n */\nclass ImageFileDirectory {\n  constructor(fileDirectory, geoKeyDirectory, nextIFDByteOffset) {\n    this.fileDirectory = fileDirectory;\n    this.geoKeyDirectory = geoKeyDirectory;\n    this.nextIFDByteOffset = nextIFDByteOffset;\n  }\n}\n\n/**\n * Error class for cases when an IFD index was requested, that does not exist\n * in the file.\n */\nclass GeoTIFFImageIndexError extends Error {\n  constructor(index) {\n    super(`No image at index ${index}`);\n    this.index = index;\n  }\n}\nclass GeoTIFFBase {\n  /**\n   * (experimental) Reads raster data from the best fitting image. This function uses\n   * the image with the lowest resolution that is still a higher resolution than the\n   * requested resolution.\n   * When specified, the `bbox` option is translated to the `window` option and the\n   * `resX` and `resY` to `width` and `height` respectively.\n   * Then, the [readRasters]{@link GeoTIFFImage#readRasters} method of the selected\n   * image is called and the result returned.\n   * @see GeoTIFFImage.readRasters\n   * @param {import('./geotiffimage').ReadRasterOptions} [options={}] optional parameters\n   * @returns {Promise<ReadRasterResult>} the decoded array(s), with `height` and `width`, as a promise\n   */\n  async readRasters() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const {\n      window: imageWindow,\n      width,\n      height\n    } = options;\n    let {\n      resX,\n      resY,\n      bbox\n    } = options;\n    const firstImage = await this.getImage();\n    let usedImage = firstImage;\n    const imageCount = await this.getImageCount();\n    const imgBBox = firstImage.getBoundingBox();\n    if (imageWindow && bbox) {\n      throw new Error('Both \"bbox\" and \"window\" passed.');\n    }\n\n    // if width/height is passed, transform it to resolution\n    if (width || height) {\n      // if we have an image window (pixel coordinates), transform it to a BBox\n      // using the origin/resolution of the first image.\n      if (imageWindow) {\n        const [oX, oY] = firstImage.getOrigin();\n        const [rX, rY] = firstImage.getResolution();\n        bbox = [oX + imageWindow[0] * rX, oY + imageWindow[1] * rY, oX + imageWindow[2] * rX, oY + imageWindow[3] * rY];\n      }\n\n      // if we have a bbox (or calculated one)\n\n      const usedBBox = bbox || imgBBox;\n      if (width) {\n        if (resX) {\n          throw new Error('Both width and resX passed');\n        }\n        resX = (usedBBox[2] - usedBBox[0]) / width;\n      }\n      if (height) {\n        if (resY) {\n          throw new Error('Both width and resY passed');\n        }\n        resY = (usedBBox[3] - usedBBox[1]) / height;\n      }\n    }\n\n    // if resolution is set or calculated, try to get the image with the worst acceptable resolution\n    if (resX || resY) {\n      const allImages = [];\n      for (let i = 0; i < imageCount; ++i) {\n        const image = await this.getImage(i);\n        const {\n          SubfileType: subfileType,\n          NewSubfileType: newSubfileType\n        } = image.fileDirectory;\n        if (i === 0 || subfileType === 2 || newSubfileType & 1) {\n          allImages.push(image);\n        }\n      }\n      allImages.sort((a, b) => a.getWidth() - b.getWidth());\n      for (let i = 0; i < allImages.length; ++i) {\n        const image = allImages[i];\n        const imgResX = (imgBBox[2] - imgBBox[0]) / image.getWidth();\n        const imgResY = (imgBBox[3] - imgBBox[1]) / image.getHeight();\n        usedImage = image;\n        if (resX && resX > imgResX || resY && resY > imgResY) {\n          break;\n        }\n      }\n    }\n    let wnd = imageWindow;\n    if (bbox) {\n      const [oX, oY] = firstImage.getOrigin();\n      const [imageResX, imageResY] = usedImage.getResolution(firstImage);\n      wnd = [Math.round((bbox[0] - oX) / imageResX), Math.round((bbox[1] - oY) / imageResY), Math.round((bbox[2] - oX) / imageResX), Math.round((bbox[3] - oY) / imageResY)];\n      wnd = [Math.min(wnd[0], wnd[2]), Math.min(wnd[1], wnd[3]), Math.max(wnd[0], wnd[2]), Math.max(wnd[1], wnd[3])];\n    }\n    return usedImage.readRasters({\n      ...options,\n      window: wnd\n    });\n  }\n}\n\n/**\n * @typedef {Object} GeoTIFFOptions\n * @property {boolean} [cache=false] whether or not decoded tiles shall be cached.\n */\n\n/**\n * The abstraction for a whole GeoTIFF file.\n * @augments GeoTIFFBase\n */\nclass GeoTIFF extends GeoTIFFBase {\n  /**\n   * @constructor\n   * @param {*} source The datasource to read from.\n   * @param {boolean} littleEndian Whether the image uses little endian.\n   * @param {boolean} bigTiff Whether the image uses bigTIFF conventions.\n   * @param {number} firstIFDOffset The numeric byte-offset from the start of the image\n   *                                to the first IFD.\n   * @param {GeoTIFFOptions} [options] further options.\n   */\n  constructor(source, littleEndian, bigTiff, firstIFDOffset) {\n    let options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n    super();\n    this.source = source;\n    this.littleEndian = littleEndian;\n    this.bigTiff = bigTiff;\n    this.firstIFDOffset = firstIFDOffset;\n    this.cache = options.cache || false;\n    this.ifdRequests = [];\n    this.ghostValues = null;\n  }\n  async getSlice(offset, size) {\n    const fallbackSize = this.bigTiff ? 4048 : 1024;\n    return new DataSlice((await this.source.fetch([{\n      offset,\n      length: typeof size !== 'undefined' ? size : fallbackSize\n    }]))[0], offset, this.littleEndian, this.bigTiff);\n  }\n\n  /**\n   * Instructs to parse an image file directory at the given file offset.\n   * As there is no way to ensure that a location is indeed the start of an IFD,\n   * this function must be called with caution (e.g only using the IFD offsets from\n   * the headers or other IFDs).\n   * @param {number} offset the offset to parse the IFD at\n   * @returns {Promise<ImageFileDirectory>} the parsed IFD\n   */\n  async parseFileDirectoryAt(offset) {\n    const entrySize = this.bigTiff ? 20 : 12;\n    const offsetSize = this.bigTiff ? 8 : 2;\n    let dataSlice = await this.getSlice(offset);\n    const numDirEntries = this.bigTiff ? dataSlice.readUint64(offset) : dataSlice.readUint16(offset);\n\n    // if the slice does not cover the whole IFD, request a bigger slice, where the\n    // whole IFD fits: num of entries + n x tag length + offset to next IFD\n    const byteSize = numDirEntries * entrySize + (this.bigTiff ? 16 : 6);\n    if (!dataSlice.covers(offset, byteSize)) {\n      dataSlice = await this.getSlice(offset, byteSize);\n    }\n    const fileDirectory = {};\n\n    // loop over the IFD and create a file directory object\n    let i = offset + (this.bigTiff ? 8 : 2);\n    for (let entryCount = 0; entryCount < numDirEntries; i += entrySize, ++entryCount) {\n      const fieldTag = dataSlice.readUint16(i);\n      const fieldType = dataSlice.readUint16(i + 2);\n      const typeCount = this.bigTiff ? dataSlice.readUint64(i + 4) : dataSlice.readUint32(i + 4);\n      let fieldValues;\n      let value;\n      const fieldTypeLength = getFieldTypeLength(fieldType);\n      const valueOffset = i + (this.bigTiff ? 12 : 8);\n\n      // check whether the value is directly encoded in the tag or refers to a\n      // different external byte range\n      if (fieldTypeLength * typeCount <= (this.bigTiff ? 8 : 4)) {\n        fieldValues = getValues(dataSlice, fieldType, typeCount, valueOffset);\n      } else {\n        // resolve the reference to the actual byte range\n        const actualOffset = dataSlice.readOffset(valueOffset);\n        const length = getFieldTypeLength(fieldType) * typeCount;\n\n        // check, whether we actually cover the referenced byte range; if not,\n        // request a new slice of bytes to read from it\n        if (dataSlice.covers(actualOffset, length)) {\n          fieldValues = getValues(dataSlice, fieldType, typeCount, actualOffset);\n        } else {\n          const fieldDataSlice = await this.getSlice(actualOffset, length);\n          fieldValues = getValues(fieldDataSlice, fieldType, typeCount, actualOffset);\n        }\n      }\n\n      // unpack single values from the array\n      if (typeCount === 1 && arrayFields.indexOf(fieldTag) === -1 && !(fieldType === fieldTypes.RATIONAL || fieldType === fieldTypes.SRATIONAL)) {\n        value = fieldValues[0];\n      } else {\n        value = fieldValues;\n      }\n\n      // write the tags value to the file directly\n      fileDirectory[fieldTagNames[fieldTag]] = value;\n    }\n    const geoKeyDirectory = parseGeoKeyDirectory(fileDirectory);\n    const nextIFDByteOffset = dataSlice.readOffset(offset + offsetSize + entrySize * numDirEntries);\n    return new ImageFileDirectory(fileDirectory, geoKeyDirectory, nextIFDByteOffset);\n  }\n  async requestIFD(index) {\n    // see if we already have that IFD index requested.\n    if (this.ifdRequests[index]) {\n      // attach to an already requested IFD\n      return this.ifdRequests[index];\n    } else if (index === 0) {\n      // special case for index 0\n      this.ifdRequests[index] = this.parseFileDirectoryAt(this.firstIFDOffset);\n      return this.ifdRequests[index];\n    } else if (!this.ifdRequests[index - 1]) {\n      // if the previous IFD was not yet loaded, load that one first\n      // this is the recursive call.\n      try {\n        this.ifdRequests[index - 1] = this.requestIFD(index - 1);\n      } catch (e) {\n        // if the previous one already was an index error, rethrow\n        // with the current index\n        if (e instanceof GeoTIFFImageIndexError) {\n          throw new GeoTIFFImageIndexError(index);\n        }\n        // rethrow anything else\n        throw e;\n      }\n    }\n    // if the previous IFD was loaded, we can finally fetch the one we are interested in.\n    // we need to wrap this in an IIFE, otherwise this.ifdRequests[index] would be delayed\n    this.ifdRequests[index] = (async () => {\n      const previousIfd = await this.ifdRequests[index - 1];\n      if (previousIfd.nextIFDByteOffset === 0) {\n        throw new GeoTIFFImageIndexError(index);\n      }\n      return this.parseFileDirectoryAt(previousIfd.nextIFDByteOffset);\n    })();\n    return this.ifdRequests[index];\n  }\n\n  /**\n   * Get the n-th internal subfile of an image. By default, the first is returned.\n   *\n   * @param {number} [index=0] the index of the image to return.\n   * @returns {Promise<GeoTIFFImage>} the image at the given index\n   */\n  async getImage() {\n    let index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    const ifd = await this.requestIFD(index);\n    return new GeoTIFFImage(ifd.fileDirectory, ifd.geoKeyDirectory, this.dataView, this.littleEndian, this.cache, this.source);\n  }\n\n  /**\n   * Returns the count of the internal subfiles.\n   *\n   * @returns {Promise<number>} the number of internal subfile images\n   */\n  async getImageCount() {\n    let index = 0;\n    // loop until we run out of IFDs\n    let hasNext = true;\n    while (hasNext) {\n      try {\n        await this.requestIFD(index);\n        ++index;\n      } catch (e) {\n        if (e instanceof GeoTIFFImageIndexError) {\n          hasNext = false;\n        } else {\n          throw e;\n        }\n      }\n    }\n    return index;\n  }\n\n  /**\n   * Get the values of the COG ghost area as a parsed map.\n   * See https://gdal.org/drivers/raster/cog.html#header-ghost-area for reference\n   * @returns {Promise<Object>} the parsed ghost area or null, if no such area was found\n   */\n  async getGhostValues() {\n    const offset = this.bigTiff ? 16 : 8;\n    if (this.ghostValues) {\n      return this.ghostValues;\n    }\n    const detectionString = 'GDAL_STRUCTURAL_METADATA_SIZE=';\n    const heuristicAreaSize = detectionString.length + 100;\n    let slice = await this.getSlice(offset, heuristicAreaSize);\n    if (detectionString === getValues(slice, fieldTypes.ASCII, detectionString.length, offset)) {\n      const valuesString = getValues(slice, fieldTypes.ASCII, heuristicAreaSize, offset);\n      const firstLine = valuesString.split('\\n')[0];\n      const metadataSize = Number(firstLine.split('=')[1].split(' ')[0]) + firstLine.length;\n      if (metadataSize > heuristicAreaSize) {\n        slice = await this.getSlice(offset, metadataSize);\n      }\n      const fullString = getValues(slice, fieldTypes.ASCII, metadataSize, offset);\n      this.ghostValues = {};\n      fullString.split('\\n').filter(line => line.length > 0).map(line => line.split('=')).forEach(_ref => {\n        let [key, value] = _ref;\n        this.ghostValues[key] = value;\n      });\n    }\n    return this.ghostValues;\n  }\n\n  /**\n   * Parse a (Geo)TIFF file from the given source.\n   *\n   * @param {*} source The source of data to parse from.\n   * @param {GeoTIFFOptions} [options] Additional options.\n   * @param {AbortSignal} [signal] An AbortSignal that may be signalled if the request is\n   *                               to be aborted\n   */\n  static async fromSource(source, options, signal) {\n    const headerData = (await source.fetch([{\n      offset: 0,\n      length: 1024\n    }], signal))[0];\n    const dataView = new DataView64(headerData);\n    const BOM = dataView.getUint16(0, 0);\n    let littleEndian;\n    if (BOM === 0x4949) {\n      littleEndian = true;\n    } else if (BOM === 0x4D4D) {\n      littleEndian = false;\n    } else {\n      throw new TypeError('Invalid byte order value.');\n    }\n    const magicNumber = dataView.getUint16(2, littleEndian);\n    let bigTiff;\n    if (magicNumber === 42) {\n      bigTiff = false;\n    } else if (magicNumber === 43) {\n      bigTiff = true;\n      const offsetByteSize = dataView.getUint16(4, littleEndian);\n      if (offsetByteSize !== 8) {\n        throw new Error('Unsupported offset byte-size.');\n      }\n    } else {\n      throw new TypeError('Invalid magic number.');\n    }\n    const firstIFDOffset = bigTiff ? dataView.getUint64(8, littleEndian) : dataView.getUint32(4, littleEndian);\n    return new GeoTIFF(source, littleEndian, bigTiff, firstIFDOffset, options);\n  }\n\n  /**\n   * Closes the underlying file buffer\n   * N.B. After the GeoTIFF has been completely processed it needs\n   * to be closed but only if it has been constructed from a file.\n   */\n  close() {\n    if (typeof this.source.close === 'function') {\n      return this.source.close();\n    }\n    return false;\n  }\n}\nexport { GeoTIFF };\nexport default GeoTIFF;\n\n/**\n * Wrapper for GeoTIFF files that have external overviews.\n * @augments GeoTIFFBase\n */\nclass MultiGeoTIFF extends GeoTIFFBase {\n  /**\n   * Construct a new MultiGeoTIFF from a main and several overview files.\n   * @param {GeoTIFF} mainFile The main GeoTIFF file.\n   * @param {GeoTIFF[]} overviewFiles An array of overview files.\n   */\n  constructor(mainFile, overviewFiles) {\n    super();\n    this.mainFile = mainFile;\n    this.overviewFiles = overviewFiles;\n    this.imageFiles = [mainFile].concat(overviewFiles);\n    this.fileDirectoriesPerFile = null;\n    this.fileDirectoriesPerFileParsing = null;\n    this.imageCount = null;\n  }\n  async parseFileDirectoriesPerFile() {\n    const requests = [this.mainFile.parseFileDirectoryAt(this.mainFile.firstIFDOffset)].concat(this.overviewFiles.map(file => file.parseFileDirectoryAt(file.firstIFDOffset)));\n    this.fileDirectoriesPerFile = await Promise.all(requests);\n    return this.fileDirectoriesPerFile;\n  }\n\n  /**\n   * Get the n-th internal subfile of an image. By default, the first is returned.\n   *\n   * @param {number} [index=0] the index of the image to return.\n   * @returns {Promise<GeoTIFFImage>} the image at the given index\n   */\n  async getImage() {\n    let index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    await this.getImageCount();\n    await this.parseFileDirectoriesPerFile();\n    let visited = 0;\n    let relativeIndex = 0;\n    for (let i = 0; i < this.imageFiles.length; i++) {\n      const imageFile = this.imageFiles[i];\n      for (let ii = 0; ii < this.imageCounts[i]; ii++) {\n        if (index === visited) {\n          const ifd = await imageFile.requestIFD(relativeIndex);\n          return new GeoTIFFImage(ifd.fileDirectory, ifd.geoKeyDirectory, imageFile.dataView, imageFile.littleEndian, imageFile.cache, imageFile.source);\n        }\n        visited++;\n        relativeIndex++;\n      }\n      relativeIndex = 0;\n    }\n    throw new RangeError('Invalid image index');\n  }\n\n  /**\n   * Returns the count of the internal subfiles.\n   *\n   * @returns {Promise<number>} the number of internal subfile images\n   */\n  async getImageCount() {\n    if (this.imageCount !== null) {\n      return this.imageCount;\n    }\n    const requests = [this.mainFile.getImageCount()].concat(this.overviewFiles.map(file => file.getImageCount()));\n    this.imageCounts = await Promise.all(requests);\n    this.imageCount = this.imageCounts.reduce((count, ifds) => count + ifds, 0);\n    return this.imageCount;\n  }\n}\nexport { MultiGeoTIFF };\n\n/**\n * Creates a new GeoTIFF from a remote URL.\n * @param {string} url The URL to access the image from\n * @param {object} [options] Additional options to pass to the source.\n *                           See {@link makeRemoteSource} for details.\n * @param {AbortSignal} [signal] An AbortSignal that may be signalled if the request is\n *                               to be aborted\n * @returns {Promise<GeoTIFF>} The resulting GeoTIFF file.\n */\nexport async function fromUrl(url) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let signal = arguments.length > 2 ? arguments[2] : undefined;\n  return GeoTIFF.fromSource(makeRemoteSource(url, options), signal);\n}\n\n/**\n * Construct a new GeoTIFF from an\n * [ArrayBuffer]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer}.\n * @param {ArrayBuffer} arrayBuffer The data to read the file from.\n * @param {AbortSignal} [signal] An AbortSignal that may be signalled if the request is\n *                               to be aborted\n * @returns {Promise<GeoTIFF>} The resulting GeoTIFF file.\n */\nexport async function fromArrayBuffer(arrayBuffer, signal) {\n  return GeoTIFF.fromSource(makeBufferSource(arrayBuffer), signal);\n}\n\n/**\n * Construct a GeoTIFF from a local file path. This uses the node\n * [filesystem API]{@link https://nodejs.org/api/fs.html} and is\n * not available on browsers.\n *\n * N.B. After the GeoTIFF has been completely processed it needs\n * to be closed but only if it has been constructed from a file.\n * @param {string} path The file path to read from.\n * @param {AbortSignal} [signal] An AbortSignal that may be signalled if the request is\n *                               to be aborted\n * @returns {Promise<GeoTIFF>} The resulting GeoTIFF file.\n */\nexport async function fromFile(path, signal) {\n  return GeoTIFF.fromSource(makeFileSource(path), signal);\n}\n\n/**\n * Construct a GeoTIFF from an HTML\n * [Blob]{@link https://developer.mozilla.org/en-US/docs/Web/API/Blob} or\n * [File]{@link https://developer.mozilla.org/en-US/docs/Web/API/File}\n * object.\n * @param {Blob|File} blob The Blob or File object to read from.\n * @param {AbortSignal} [signal] An AbortSignal that may be signalled if the request is\n *                               to be aborted\n * @returns {Promise<GeoTIFF>} The resulting GeoTIFF file.\n */\nexport async function fromBlob(blob, signal) {\n  return GeoTIFF.fromSource(makeFileReaderSource(blob), signal);\n}\n\n/**\n * Construct a MultiGeoTIFF from the given URLs.\n * @param {string} mainUrl The URL for the main file.\n * @param {string[]} overviewUrls An array of URLs for the overview images.\n * @param {Object} [options] Additional options to pass to the source.\n *                           See [makeRemoteSource]{@link module:source.makeRemoteSource}\n *                           for details.\n * @param {AbortSignal} [signal] An AbortSignal that may be signalled if the request is\n *                               to be aborted\n * @returns {Promise<MultiGeoTIFF>} The resulting MultiGeoTIFF file.\n */\nexport async function fromUrls(mainUrl) {\n  let overviewUrls = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  let signal = arguments.length > 3 ? arguments[3] : undefined;\n  const mainFile = await GeoTIFF.fromSource(makeRemoteSource(mainUrl, options), signal);\n  const overviewFiles = await Promise.all(overviewUrls.map(url => GeoTIFF.fromSource(makeRemoteSource(url, options))));\n  return new MultiGeoTIFF(mainFile, overviewFiles);\n}\n\n/**\n * Main creating function for GeoTIFF files.\n * @param {(Array)} array of pixel values\n * @returns {metadata} metadata\n */\nexport function writeArrayBuffer(values, metadata) {\n  return writeGeotiff(values, metadata);\n}\nexport { Pool };\nexport { GeoTIFFImage };","map":{"version":3,"names":["GeoTIFFImage","DataView64","DataSlice","Pool","makeRemoteSource","makeBufferSource","makeFileReaderSource","makeFileSource","fieldTypes","fieldTagNames","arrayFields","geoKeyNames","writeGeotiff","globals","rgb","getDecoder","addDecoder","setLogger","default","BaseDecoder","getFieldTypeLength","fieldType","BYTE","ASCII","SBYTE","UNDEFINED","SHORT","SSHORT","LONG","SLONG","FLOAT","IFD","RATIONAL","SRATIONAL","DOUBLE","LONG8","SLONG8","IFD8","RangeError","parseGeoKeyDirectory","fileDirectory","rawGeoKeyDirectory","GeoKeyDirectory","geoKeyDirectory","i","key","location","count","offset","value","Error","substring","subarray","getValues","dataSlice","values","readMethod","fieldTypeLength","Uint8Array","readUint8","Int8Array","readInt8","Uint16Array","readUint16","Int16Array","readInt16","Uint32Array","readUint32","Int32Array","readInt32","Array","readUint64","readInt64","Float32Array","readFloat32","Float64Array","readFloat64","call","TextDecoder","decode","ImageFileDirectory","constructor","nextIFDByteOffset","GeoTIFFImageIndexError","index","GeoTIFFBase","readRasters","options","arguments","length","undefined","window","imageWindow","width","height","resX","resY","bbox","firstImage","getImage","usedImage","imageCount","getImageCount","imgBBox","getBoundingBox","oX","oY","getOrigin","rX","rY","getResolution","usedBBox","allImages","image","SubfileType","subfileType","NewSubfileType","newSubfileType","push","sort","a","b","getWidth","imgResX","imgResY","getHeight","wnd","imageResX","imageResY","Math","round","min","max","GeoTIFF","source","littleEndian","bigTiff","firstIFDOffset","cache","ifdRequests","ghostValues","getSlice","size","fallbackSize","fetch","parseFileDirectoryAt","entrySize","offsetSize","numDirEntries","byteSize","covers","entryCount","fieldTag","typeCount","fieldValues","valueOffset","actualOffset","readOffset","fieldDataSlice","indexOf","requestIFD","e","previousIfd","ifd","dataView","hasNext","getGhostValues","detectionString","heuristicAreaSize","slice","valuesString","firstLine","split","metadataSize","Number","fullString","filter","line","map","forEach","_ref","fromSource","signal","headerData","BOM","getUint16","TypeError","magicNumber","offsetByteSize","getUint64","getUint32","close","MultiGeoTIFF","mainFile","overviewFiles","imageFiles","concat","fileDirectoriesPerFile","fileDirectoriesPerFileParsing","parseFileDirectoriesPerFile","requests","file","Promise","all","visited","relativeIndex","imageFile","ii","imageCounts","reduce","ifds","fromUrl","url","fromArrayBuffer","arrayBuffer","fromFile","path","fromBlob","blob","fromUrls","mainUrl","overviewUrls","writeArrayBuffer","metadata"],"sources":["/home/umang/iHub/DFS_ReactViewer/client/node_modules/geotiff/dist-module/geotiff.js"],"sourcesContent":["/** @module geotiff */\nimport GeoTIFFImage from './geotiffimage.js';\nimport DataView64 from './dataview64.js';\nimport DataSlice from './dataslice.js';\nimport Pool from './pool.js';\n\nimport { makeRemoteSource } from './source/remote.js';\nimport { makeBufferSource } from './source/arraybuffer.js';\nimport { makeFileReaderSource } from './source/filereader.js';\nimport { makeFileSource } from './source/file.js';\n\nimport { fieldTypes, fieldTagNames, arrayFields, geoKeyNames } from './globals.js';\nimport { writeGeotiff } from './geotiffwriter.js';\nimport * as globals from './globals.js';\nimport * as rgb from './rgb.js';\nimport { getDecoder, addDecoder } from './compression/index.js';\nimport { setLogger } from './logging.js';\n\nexport { globals };\nexport { rgb };\nexport { default as BaseDecoder } from './compression/basedecoder.js';\nexport { getDecoder, addDecoder };\nexport { setLogger };\n\n/**\n * @typedef {Uint8Array | Int8Array | Uint16Array | Int16Array | Uint32Array | Int32Array | Float32Array | Float64Array}\n * TypedArray\n */\n\n/**\n * @typedef {{ height:number, width: number }} Dimensions\n */\n\n/**\n * The autogenerated docs are a little confusing here. The effective type is:\n *\n * `TypedArray & { height: number; width: number}`\n * @typedef {TypedArray & Dimensions} TypedArrayWithDimensions\n */\n\n/**\n * The autogenerated docs are a little confusing here. The effective type is:\n *\n * `TypedArray[] & { height: number; width: number}`\n * @typedef {TypedArray[] & Dimensions} TypedArrayArrayWithDimensions\n */\n\n/**\n *  The autogenerated docs are a little confusing here. The effective type is:\n *\n * `(TypedArray | TypedArray[]) & { height: number; width: number}`\n * @typedef {TypedArrayWithDimensions | TypedArrayArrayWithDimensions} ReadRasterResult\n */\n\nfunction getFieldTypeLength(fieldType) {\n  switch (fieldType) {\n    case fieldTypes.BYTE: case fieldTypes.ASCII: case fieldTypes.SBYTE: case fieldTypes.UNDEFINED:\n      return 1;\n    case fieldTypes.SHORT: case fieldTypes.SSHORT:\n      return 2;\n    case fieldTypes.LONG: case fieldTypes.SLONG: case fieldTypes.FLOAT: case fieldTypes.IFD:\n      return 4;\n    case fieldTypes.RATIONAL: case fieldTypes.SRATIONAL: case fieldTypes.DOUBLE:\n    case fieldTypes.LONG8: case fieldTypes.SLONG8: case fieldTypes.IFD8:\n      return 8;\n    default:\n      throw new RangeError(`Invalid field type: ${fieldType}`);\n  }\n}\n\nfunction parseGeoKeyDirectory(fileDirectory) {\n  const rawGeoKeyDirectory = fileDirectory.GeoKeyDirectory;\n  if (!rawGeoKeyDirectory) {\n    return null;\n  }\n\n  const geoKeyDirectory = {};\n  for (let i = 4; i <= rawGeoKeyDirectory[3] * 4; i += 4) {\n    const key = geoKeyNames[rawGeoKeyDirectory[i]];\n    const location = (rawGeoKeyDirectory[i + 1])\n      ? (fieldTagNames[rawGeoKeyDirectory[i + 1]]) : null;\n    const count = rawGeoKeyDirectory[i + 2];\n    const offset = rawGeoKeyDirectory[i + 3];\n\n    let value = null;\n    if (!location) {\n      value = offset;\n    } else {\n      value = fileDirectory[location];\n      if (typeof value === 'undefined' || value === null) {\n        throw new Error(`Could not get value of geoKey '${key}'.`);\n      } else if (typeof value === 'string') {\n        value = value.substring(offset, offset + count - 1);\n      } else if (value.subarray) {\n        value = value.subarray(offset, offset + count);\n        if (count === 1) {\n          value = value[0];\n        }\n      }\n    }\n    geoKeyDirectory[key] = value;\n  }\n  return geoKeyDirectory;\n}\n\nfunction getValues(dataSlice, fieldType, count, offset) {\n  let values = null;\n  let readMethod = null;\n  const fieldTypeLength = getFieldTypeLength(fieldType);\n\n  switch (fieldType) {\n    case fieldTypes.BYTE: case fieldTypes.ASCII: case fieldTypes.UNDEFINED:\n      values = new Uint8Array(count); readMethod = dataSlice.readUint8;\n      break;\n    case fieldTypes.SBYTE:\n      values = new Int8Array(count); readMethod = dataSlice.readInt8;\n      break;\n    case fieldTypes.SHORT:\n      values = new Uint16Array(count); readMethod = dataSlice.readUint16;\n      break;\n    case fieldTypes.SSHORT:\n      values = new Int16Array(count); readMethod = dataSlice.readInt16;\n      break;\n    case fieldTypes.LONG: case fieldTypes.IFD:\n      values = new Uint32Array(count); readMethod = dataSlice.readUint32;\n      break;\n    case fieldTypes.SLONG:\n      values = new Int32Array(count); readMethod = dataSlice.readInt32;\n      break;\n    case fieldTypes.LONG8: case fieldTypes.IFD8:\n      values = new Array(count); readMethod = dataSlice.readUint64;\n      break;\n    case fieldTypes.SLONG8:\n      values = new Array(count); readMethod = dataSlice.readInt64;\n      break;\n    case fieldTypes.RATIONAL:\n      values = new Uint32Array(count * 2); readMethod = dataSlice.readUint32;\n      break;\n    case fieldTypes.SRATIONAL:\n      values = new Int32Array(count * 2); readMethod = dataSlice.readInt32;\n      break;\n    case fieldTypes.FLOAT:\n      values = new Float32Array(count); readMethod = dataSlice.readFloat32;\n      break;\n    case fieldTypes.DOUBLE:\n      values = new Float64Array(count); readMethod = dataSlice.readFloat64;\n      break;\n    default:\n      throw new RangeError(`Invalid field type: ${fieldType}`);\n  }\n\n  // normal fields\n  if (!(fieldType === fieldTypes.RATIONAL || fieldType === fieldTypes.SRATIONAL)) {\n    for (let i = 0; i < count; ++i) {\n      values[i] = readMethod.call(\n        dataSlice, offset + (i * fieldTypeLength),\n      );\n    }\n  } else { // RATIONAL or SRATIONAL\n    for (let i = 0; i < count; i += 2) {\n      values[i] = readMethod.call(\n        dataSlice, offset + (i * fieldTypeLength),\n      );\n      values[i + 1] = readMethod.call(\n        dataSlice, offset + ((i * fieldTypeLength) + 4),\n      );\n    }\n  }\n\n  if (fieldType === fieldTypes.ASCII) {\n    return new TextDecoder('utf-8').decode(values);\n  }\n  return values;\n}\n\n/**\n * Data class to store the parsed file directory, geo key directory and\n * offset to the next IFD\n */\nclass ImageFileDirectory {\n  constructor(fileDirectory, geoKeyDirectory, nextIFDByteOffset) {\n    this.fileDirectory = fileDirectory;\n    this.geoKeyDirectory = geoKeyDirectory;\n    this.nextIFDByteOffset = nextIFDByteOffset;\n  }\n}\n\n/**\n * Error class for cases when an IFD index was requested, that does not exist\n * in the file.\n */\nclass GeoTIFFImageIndexError extends Error {\n  constructor(index) {\n    super(`No image at index ${index}`);\n    this.index = index;\n  }\n}\n\nclass GeoTIFFBase {\n  /**\n   * (experimental) Reads raster data from the best fitting image. This function uses\n   * the image with the lowest resolution that is still a higher resolution than the\n   * requested resolution.\n   * When specified, the `bbox` option is translated to the `window` option and the\n   * `resX` and `resY` to `width` and `height` respectively.\n   * Then, the [readRasters]{@link GeoTIFFImage#readRasters} method of the selected\n   * image is called and the result returned.\n   * @see GeoTIFFImage.readRasters\n   * @param {import('./geotiffimage').ReadRasterOptions} [options={}] optional parameters\n   * @returns {Promise<ReadRasterResult>} the decoded array(s), with `height` and `width`, as a promise\n   */\n  async readRasters(options = {}) {\n    const { window: imageWindow, width, height } = options;\n    let { resX, resY, bbox } = options;\n\n    const firstImage = await this.getImage();\n    let usedImage = firstImage;\n    const imageCount = await this.getImageCount();\n    const imgBBox = firstImage.getBoundingBox();\n\n    if (imageWindow && bbox) {\n      throw new Error('Both \"bbox\" and \"window\" passed.');\n    }\n\n    // if width/height is passed, transform it to resolution\n    if (width || height) {\n      // if we have an image window (pixel coordinates), transform it to a BBox\n      // using the origin/resolution of the first image.\n      if (imageWindow) {\n        const [oX, oY] = firstImage.getOrigin();\n        const [rX, rY] = firstImage.getResolution();\n\n        bbox = [\n          oX + (imageWindow[0] * rX),\n          oY + (imageWindow[1] * rY),\n          oX + (imageWindow[2] * rX),\n          oY + (imageWindow[3] * rY),\n        ];\n      }\n\n      // if we have a bbox (or calculated one)\n\n      const usedBBox = bbox || imgBBox;\n\n      if (width) {\n        if (resX) {\n          throw new Error('Both width and resX passed');\n        }\n        resX = (usedBBox[2] - usedBBox[0]) / width;\n      }\n      if (height) {\n        if (resY) {\n          throw new Error('Both width and resY passed');\n        }\n        resY = (usedBBox[3] - usedBBox[1]) / height;\n      }\n    }\n\n    // if resolution is set or calculated, try to get the image with the worst acceptable resolution\n    if (resX || resY) {\n      const allImages = [];\n      for (let i = 0; i < imageCount; ++i) {\n        const image = await this.getImage(i);\n        const { SubfileType: subfileType, NewSubfileType: newSubfileType } = image.fileDirectory;\n        if (i === 0 || subfileType === 2 || newSubfileType & 1) {\n          allImages.push(image);\n        }\n      }\n\n      allImages.sort((a, b) => a.getWidth() - b.getWidth());\n      for (let i = 0; i < allImages.length; ++i) {\n        const image = allImages[i];\n        const imgResX = (imgBBox[2] - imgBBox[0]) / image.getWidth();\n        const imgResY = (imgBBox[3] - imgBBox[1]) / image.getHeight();\n\n        usedImage = image;\n        if ((resX && resX > imgResX) || (resY && resY > imgResY)) {\n          break;\n        }\n      }\n    }\n\n    let wnd = imageWindow;\n    if (bbox) {\n      const [oX, oY] = firstImage.getOrigin();\n      const [imageResX, imageResY] = usedImage.getResolution(firstImage);\n\n      wnd = [\n        Math.round((bbox[0] - oX) / imageResX),\n        Math.round((bbox[1] - oY) / imageResY),\n        Math.round((bbox[2] - oX) / imageResX),\n        Math.round((bbox[3] - oY) / imageResY),\n      ];\n      wnd = [\n        Math.min(wnd[0], wnd[2]),\n        Math.min(wnd[1], wnd[3]),\n        Math.max(wnd[0], wnd[2]),\n        Math.max(wnd[1], wnd[3]),\n      ];\n    }\n\n    return usedImage.readRasters({ ...options, window: wnd });\n  }\n}\n\n/**\n * @typedef {Object} GeoTIFFOptions\n * @property {boolean} [cache=false] whether or not decoded tiles shall be cached.\n */\n\n/**\n * The abstraction for a whole GeoTIFF file.\n * @augments GeoTIFFBase\n */\nclass GeoTIFF extends GeoTIFFBase {\n  /**\n   * @constructor\n   * @param {*} source The datasource to read from.\n   * @param {boolean} littleEndian Whether the image uses little endian.\n   * @param {boolean} bigTiff Whether the image uses bigTIFF conventions.\n   * @param {number} firstIFDOffset The numeric byte-offset from the start of the image\n   *                                to the first IFD.\n   * @param {GeoTIFFOptions} [options] further options.\n   */\n  constructor(source, littleEndian, bigTiff, firstIFDOffset, options = {}) {\n    super();\n    this.source = source;\n    this.littleEndian = littleEndian;\n    this.bigTiff = bigTiff;\n    this.firstIFDOffset = firstIFDOffset;\n    this.cache = options.cache || false;\n    this.ifdRequests = [];\n    this.ghostValues = null;\n  }\n\n  async getSlice(offset, size) {\n    const fallbackSize = this.bigTiff ? 4048 : 1024;\n    return new DataSlice(\n      (await this.source.fetch([{\n        offset,\n        length: typeof size !== 'undefined' ? size : fallbackSize,\n      }]))[0],\n      offset,\n      this.littleEndian,\n      this.bigTiff,\n    );\n  }\n\n  /**\n   * Instructs to parse an image file directory at the given file offset.\n   * As there is no way to ensure that a location is indeed the start of an IFD,\n   * this function must be called with caution (e.g only using the IFD offsets from\n   * the headers or other IFDs).\n   * @param {number} offset the offset to parse the IFD at\n   * @returns {Promise<ImageFileDirectory>} the parsed IFD\n   */\n  async parseFileDirectoryAt(offset) {\n    const entrySize = this.bigTiff ? 20 : 12;\n    const offsetSize = this.bigTiff ? 8 : 2;\n\n    let dataSlice = await this.getSlice(offset);\n    const numDirEntries = this.bigTiff\n      ? dataSlice.readUint64(offset)\n      : dataSlice.readUint16(offset);\n\n    // if the slice does not cover the whole IFD, request a bigger slice, where the\n    // whole IFD fits: num of entries + n x tag length + offset to next IFD\n    const byteSize = (numDirEntries * entrySize) + (this.bigTiff ? 16 : 6);\n    if (!dataSlice.covers(offset, byteSize)) {\n      dataSlice = await this.getSlice(offset, byteSize);\n    }\n\n    const fileDirectory = {};\n\n    // loop over the IFD and create a file directory object\n    let i = offset + (this.bigTiff ? 8 : 2);\n    for (let entryCount = 0; entryCount < numDirEntries; i += entrySize, ++entryCount) {\n      const fieldTag = dataSlice.readUint16(i);\n      const fieldType = dataSlice.readUint16(i + 2);\n      const typeCount = this.bigTiff\n        ? dataSlice.readUint64(i + 4)\n        : dataSlice.readUint32(i + 4);\n\n      let fieldValues;\n      let value;\n      const fieldTypeLength = getFieldTypeLength(fieldType);\n      const valueOffset = i + (this.bigTiff ? 12 : 8);\n\n      // check whether the value is directly encoded in the tag or refers to a\n      // different external byte range\n      if (fieldTypeLength * typeCount <= (this.bigTiff ? 8 : 4)) {\n        fieldValues = getValues(dataSlice, fieldType, typeCount, valueOffset);\n      } else {\n        // resolve the reference to the actual byte range\n        const actualOffset = dataSlice.readOffset(valueOffset);\n        const length = getFieldTypeLength(fieldType) * typeCount;\n\n        // check, whether we actually cover the referenced byte range; if not,\n        // request a new slice of bytes to read from it\n        if (dataSlice.covers(actualOffset, length)) {\n          fieldValues = getValues(dataSlice, fieldType, typeCount, actualOffset);\n        } else {\n          const fieldDataSlice = await this.getSlice(actualOffset, length);\n          fieldValues = getValues(fieldDataSlice, fieldType, typeCount, actualOffset);\n        }\n      }\n\n      // unpack single values from the array\n      if (typeCount === 1 && arrayFields.indexOf(fieldTag) === -1\n        && !(fieldType === fieldTypes.RATIONAL || fieldType === fieldTypes.SRATIONAL)) {\n        value = fieldValues[0];\n      } else {\n        value = fieldValues;\n      }\n\n      // write the tags value to the file directly\n      fileDirectory[fieldTagNames[fieldTag]] = value;\n    }\n    const geoKeyDirectory = parseGeoKeyDirectory(fileDirectory);\n    const nextIFDByteOffset = dataSlice.readOffset(\n      offset + offsetSize + (entrySize * numDirEntries),\n    );\n\n    return new ImageFileDirectory(\n      fileDirectory,\n      geoKeyDirectory,\n      nextIFDByteOffset,\n    );\n  }\n\n  async requestIFD(index) {\n    // see if we already have that IFD index requested.\n    if (this.ifdRequests[index]) {\n      // attach to an already requested IFD\n      return this.ifdRequests[index];\n    } else if (index === 0) {\n      // special case for index 0\n      this.ifdRequests[index] = this.parseFileDirectoryAt(this.firstIFDOffset);\n      return this.ifdRequests[index];\n    } else if (!this.ifdRequests[index - 1]) {\n      // if the previous IFD was not yet loaded, load that one first\n      // this is the recursive call.\n      try {\n        this.ifdRequests[index - 1] = this.requestIFD(index - 1);\n      } catch (e) {\n        // if the previous one already was an index error, rethrow\n        // with the current index\n        if (e instanceof GeoTIFFImageIndexError) {\n          throw new GeoTIFFImageIndexError(index);\n        }\n        // rethrow anything else\n        throw e;\n      }\n    }\n    // if the previous IFD was loaded, we can finally fetch the one we are interested in.\n    // we need to wrap this in an IIFE, otherwise this.ifdRequests[index] would be delayed\n    this.ifdRequests[index] = (async () => {\n      const previousIfd = await this.ifdRequests[index - 1];\n      if (previousIfd.nextIFDByteOffset === 0) {\n        throw new GeoTIFFImageIndexError(index);\n      }\n      return this.parseFileDirectoryAt(previousIfd.nextIFDByteOffset);\n    })();\n    return this.ifdRequests[index];\n  }\n\n  /**\n   * Get the n-th internal subfile of an image. By default, the first is returned.\n   *\n   * @param {number} [index=0] the index of the image to return.\n   * @returns {Promise<GeoTIFFImage>} the image at the given index\n   */\n  async getImage(index = 0) {\n    const ifd = await this.requestIFD(index);\n    return new GeoTIFFImage(\n      ifd.fileDirectory, ifd.geoKeyDirectory,\n      this.dataView, this.littleEndian, this.cache, this.source,\n    );\n  }\n\n  /**\n   * Returns the count of the internal subfiles.\n   *\n   * @returns {Promise<number>} the number of internal subfile images\n   */\n  async getImageCount() {\n    let index = 0;\n    // loop until we run out of IFDs\n    let hasNext = true;\n    while (hasNext) {\n      try {\n        await this.requestIFD(index);\n        ++index;\n      } catch (e) {\n        if (e instanceof GeoTIFFImageIndexError) {\n          hasNext = false;\n        } else {\n          throw e;\n        }\n      }\n    }\n    return index;\n  }\n\n  /**\n   * Get the values of the COG ghost area as a parsed map.\n   * See https://gdal.org/drivers/raster/cog.html#header-ghost-area for reference\n   * @returns {Promise<Object>} the parsed ghost area or null, if no such area was found\n   */\n  async getGhostValues() {\n    const offset = this.bigTiff ? 16 : 8;\n    if (this.ghostValues) {\n      return this.ghostValues;\n    }\n    const detectionString = 'GDAL_STRUCTURAL_METADATA_SIZE=';\n    const heuristicAreaSize = detectionString.length + 100;\n    let slice = await this.getSlice(offset, heuristicAreaSize);\n    if (detectionString === getValues(slice, fieldTypes.ASCII, detectionString.length, offset)) {\n      const valuesString = getValues(slice, fieldTypes.ASCII, heuristicAreaSize, offset);\n      const firstLine = valuesString.split('\\n')[0];\n      const metadataSize = Number(firstLine.split('=')[1].split(' ')[0]) + firstLine.length;\n      if (metadataSize > heuristicAreaSize) {\n        slice = await this.getSlice(offset, metadataSize);\n      }\n      const fullString = getValues(slice, fieldTypes.ASCII, metadataSize, offset);\n      this.ghostValues = {};\n      fullString\n        .split('\\n')\n        .filter((line) => line.length > 0)\n        .map((line) => line.split('='))\n        .forEach(([key, value]) => {\n          this.ghostValues[key] = value;\n        });\n    }\n    return this.ghostValues;\n  }\n\n  /**\n   * Parse a (Geo)TIFF file from the given source.\n   *\n   * @param {*} source The source of data to parse from.\n   * @param {GeoTIFFOptions} [options] Additional options.\n   * @param {AbortSignal} [signal] An AbortSignal that may be signalled if the request is\n   *                               to be aborted\n   */\n  static async fromSource(source, options, signal) {\n    const headerData = (await source.fetch([{ offset: 0, length: 1024 }], signal))[0];\n    const dataView = new DataView64(headerData);\n\n    const BOM = dataView.getUint16(0, 0);\n    let littleEndian;\n    if (BOM === 0x4949) {\n      littleEndian = true;\n    } else if (BOM === 0x4D4D) {\n      littleEndian = false;\n    } else {\n      throw new TypeError('Invalid byte order value.');\n    }\n\n    const magicNumber = dataView.getUint16(2, littleEndian);\n    let bigTiff;\n    if (magicNumber === 42) {\n      bigTiff = false;\n    } else if (magicNumber === 43) {\n      bigTiff = true;\n      const offsetByteSize = dataView.getUint16(4, littleEndian);\n      if (offsetByteSize !== 8) {\n        throw new Error('Unsupported offset byte-size.');\n      }\n    } else {\n      throw new TypeError('Invalid magic number.');\n    }\n\n    const firstIFDOffset = bigTiff\n      ? dataView.getUint64(8, littleEndian)\n      : dataView.getUint32(4, littleEndian);\n    return new GeoTIFF(source, littleEndian, bigTiff, firstIFDOffset, options);\n  }\n\n  /**\n   * Closes the underlying file buffer\n   * N.B. After the GeoTIFF has been completely processed it needs\n   * to be closed but only if it has been constructed from a file.\n   */\n  close() {\n    if (typeof this.source.close === 'function') {\n      return this.source.close();\n    }\n    return false;\n  }\n}\n\nexport { GeoTIFF };\nexport default GeoTIFF;\n\n/**\n * Wrapper for GeoTIFF files that have external overviews.\n * @augments GeoTIFFBase\n */\nclass MultiGeoTIFF extends GeoTIFFBase {\n  /**\n   * Construct a new MultiGeoTIFF from a main and several overview files.\n   * @param {GeoTIFF} mainFile The main GeoTIFF file.\n   * @param {GeoTIFF[]} overviewFiles An array of overview files.\n   */\n  constructor(mainFile, overviewFiles) {\n    super();\n    this.mainFile = mainFile;\n    this.overviewFiles = overviewFiles;\n    this.imageFiles = [mainFile].concat(overviewFiles);\n\n    this.fileDirectoriesPerFile = null;\n    this.fileDirectoriesPerFileParsing = null;\n    this.imageCount = null;\n  }\n\n  async parseFileDirectoriesPerFile() {\n    const requests = [this.mainFile.parseFileDirectoryAt(this.mainFile.firstIFDOffset)]\n      .concat(this.overviewFiles.map((file) => file.parseFileDirectoryAt(file.firstIFDOffset)));\n\n    this.fileDirectoriesPerFile = await Promise.all(requests);\n    return this.fileDirectoriesPerFile;\n  }\n\n  /**\n   * Get the n-th internal subfile of an image. By default, the first is returned.\n   *\n   * @param {number} [index=0] the index of the image to return.\n   * @returns {Promise<GeoTIFFImage>} the image at the given index\n   */\n  async getImage(index = 0) {\n    await this.getImageCount();\n    await this.parseFileDirectoriesPerFile();\n    let visited = 0;\n    let relativeIndex = 0;\n    for (let i = 0; i < this.imageFiles.length; i++) {\n      const imageFile = this.imageFiles[i];\n      for (let ii = 0; ii < this.imageCounts[i]; ii++) {\n        if (index === visited) {\n          const ifd = await imageFile.requestIFD(relativeIndex);\n          return new GeoTIFFImage(\n            ifd.fileDirectory, ifd.geoKeyDirectory,\n            imageFile.dataView, imageFile.littleEndian, imageFile.cache, imageFile.source,\n          );\n        }\n        visited++;\n        relativeIndex++;\n      }\n      relativeIndex = 0;\n    }\n\n    throw new RangeError('Invalid image index');\n  }\n\n  /**\n   * Returns the count of the internal subfiles.\n   *\n   * @returns {Promise<number>} the number of internal subfile images\n   */\n  async getImageCount() {\n    if (this.imageCount !== null) {\n      return this.imageCount;\n    }\n    const requests = [this.mainFile.getImageCount()]\n      .concat(this.overviewFiles.map((file) => file.getImageCount()));\n    this.imageCounts = await Promise.all(requests);\n    this.imageCount = this.imageCounts.reduce((count, ifds) => count + ifds, 0);\n    return this.imageCount;\n  }\n}\n\nexport { MultiGeoTIFF };\n\n/**\n * Creates a new GeoTIFF from a remote URL.\n * @param {string} url The URL to access the image from\n * @param {object} [options] Additional options to pass to the source.\n *                           See {@link makeRemoteSource} for details.\n * @param {AbortSignal} [signal] An AbortSignal that may be signalled if the request is\n *                               to be aborted\n * @returns {Promise<GeoTIFF>} The resulting GeoTIFF file.\n */\nexport async function fromUrl(url, options = {}, signal) {\n  return GeoTIFF.fromSource(makeRemoteSource(url, options), signal);\n}\n\n/**\n * Construct a new GeoTIFF from an\n * [ArrayBuffer]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer}.\n * @param {ArrayBuffer} arrayBuffer The data to read the file from.\n * @param {AbortSignal} [signal] An AbortSignal that may be signalled if the request is\n *                               to be aborted\n * @returns {Promise<GeoTIFF>} The resulting GeoTIFF file.\n */\nexport async function fromArrayBuffer(arrayBuffer, signal) {\n  return GeoTIFF.fromSource(makeBufferSource(arrayBuffer), signal);\n}\n\n/**\n * Construct a GeoTIFF from a local file path. This uses the node\n * [filesystem API]{@link https://nodejs.org/api/fs.html} and is\n * not available on browsers.\n *\n * N.B. After the GeoTIFF has been completely processed it needs\n * to be closed but only if it has been constructed from a file.\n * @param {string} path The file path to read from.\n * @param {AbortSignal} [signal] An AbortSignal that may be signalled if the request is\n *                               to be aborted\n * @returns {Promise<GeoTIFF>} The resulting GeoTIFF file.\n */\nexport async function fromFile(path, signal) {\n  return GeoTIFF.fromSource(makeFileSource(path), signal);\n}\n\n/**\n * Construct a GeoTIFF from an HTML\n * [Blob]{@link https://developer.mozilla.org/en-US/docs/Web/API/Blob} or\n * [File]{@link https://developer.mozilla.org/en-US/docs/Web/API/File}\n * object.\n * @param {Blob|File} blob The Blob or File object to read from.\n * @param {AbortSignal} [signal] An AbortSignal that may be signalled if the request is\n *                               to be aborted\n * @returns {Promise<GeoTIFF>} The resulting GeoTIFF file.\n */\nexport async function fromBlob(blob, signal) {\n  return GeoTIFF.fromSource(makeFileReaderSource(blob), signal);\n}\n\n/**\n * Construct a MultiGeoTIFF from the given URLs.\n * @param {string} mainUrl The URL for the main file.\n * @param {string[]} overviewUrls An array of URLs for the overview images.\n * @param {Object} [options] Additional options to pass to the source.\n *                           See [makeRemoteSource]{@link module:source.makeRemoteSource}\n *                           for details.\n * @param {AbortSignal} [signal] An AbortSignal that may be signalled if the request is\n *                               to be aborted\n * @returns {Promise<MultiGeoTIFF>} The resulting MultiGeoTIFF file.\n */\nexport async function fromUrls(mainUrl, overviewUrls = [], options = {}, signal) {\n  const mainFile = await GeoTIFF.fromSource(makeRemoteSource(mainUrl, options), signal);\n  const overviewFiles = await Promise.all(\n    overviewUrls.map((url) => GeoTIFF.fromSource(makeRemoteSource(url, options))),\n  );\n\n  return new MultiGeoTIFF(mainFile, overviewFiles);\n}\n\n/**\n * Main creating function for GeoTIFF files.\n * @param {(Array)} array of pixel values\n * @returns {metadata} metadata\n */\nexport function writeArrayBuffer(values, metadata) {\n  return writeGeotiff(values, metadata);\n}\n\nexport { Pool };\nexport { GeoTIFFImage };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}