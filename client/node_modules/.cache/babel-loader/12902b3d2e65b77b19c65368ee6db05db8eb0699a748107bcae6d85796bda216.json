{"ast":null,"code":"var _jsxFileName = \"/home/umang/iHub/DFS_ReactViewer/client/src/components/OpenSeadragonViewer.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport OpenSeadragon from \"openseadragon\";\nimport './OpenSeadragon.css';\nimport GeoTIFF, { fromUrl, fromUrls, fromArrayBuffer, fromBlob } from 'geotiff';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction OpenSeadragonViewer(props) {\n  _s();\n  // useEffect(() => {\n  //   const viewer = OpenSeadragon({\n  //     id: 'openseadragon-viewer',\n  //     prefixUrl:'openseadragon-images/' ,\n  //     tileSources: [{\n  //       type: 'image',\n  //       url: props.imageUrl,\n  //       buildPyramid: false\n  //     }],\n  //     animationTime: 0.5,\n  //     blendTime: 0.1,\n  //     constrainDuringPan: true,\n  //     maxZoomPixelRatio: 2,\n  //     minZoomLevel: 1,\n  //     visibilityRatio: 1,\n  //     zoomPerScroll: 2,\n  //     showNavigator:  true,\n  //     crossOriginPolicy: \"Anonymous\"\n  //   });\n\n  //   return () => {\n  //     viewer && viewer.destroy();\n  //   };\n  // }, [props.imageUrl]);   \n\n  useEffect(() => {\n    let viewer;\n    const loadGeoTIFF = async tiffUrl => {\n      // const response = await fetch(tiffUrl);\n      // const arrayBuffer = await response.arrayBuffer();\n      const tiff = await fromUrl;\n      const image = await tiff.getImage();\n      const width = image.getWidth();\n      const height = image.getHeight();\n      const tileSource = new OpenSeadragon.GeoTIFFTileSource(image, width, height);\n      return tileSource;\n    };\n    const initializeViewer = async () => {\n      const tileSource = await loadGeoTIFF(props.imageUrl);\n      viewer = OpenSeadragon({\n        id: \"openseadragon-viewer\",\n        prefixUrl: \"openseadragon-images/\",\n        tileSources: [tileSource],\n        animationTime: 0.5,\n        blendTime: 0.1,\n        constrainDuringPan: true,\n        maxZoomPixelRatio: 2,\n        minZoomLevel: 1,\n        visibilityRatio: 1,\n        zoomPerScroll: 2,\n        showNavigator: true,\n        crossOriginPolicy: \"Anonymous\"\n      });\n    };\n    initializeViewer();\n    return () => {\n      viewer && viewer.destroy();\n    };\n  }, [props.imageUrl]);\n  function takeSS() {\n    var current_view = document.getElementsByTagName(\"canvas\");\n    if (current_view) {\n      console.log(current_view.length);\n      var my_view = current_view[0];\n      var img = my_view.toDataURL(\"image/png\");\n      const link = document.createElement('a');\n      link.href = img;\n      link.download = props.imageName;\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: takeSS,\n      id: \"print-view\",\n      children: \"Print View\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"openseadragon-viewer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 7\n  }, this);\n}\n_s(OpenSeadragonViewer, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = OpenSeadragonViewer;\nexport default OpenSeadragonViewer;\nvar _c;\n$RefreshReg$(_c, \"OpenSeadragonViewer\");","map":{"version":3,"names":["React","useState","useEffect","OpenSeadragon","GeoTIFF","fromUrl","fromUrls","fromArrayBuffer","fromBlob","jsxDEV","_jsxDEV","OpenSeadragonViewer","props","_s","viewer","loadGeoTIFF","tiffUrl","tiff","image","getImage","width","getWidth","height","getHeight","tileSource","GeoTIFFTileSource","initializeViewer","imageUrl","id","prefixUrl","tileSources","animationTime","blendTime","constrainDuringPan","maxZoomPixelRatio","minZoomLevel","visibilityRatio","zoomPerScroll","showNavigator","crossOriginPolicy","destroy","takeSS","current_view","document","getElementsByTagName","console","log","length","my_view","img","toDataURL","link","createElement","href","download","imageName","body","appendChild","click","removeChild","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/umang/iHub/DFS_ReactViewer/client/src/components/OpenSeadragonViewer.js"],"sourcesContent":["import React, {useState,useEffect} from \"react\";\nimport OpenSeadragon from \"openseadragon\";\nimport './OpenSeadragon.css';\nimport GeoTIFF, { fromUrl, fromUrls, fromArrayBuffer, fromBlob } from 'geotiff';\n\nfunction OpenSeadragonViewer(props) {\n  \n      // useEffect(() => {\n      //   const viewer = OpenSeadragon({\n      //     id: 'openseadragon-viewer',\n      //     prefixUrl:'openseadragon-images/' ,\n      //     tileSources: [{\n      //       type: 'image',\n      //       url: props.imageUrl,\n      //       buildPyramid: false\n      //     }],\n      //     animationTime: 0.5,\n      //     blendTime: 0.1,\n      //     constrainDuringPan: true,\n      //     maxZoomPixelRatio: 2,\n      //     minZoomLevel: 1,\n      //     visibilityRatio: 1,\n      //     zoomPerScroll: 2,\n      //     showNavigator:  true,\n      //     crossOriginPolicy: \"Anonymous\"\n      //   });\n    \n      //   return () => {\n      //     viewer && viewer.destroy();\n      //   };\n      // }, [props.imageUrl]);   \n\n      useEffect(() => {\n        let viewer;\n        \n        const loadGeoTIFF = async (tiffUrl) => {\n          // const response = await fetch(tiffUrl);\n          // const arrayBuffer = await response.arrayBuffer();\n          const tiff = await fromUrl;\n          const image = await tiff.getImage();\n          const width = image.getWidth();\n          const height = image.getHeight();\n          const tileSource = new OpenSeadragon.GeoTIFFTileSource(image, width, height);\n          return tileSource;\n        };\n      \n        const initializeViewer = async () => {\n          const tileSource = await loadGeoTIFF(props.imageUrl);\n    \n          viewer = OpenSeadragon({\n            id: \"openseadragon-viewer\",\n            prefixUrl: \"openseadragon-images/\",\n            tileSources: [tileSource],\n            animationTime: 0.5,\n            blendTime: 0.1,\n            constrainDuringPan: true,\n            maxZoomPixelRatio: 2,\n            minZoomLevel: 1,\n            visibilityRatio: 1,\n            zoomPerScroll: 2,\n            showNavigator: true,\n            crossOriginPolicy: \"Anonymous\",\n          });\n        };\n    \n        initializeViewer();\n    \n        return () => {\n          viewer && viewer.destroy();\n        };\n      }, [props.imageUrl]);\n      \n      \n      function takeSS(){\n        var current_view = document.getElementsByTagName(\"canvas\");\n        if (current_view){\n          console.log(current_view.length);\n          var my_view = current_view[0];\n          var img = my_view.toDataURL(\"image/png\");\n          const link = document.createElement('a')\n          link.href = img\n          link.download = props.imageName\n          document.body.appendChild(link)\n          link.click()\n          document.body.removeChild(link)\n        }\n      }\n\n    return ( \n      <div>\n        <button onClick={takeSS} id=\"print-view\" >Print View</button>\n        <div id=\"openseadragon-viewer\" ></div>\n      </div>\n    )\n}\n\nexport default OpenSeadragonViewer;\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}