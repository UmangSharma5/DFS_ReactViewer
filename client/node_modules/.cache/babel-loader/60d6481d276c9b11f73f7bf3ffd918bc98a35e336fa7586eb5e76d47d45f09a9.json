{"ast":null,"code":"import React,{useState,useEffect}from\"react\";import OpenSeadragon from\"openseadragon\";import'./OpenSeadragon.css';import GeoTIFF from\"geotiff\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function OpenSeadragonViewer(props){useEffect(function(){var viewer=OpenSeadragon({id:'openseadragon-viewer',prefixUrl:'openseadragon-images/',tileSources:[{type:'image',url:props.imageUrl}],animationTime:0.5,blendTime:0.1,constrainDuringPan:true,maxZoomPixelRatio:2,minZoomLevel:1,visibilityRatio:1,zoomPerScroll:2,showNavigator:true,crossOriginPolicy:\"Anonymous\"});//   setupImage(props.imageUrl);\n//   function setupImage(tileSourceInput){\n//     viewer.close();\n//     let tiffTileSources = OpenSeadragon.GeoTIFFTileSource.getAllTileSources(tileSourceInput, {logLatency: true});\n//     tiffTileSources.then(ts=>viewer.open(ts));\n// }\nreturn function(){viewer&&viewer.destroy();};},[props.imageUrl]);function takeSS(){var current_view=document.getElementsByTagName(\"canvas\");if(current_view){console.log(current_view.length);var my_view=current_view[0];var img=my_view.toDataURL(\"image/png\");var link=document.createElement('a');link.href=img;link.download=props.imageName;document.body.appendChild(link);link.click();document.body.removeChild(link);}}return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"button\",{onClick:takeSS,id:\"print-view\",children:\"Print View\"}),/*#__PURE__*/_jsx(\"div\",{id:\"openseadragon-viewer\"})]});}export default OpenSeadragonViewer;// useEffect(() => {\n//   let viewer;\n//   const loadGeoTIFF = async (tiffUrl) => {\n//     // const response = await fetch(tiffUrl);\n//     // const arrayBuffer = await response.arrayBuffer();\n//     // const tiff = await fromUrl(tiffUrl);\n//     const tiff = await fromUrl(props.imageUrl, { byteOrder: 1 });\n//     const image = await tiff.getImage();\n//     const width = image.getWidth();\n//     const height = image.getHeight();\n//     const tileSource = new OpenSeadragon.GeoTIFFTileSource(image, width, height);\n//     return tileSource;\n//   };\n//   const initializeViewer = async () => {\n//     const tileSource = await loadGeoTIFF(props.imageUrl);\n//     viewer = OpenSeadragon({\n//       id: \"openseadragon-viewer\",\n//       prefixUrl: \"openseadragon-images/\",\n//       tileSources: [tileSource],\n//       animationTime: 0.5,\n//       blendTime: 0.1,\n//       constrainDuringPan: true,\n//       maxZoomPixelRatio: 2,\n//       minZoomLevel: 1,\n//       visibilityRatio: 1,\n//       zoomPerScroll: 2,\n//       showNavigator: true,\n//       crossOriginPolicy: \"Anonymous\",\n//     });\n//   };\n//   initializeViewer();\n//   return () => {\n//     viewer && viewer.destroy();\n//   };\n// }, [props.imageUrl]);","map":{"version":3,"names":["React","useState","useEffect","OpenSeadragon","GeoTIFF","jsx","_jsx","jsxs","_jsxs","OpenSeadragonViewer","props","viewer","id","prefixUrl","tileSources","type","url","imageUrl","animationTime","blendTime","constrainDuringPan","maxZoomPixelRatio","minZoomLevel","visibilityRatio","zoomPerScroll","showNavigator","crossOriginPolicy","destroy","takeSS","current_view","document","getElementsByTagName","console","log","length","my_view","img","toDataURL","link","createElement","href","download","imageName","body","appendChild","click","removeChild","children","onClick"],"sources":["/home/umang/iHub/DFS_ReactViewer/client/src/components/OpenSeadragonViewer.js"],"sourcesContent":["import React, {useState,useEffect} from \"react\";\nimport OpenSeadragon from \"openseadragon\";\nimport './OpenSeadragon.css';\nimport GeoTIFF from \"geotiff\";\n\nfunction OpenSeadragonViewer(props) {\n  \n      useEffect(() => {\n        let viewer = OpenSeadragon({\n          id: 'openseadragon-viewer',\n          prefixUrl:'openseadragon-images/' ,\n          tileSources: [{\n            type: 'image',\n            url: props.imageUrl\n          }],\n          animationTime: 0.5,\n          blendTime: 0.1,\n          constrainDuringPan: true,\n          maxZoomPixelRatio: 2,\n          minZoomLevel: 1,\n          visibilityRatio: 1,\n          zoomPerScroll: 2,\n          showNavigator:  true,\n          crossOriginPolicy: \"Anonymous\"\n        });\n      //   setupImage(props.imageUrl);\n\n      //   function setupImage(tileSourceInput){\n      //     viewer.close();\n      //     let tiffTileSources = OpenSeadragon.GeoTIFFTileSource.getAllTileSources(tileSourceInput, {logLatency: true});\n      //     tiffTileSources.then(ts=>viewer.open(ts));\n      // }\n        return () => {\n          viewer && viewer.destroy();\n        };\n      }, [props.imageUrl]);\n    \n      \n      function takeSS(){\n        var current_view = document.getElementsByTagName(\"canvas\");\n        if (current_view){\n          console.log(current_view.length);\n          var my_view = current_view[0];\n          var img = my_view.toDataURL(\"image/png\");\n          const link = document.createElement('a')\n          link.href = img\n          link.download = props.imageName\n          document.body.appendChild(link)\n          link.click()\n          document.body.removeChild(link)\n        }\n      }\n\n    return ( \n      <div>\n        <button onClick={takeSS} id=\"print-view\" >Print View</button>\n        <div id=\"openseadragon-viewer\" ></div>\n      </div>\n    )\n}\n\nexport default OpenSeadragonViewer;\n\n\n\n// useEffect(() => {\n//   let viewer;\n  \n//   const loadGeoTIFF = async (tiffUrl) => {\n//     // const response = await fetch(tiffUrl);\n//     // const arrayBuffer = await response.arrayBuffer();\n//     // const tiff = await fromUrl(tiffUrl);\n//     const tiff = await fromUrl(props.imageUrl, { byteOrder: 1 });\n//     const image = await tiff.getImage();\n//     const width = image.getWidth();\n//     const height = image.getHeight();\n//     const tileSource = new OpenSeadragon.GeoTIFFTileSource(image, width, height);\n//     return tileSource;\n//   };\n\n//   const initializeViewer = async () => {\n//     const tileSource = await loadGeoTIFF(props.imageUrl);\n\n//     viewer = OpenSeadragon({\n//       id: \"openseadragon-viewer\",\n//       prefixUrl: \"openseadragon-images/\",\n//       tileSources: [tileSource],\n//       animationTime: 0.5,\n//       blendTime: 0.1,\n//       constrainDuringPan: true,\n//       maxZoomPixelRatio: 2,\n//       minZoomLevel: 1,\n//       visibilityRatio: 1,\n//       zoomPerScroll: 2,\n//       showNavigator: true,\n//       crossOriginPolicy: \"Anonymous\",\n//     });\n//   };\n\n//   initializeViewer();\n\n//   return () => {\n//     viewer && viewer.destroy();\n//   };\n// }, [props.imageUrl]);\n\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAGC,QAAQ,CAACC,SAAS,KAAO,OAAO,CAC/C,MAAO,CAAAC,aAAa,KAAM,eAAe,CACzC,MAAO,qBAAqB,CAC5B,MAAO,CAAAC,OAAO,KAAM,SAAS,CAAC,OAAAC,GAAA,IAAAC,IAAA,gCAAAC,IAAA,IAAAC,KAAA,yBAE9B,QAAS,CAAAC,mBAAmBA,CAACC,KAAK,CAAE,CAE9BR,SAAS,CAAC,UAAM,CACd,GAAI,CAAAS,MAAM,CAAGR,aAAa,CAAC,CACzBS,EAAE,CAAE,sBAAsB,CAC1BC,SAAS,CAAC,uBAAuB,CACjCC,WAAW,CAAE,CAAC,CACZC,IAAI,CAAE,OAAO,CACbC,GAAG,CAAEN,KAAK,CAACO,QACb,CAAC,CAAC,CACFC,aAAa,CAAE,GAAG,CAClBC,SAAS,CAAE,GAAG,CACdC,kBAAkB,CAAE,IAAI,CACxBC,iBAAiB,CAAE,CAAC,CACpBC,YAAY,CAAE,CAAC,CACfC,eAAe,CAAE,CAAC,CAClBC,aAAa,CAAE,CAAC,CAChBC,aAAa,CAAG,IAAI,CACpBC,iBAAiB,CAAE,WACrB,CAAC,CAAC,CACJ;AAEA;AACA;AACA;AACA;AACA;AACE,MAAO,WAAM,CACXf,MAAM,EAAIA,MAAM,CAACgB,OAAO,CAAC,CAAC,CAC5B,CAAC,CACH,CAAC,CAAE,CAACjB,KAAK,CAACO,QAAQ,CAAC,CAAC,CAGpB,QAAS,CAAAW,MAAMA,CAAA,CAAE,CACf,GAAI,CAAAC,YAAY,CAAGC,QAAQ,CAACC,oBAAoB,CAAC,QAAQ,CAAC,CAC1D,GAAIF,YAAY,CAAC,CACfG,OAAO,CAACC,GAAG,CAACJ,YAAY,CAACK,MAAM,CAAC,CAChC,GAAI,CAAAC,OAAO,CAAGN,YAAY,CAAC,CAAC,CAAC,CAC7B,GAAI,CAAAO,GAAG,CAAGD,OAAO,CAACE,SAAS,CAAC,WAAW,CAAC,CACxC,GAAM,CAAAC,IAAI,CAAGR,QAAQ,CAACS,aAAa,CAAC,GAAG,CAAC,CACxCD,IAAI,CAACE,IAAI,CAAGJ,GAAG,CACfE,IAAI,CAACG,QAAQ,CAAG/B,KAAK,CAACgC,SAAS,CAC/BZ,QAAQ,CAACa,IAAI,CAACC,WAAW,CAACN,IAAI,CAAC,CAC/BA,IAAI,CAACO,KAAK,CAAC,CAAC,CACZf,QAAQ,CAACa,IAAI,CAACG,WAAW,CAACR,IAAI,CAAC,CACjC,CACF,CAEF,mBACE9B,KAAA,QAAAuC,QAAA,eACEzC,IAAA,WAAQ0C,OAAO,CAAEpB,MAAO,CAAChB,EAAE,CAAC,YAAY,CAAAmC,QAAA,CAAE,YAAU,CAAQ,CAAC,cAC7DzC,IAAA,QAAKM,EAAE,CAAC,sBAAsB,CAAO,CAAC,EACnC,CAAC,CAEZ,CAEA,cAAe,CAAAH,mBAAmB,CAIlC;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}