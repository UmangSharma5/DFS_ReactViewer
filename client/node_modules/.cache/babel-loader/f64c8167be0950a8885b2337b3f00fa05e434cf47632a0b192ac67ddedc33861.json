{"ast":null,"code":"var indexOfMatch = require(\"./index-of-match.js\");\nvar indexOfMatchEnd = require(\"./index-of-match-end.js\");\nvar countSubstring = require(\"./count-substring.js\");\nfunction findTagByName(xml, tagName, options) {\n  var debug = options && options.debug || false;\n  var nested = !(options && typeof options.nested === false);\n  var startIndex = options && options.startIndex || 0;\n  if (debug) console.log(\"[xml-utils] starting findTagByName with\", tagName, \" and \", options);\n  var start = indexOfMatch(xml, \"<\".concat(tagName, \"[ \\n>/]\"), startIndex);\n  if (debug) console.log(\"[xml-utils] start:\", start);\n  if (start === -1) return undefined;\n  var afterStart = xml.slice(start + tagName.length);\n  var relativeEnd = indexOfMatchEnd(afterStart, \"^[^<]*[ /]>\", 0);\n  var selfClosing = relativeEnd !== -1 && afterStart[relativeEnd - 1] === \"/\";\n  if (debug) console.log(\"[xml-utils] selfClosing:\", selfClosing);\n  if (selfClosing === false) {\n    // check if tag has subtags with the same name\n    if (nested) {\n      var _startIndex = 0;\n      var openings = 1;\n      var closings = 0;\n      while ((relativeEnd = indexOfMatchEnd(afterStart, \"[ /]\" + tagName + \">\", _startIndex)) !== -1) {\n        var clip = afterStart.substring(_startIndex, relativeEnd + 1);\n        openings += countSubstring(clip, \"<\" + tagName + \"[ \\n\\t>]\");\n        closings += countSubstring(clip, \"</\" + tagName + \">\");\n        // we can't have more openings than closings\n        if (closings >= openings) break;\n        _startIndex = relativeEnd;\n      }\n    } else {\n      relativeEnd = indexOfMatchEnd(afterStart, \"[ /]\" + tagName + \">\", 0);\n    }\n  }\n  var end = start + tagName.length + relativeEnd + 1;\n  if (debug) console.log(\"[xml-utils] end:\", end);\n  if (end === -1) return undefined;\n  var outer = xml.slice(start, end);\n  // tag is like <gml:identifier codeSpace=\"OGP\">urn:ogc:def:crs:EPSG::32617</gml:identifier>\n\n  var inner;\n  if (selfClosing) {\n    inner = null;\n  } else {\n    inner = outer.slice(outer.indexOf(\">\") + 1, outer.lastIndexOf(\"<\"));\n  }\n  return {\n    inner: inner,\n    outer: outer,\n    start: start,\n    end: end\n  };\n}\nmodule.exports = findTagByName;\nmodule.exports.default = findTagByName;","map":{"version":3,"names":["indexOfMatch","require","indexOfMatchEnd","countSubstring","findTagByName","xml","tagName","options","debug","nested","startIndex","console","log","start","concat","undefined","afterStart","slice","length","relativeEnd","selfClosing","openings","closings","clip","substring","end","outer","inner","indexOf","lastIndexOf","module","exports","default"],"sources":["/home/umang/iHub/DFS_ReactViewer/client/node_modules/xml-utils/find-tag-by-name.js"],"sourcesContent":["const indexOfMatch = require(\"./index-of-match.js\");\nconst indexOfMatchEnd = require(\"./index-of-match-end.js\");\nconst countSubstring = require(\"./count-substring.js\");\n\nfunction findTagByName(xml, tagName, options) {\n  const debug = (options && options.debug) || false;\n  const nested = !(options && typeof options.nested === false);\n\n  const startIndex = (options && options.startIndex) || 0;\n\n  if (debug) console.log(\"[xml-utils] starting findTagByName with\", tagName, \" and \", options);\n\n  const start = indexOfMatch(xml, `\\<${tagName}[ \\n\\>\\/]`, startIndex);\n  if (debug) console.log(\"[xml-utils] start:\", start);\n  if (start === -1) return undefined;\n\n  const afterStart = xml.slice(start + tagName.length);\n\n  let relativeEnd = indexOfMatchEnd(afterStart, \"^[^<]*[ /]>\", 0);\n\n  const selfClosing = relativeEnd !== -1 && afterStart[relativeEnd - 1] === \"/\";\n  if (debug) console.log(\"[xml-utils] selfClosing:\", selfClosing);\n\n  if (selfClosing === false) {\n    // check if tag has subtags with the same name\n    if (nested) {\n      let startIndex = 0;\n      let openings = 1;\n      let closings = 0;\n      while ((relativeEnd = indexOfMatchEnd(afterStart, \"[ /]\" + tagName + \">\", startIndex)) !== -1) {\n        const clip = afterStart.substring(startIndex, relativeEnd + 1);\n        openings += countSubstring(clip, \"<\" + tagName + \"[ \\n\\t>]\");\n        closings += countSubstring(clip, \"</\" + tagName + \">\");\n        // we can't have more openings than closings\n        if (closings >= openings) break;\n        startIndex = relativeEnd;\n      }\n    } else {\n      relativeEnd = indexOfMatchEnd(afterStart, \"[ /]\" + tagName + \">\", 0);\n    }\n  }\n\n  const end = start + tagName.length + relativeEnd + 1;\n  if (debug) console.log(\"[xml-utils] end:\", end);\n  if (end === -1) return undefined;\n\n  const outer = xml.slice(start, end);\n  // tag is like <gml:identifier codeSpace=\"OGP\">urn:ogc:def:crs:EPSG::32617</gml:identifier>\n\n  let inner;\n  if (selfClosing) {\n    inner = null;\n  } else {\n    inner = outer.slice(outer.indexOf(\">\") + 1, outer.lastIndexOf(\"<\"));\n  }\n\n  return { inner, outer, start, end };\n}\n\nmodule.exports = findTagByName;\nmodule.exports.default = findTagByName;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}